<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>记录我的点滴</title>
  
  <subtitle>Yu Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-10T15:33:25.869Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>boygreen_Yu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webpack入坑记 01</title>
    <link href="http://yoursite.com/2019/09/10/webpack%E5%85%A5%E5%9D%91%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/09/10/webpack入坑记/</id>
    <published>2019-09-10T02:04:41.000Z</published>
    <updated>2019-09-10T15:33:25.869Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h2 id="似水的流年-为何不去邂逅一场繁华的悸动"><a href="#似水的流年-为何不去邂逅一场繁华的悸动" class="headerlink" title="似水的流年  为何不去邂逅一场繁华的悸动"></a>似水的流年  为何不去邂逅一场繁华的悸动</h2></blockquote><h4 id><a href="#" class="headerlink" title></a><img src="https://thinkerhope.github.io/2019/09/10/webpack%E5%85%A5%E5%9D%91%E8%AE%B0/webpack03.jpg" alt="想你了，睡不着"></h4><blockquote><h3 id="Grunt-Gulp流程"><a href="#Grunt-Gulp流程" class="headerlink" title="Grunt/Gulp流程"></a>Grunt/Gulp流程</h3></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1031000-d0693c06bb3a00e3.png" alt></p><h1 id="构建-amp-执行过程"><a href="#构建-amp-执行过程" class="headerlink" title="构建&amp;执行过程"></a>构建&amp;执行过程</h1><p>要完全理解webpack整个构建过程是有难度的，这需要你去学习webpack的源码，这里简单地说一下webpack的执行过程:</p><ul><li>webpack先识别我们写的配置表选项，进行一系列的初始化</li><li>webpack从入口文件开始进行编译，递归解析对应依赖的文件，需要进行预处理的文件会根据配置的loader去转换</li><li>根据不同块之间的依赖进行分组，分成不同的<code>chunk</code></li><li>将不同的<code>chunk</code>转成对应的输出文件</li><li>plugin会贯穿这个编译的过程，会在适当的时机调用适当的插件</li></ul><h3 id="webpack工作流程"><a href="#webpack工作流程" class="headerlink" title="webpack工作流程"></a>webpack工作流程</h3><p>把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件（Dependency Graph，从入口文件开始进行编译，递归解析对应依赖的文件），使用loaders处理它们，最后打包为一个浏览器可识别的JavaScript文件。</p><p><img src="http://upload-images.jianshu.io/upload_images/1031000-160bc667d3b6093a.png" alt></p><h4 id="package-json配置"><a href="#package-json配置" class="headerlink" title="package.json配置"></a>package.json配置</h4><blockquote><p>自定义命令</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;  </span><br><span class="line"> &quot;dev&quot;: &quot;webpack-dev-server --open --colors&quot;,  </span><br><span class="line">    &quot;build&quot;: &quot;cross-env NODE_ENV=production webpack -p&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>总结一下写阮一峰的15个demo遇到的问题：</p><h1 id="webpack加载器解析顺序"><a href="#webpack加载器解析顺序" class="headerlink" title="webpack加载器解析顺序"></a>webpack加载器解析顺序</h1><p>无论是字符串语法<code>style-loader!css-loader</code>，亦或是数组语法<code>[&#39;style-loader&#39;, &#39;css-loader&#39;]</code>，webpack解析规则都是从右至左，依次解析并执行加载器处理文件，前一加载器处理的输出就是下一加载器处理的输入，直到最后加载器处理完成；此处即webpack先调用css-loader加载器处理css文件，然后将处理结果传递给style-loader加载器，style-loader接受该输入继续处理。</p><h3 id="（1）注意babel-loader的rule一定要在url-loader下面"><a href="#（1）注意babel-loader的rule一定要在url-loader下面" class="headerlink" title="（1）注意babel-loader的rule一定要在url-loader下面"></a>（1）注意babel-loader的rule一定要在url-loader下面</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">main.jsx</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;React.Fragment&gt;</span><br><span class="line">      &lt;p&gt;halo demo5 图片资源&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">       &lt;img src=&#123;require('./</span><span class="number">4853</span>ca667a2b8b8844eb2693ac1b2578.png<span class="string">')&#125; /&gt;</span></span><br><span class="line"><span class="string">       &lt;img src=&#123;require('</span>./big.png<span class="string">')&#125; /&gt;</span></span><br><span class="line"><span class="string">    &lt;/React.Fragment&gt;</span></span><br><span class="line"><span class="string">  , document.getElementById('</span>root<span class="string">'));</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">wbpack.config.js[https://thinkerhope.github.io/2019/09/10/webpack%E5%85%A5%E5%9D%91%E8%AE%B0/webpack03.jpg](</span></span><br><span class="line"><span class="string">module: &#123;</span></span><br><span class="line"><span class="string">    rules: [</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        test: /\.(png|jpg)$/,</span></span><br><span class="line"><span class="string">        //没有url-loader require('</span>././.(png|jpg)<span class="string">') webpack打包会报错。</span></span><br><span class="line"><span class="string">        use: [</span></span><br><span class="line"><span class="string">          &#123;</span></span><br><span class="line"><span class="string">            loader: '</span>url-loader<span class="string">',</span></span><br><span class="line"><span class="string">            options: &#123;</span></span><br><span class="line"><span class="string">              limit: 8192</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">          // loader: '</span>url-loader?limit=<span class="number">8192</span><span class="string">'</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        test: /\.jsx?$/,</span></span><br><span class="line"><span class="string">        exclude: /node_modules/,</span></span><br><span class="line"><span class="string">        use: [</span></span><br><span class="line"><span class="string">          &#123;</span></span><br><span class="line"><span class="string">            loader: '</span>babel-loader<span class="string">',</span></span><br><span class="line"><span class="string">            options: &#123;</span></span><br><span class="line"><span class="string">              presets: ['</span>es2015<span class="string">', '</span>react<span class="string">']</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">  &#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>解释：好吧，我才刚学，等我会了再更新。</p></blockquote><h3 id="（2）让webpack-config-js支持-es6写法"><a href="#（2）让webpack-config-js支持-es6写法" class="headerlink" title="（2）让webpack.config.js支持 es6写法"></a>（2）让webpack.config.js支持 es6写法</h3><p>不喜欢commonJS的写法，还是习惯es6的import，但是直接import发现并不支持 import，报语法错误了。</p><p><img src="https://thinkerhope.github.io/2019/09/10/webpack%E5%85%A5%E5%9D%91%E8%AE%B0/webpack10.png" alt></p><blockquote><p>以下为解决方法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">第一、把webpack.config.js改名为webpack.config.babel.js（前提是目录下装了babel-loader 和 babel-core）</span><br><span class="line"></span><br><span class="line">第二、把增加一个.babelrc的文件，里面写上&#123; &quot;presets&quot;: [&quot;es2015&quot;]&#125;。</span><br><span class="line"></span><br><span class="line">第三、在package.json文件中加上</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">     <span class="string">"babel-core"</span>: <span class="string">"^6.3.26"</span>,</span><br><span class="line">     <span class="string">"babel-loader"</span>: <span class="string">"^6.2.0"</span>,</span><br><span class="line">     <span class="string">"babel-preset-es2015"</span>: <span class="string">"^6.24.1"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后 <code>npm install</code> 或者 <code>npm i</code>   Nice!可以webpack -p了</p><p><strong>重点来了，之所以不支持es6，是因为我写的demo是webpack 1.00版本了，上个世纪的版本，新的webpack版本好像已经支持es6，而且webpack2.0以上，不能这样实现在webpack.config.js中书写es6语法。</strong></p><h1 id="插件系统"><a href="#插件系统" class="headerlink" title="插件系统"></a>插件系统</h1><h3 id="UglifyJs-Plugin"><a href="#UglifyJs-Plugin" class="headerlink" title="UglifyJs Plugin"></a>UglifyJs Plugin</h3><h6 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h6><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UglifyJsPlugin <span class="keyword">from</span> <span class="string">'uglifyjs-webpack-plugin'</span>;</span><br><span class="line"><span class="comment">//注意看自己的webpack版本是否支持es6</span></span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> UglifyJsPlugin()</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h6 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h6><blockquote><p>压缩output(bundle.js)Js.code</p></blockquote><h3 id="HTML-Webpack-Plugin-amp-Open-Browser-Webpack-Plugin"><a href="#HTML-Webpack-Plugin-amp-Open-Browser-Webpack-Plugin" class="headerlink" title="HTML Webpack Plugin  &amp;   Open Browser Webpack Plugin"></a>HTML Webpack Plugin  &amp;   Open Browser Webpack Plugin</h3><h6 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h6><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> HtmlwebpackPlugin <span class="keyword">from</span> <span class="string">'html-webpack-plugin'</span>;</span><br><span class="line"><span class="keyword">import</span> OpenBrowserPlugin <span class="keyword">from</span> <span class="string">'open-browser-webpack-plugin'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./main.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlwebpackPlugin(&#123;</span><br><span class="line">      title: <span class="string">'Webpack-demos'</span>,</span><br><span class="line">      filename: <span class="string">'index.html'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> OpenBrowserPlugin(&#123;</span><br><span class="line">      url: <span class="string">'http://localhost:8080'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h6 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h6><blockquote><p> HTML  为你创建一个index.html </p><p>OpenBrowser  当webpack加载的时候打开一个新标签页</p></blockquote><h3 id="代码拆分"><a href="#代码拆分" class="headerlink" title="代码拆分"></a>代码拆分</h3><blockquote><p>webpack使用 require.ensure定义split point 。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="built_in">require</span>.ensure([<span class="string">'./a'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> content = <span class="built_in">require</span>(<span class="string">'./a'</span>);</span><br><span class="line">  <span class="built_in">document</span>.open();</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">'&lt;h1&gt;'</span> + content + <span class="string">'&lt;/h1&gt;'</span>);</span><br><span class="line">  <span class="built_in">document</span>.close();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面的代码告诉webpack <code>./a.js</code> 应该从 <code>bundle.js</code> 被拆分开，并创建一个新的<code>chunk file</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="string">'Hello World'</span>;</span><br></pre></td></tr></table></figure><blockquote><p>此时，你不用在index.html中手动引入chunk.js，也不用在webpack.config.js的output里配置chunk。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">index.html</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;script src=<span class="string">"bundle.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">  &lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br><span class="line"></span><br><span class="line">webpack.config.js</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./mplugins: [</span></span><br><span class="line"><span class="string">    new webpack.optimize.CommonsChunkPlugin(&#123;</span></span><br><span class="line"><span class="string">      name: "commons",</span></span><br><span class="line"><span class="string">      // (the commons chunk name)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      filename: "commons.js",</span></span><br><span class="line"><span class="string">      // (the filename of the commons chunk)</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">  ]ain.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="bundle-loader"><a href="#bundle-loader" class="headerlink" title="bundle-loader"></a>bundle-loader</h3><blockquote><p>代码拆分的另一种方式。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> load = <span class="built_in">require</span>(<span class="string">'bundle-loader!./a.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// To wait until a.js is available (and get the exports)</span></span><br><span class="line"><span class="comment">//  you need to async wait for it.</span></span><br><span class="line">load(<span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.open();</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">'&lt;h1&gt;'</span> + file + <span class="string">'&lt;/h1&gt;'</span>);</span><br><span class="line">  <span class="built_in">document</span>.close();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>Q  利用bundle-loader实现按需加载</p></blockquote><blockquote><p><a href="https://github.com/webpack-contrib/bundle-loader/blob/master/index.js" target="_blank" rel="noopener">源码</a>阅读，代码简短，也是通过require.ensure()实现。</p></blockquote><h3 id="CommonsChunkPlugin"><a href="#CommonsChunkPlugin" class="headerlink" title="CommonsChunkPlugin"></a>CommonsChunkPlugin</h3><blockquote><p>有利于浏览器缓存和节省带宽</p></blockquote><h6 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h6><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line">...</span><br><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: <span class="string">"commons"</span>,</span><br><span class="line">      <span class="comment">// (the commons chunk name)</span></span><br><span class="line"></span><br><span class="line">      filename: <span class="string">"commons.js"</span>,</span><br><span class="line">      <span class="comment">// (the filename of the commons chunk)</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><blockquote><p>用CommonsChunkPlugin拆分第三方库</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">main.js</span><br><span class="line"><span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>);</span><br><span class="line">$(<span class="string">'h1'</span>).text(<span class="string">'Hello World'</span>);</span><br><span class="line"></span><br><span class="line">index.html</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;script src=<span class="string">"vendor.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">"bundle.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">  &lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br><span class="line">    </span><br><span class="line">webpack.config.js</span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./main.js'</span>,</span><br><span class="line">    vendor: [<span class="string">'jquery'</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: <span class="string">'vendor'</span>,</span><br><span class="line">      filename: <span class="string">'vendor.js'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>注意  entry.vendor: [‘jquery’]告诉webpack jquery要被包含在commmon chunk (vendor.js中)，所以CommonsChunkPlugin中的name属性和entry中的vendor键必须相同，也可以是其它名字。</p></blockquote><p>从上面也可以发现每个模块中要使用jquery都要require(‘jquery’)。</p><p>如果希望$作为全局变量，而不使用require(‘jquery’)，如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line">$(<span class="string">'h1'</span>).text(<span class="string">'Hello World'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./main.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">      $: <span class="string">'jquery'</span>,</span><br><span class="line">      jQuery: <span class="string">'jquery'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>使用ProvidePlugin可以自动载入模块，而不需要import或者require()模块。</p></blockquote><h3 id="暴露全局变量-externals"><a href="#暴露全局变量-externals" class="headerlink" title="暴露全局变量   externals"></a>暴露全局变量   externals</h3><p>当我们需要使用一些全局变量，又不希望变量包含在bundle文件中，不需要webpack处理，编译进文件中，在我们需要，使用它的时候可以通过CMD、AMD、或者window全局方式访问。</p><p>假设我们自己有个工具库，tools.js，它并没有提供给我们UMD的那些功能，只是使用window或者global的方式把工具的对象tools暴露出来</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">utils.js</span><br><span class="line"><span class="built_in">window</span>.tools = &#123;</span><br><span class="line">    add: <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> num1 + num2</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>引入</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"http://xxx/tools.min.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>可能我们会直接引用</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> res = tools.add(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>既然我们是模块化开发，当然要杜绝一切全局变量了，我们要用require的方式。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`const tools = require(`</span><span class="string">`'mathTools'`</span><span class="string">`)`</span><span class="string">`const res = tools.add(1,2)`</span></span><br></pre></td></tr></table></figure><p>　　</p><blockquote><p>这时我们再来配置一些externals即可</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  output: &#123;</span><br><span class="line">    ...</span><br><span class="line">    libraryTarget: <span class="string">"umd"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  externals: &#123;</span><br><span class="line">    mathTools: <span class="string">"tools"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>打包后会有这一段</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = mathTools;</span><br></pre></td></tr></table></figure><blockquote><p>要注意的点</p><p><code>externals: {  mathTools: &quot;tools&quot; }</code> 和 <code>const tools = require(&#39;mathTools&#39;)</code> tools和mathTools是对应的。并且 <code>utils.js</code>中的<code>tools</code> 变量要和 <code>const tools = require(&#39;mathTools&#39;)</code> 的 <code>tools</code> 变量对应。</p></blockquote><p>皮毛的东西，继续填坑吧，哎。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h2 id=&quot;似水的流年-为何不去邂逅一场繁华的悸动&quot;&gt;&lt;a href=&quot;#似水的流年-为何不去邂逅一场繁华的悸动&quot; class=&quot;headerlink&quot; title=&quot;似水的流年  为何不去邂逅一场繁华的悸动&quot;&gt;&lt;/a&gt;似水的流年  为何不去邂逅一场
      
    
    </summary>
    
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>combineReducers源码学习</title>
    <link href="http://yoursite.com/2019/09/09/combineReducers%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2019/09/09/combineReducers源码学习/</id>
    <published>2019-09-09T10:50:50.000Z</published>
    <updated>2019-09-09T13:17:46.086Z</updated>
    
    <content type="html"><![CDATA[<p>combineReducers的基本使用，上一组乱七八糟的图：</p><p><img src="https://thinkerhope.github.io/2019/09/09/combineReducers%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/Reducers.png" alt></p><p>​                                                          <u>根目录下store里的reducer</u></p><p><img src="https://thinkerhope.github.io/2019/09/09/combineReducers%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/reducers03.png" alt></p><p>​                                                                  <u>AvatarReducer</u></p><p>一般不会直接在根目录的reducer里导入AvatarReducer，而是在Avatar对应的store里新建一个index.js作为导出文件。规范代码。</p><p><img src="https://thinkerhope.github.io/2019/09/09/combineReducers%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/reducer04.png" alt></p><p>​                                                   <u>AvatarReducer对应的store目录的导出文件</u></p><p>combineReducers里面的每一个值都是导出的函数，比较好奇是怎么合并。</p><p>天哪，我发现我入了个错坑，之前是完全误解了combineReducers，导致我的项目里没有有点逻辑，它的价值在于分离相应的逻辑。果然对于开发者来说，设计理念才是最重要的，否则即使知道源码，也会越走越错。</p><p>重新认识一下combineReducers：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; VisibilityFilters, ADD_TODO, TOGGLE_TODO &#125; <span class="keyword">from</span> <span class="string">'./actions'</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">todoApp</span>(<span class="params">state = initialState, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> SET_VISIBILITY_FILTER:</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;</span><br><span class="line">        visibilityFilter: action.filter</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="keyword">case</span> ADD_TODO:</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;</span><br><span class="line">        todos: [</span><br><span class="line">          ...state.todos,</span><br><span class="line">          &#123;</span><br><span class="line">            text: action.text,</span><br><span class="line">            completed: <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="keyword">case</span> TOGGLE_TODO:</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;</span><br><span class="line">        todos: state.todos.map(<span class="function">(<span class="params">todo, index</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (index === action.index) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, todo, &#123;</span><br><span class="line">              completed: !todo.completed</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> todo</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为todos跟visibilityFilter是分开更新的，所以其实我们可以把它们分开来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">todos</span>(<span class="params">state = [], action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> ADD_TODO:</span><br><span class="line">      <span class="keyword">return</span> [</span><br><span class="line">        ...state,</span><br><span class="line">        &#123;</span><br><span class="line">          text: action.text,</span><br><span class="line">          completed: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    <span class="keyword">case</span> TOGGLE_TODO:</span><br><span class="line">      <span class="keyword">return</span> state.map(<span class="function">(<span class="params">todo, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index === action.index) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, todo, &#123;</span><br><span class="line">            completed: !todo.completed</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> todo</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">visibilityFilter</span>(<span class="params">state = SHOW_ALL, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> SET_VISIBILITY_FILTER:</span><br><span class="line">      <span class="keyword">return</span> action.filter</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">todoApp</span>(<span class="params">state = &#123;&#125;, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    visibilityFilter: visibilityFilter(state.visibilityFilter, action),</span><br><span class="line">    todos: todos(state.todos, action)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样每个reducer只负责自己那一块的状态更新，combindReducers做了上面todoApp做的事情。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> todoApp = combineReducers(&#123;</span><br><span class="line">  visibilityFilter,</span><br><span class="line">  todos</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> todoApp</span><br></pre></td></tr></table></figure><p>如下为一个简单的实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combindReducer</span>(<span class="params">reducers</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 第一个只是先过滤一遍 把非function的reducer过滤掉</span></span><br><span class="line">  <span class="keyword">const</span> reducerKeys = <span class="built_in">Object</span>.keys(reducers)</span><br><span class="line">  <span class="keyword">const</span> finalReducers = &#123;&#125;</span><br><span class="line">  reducerKeys.forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">typeof</span> reducers[key] === <span class="string">'function'</span>) &#123;</span><br><span class="line">      finalReducers[key] = reducers[key]</span><br><span class="line">      &#125; </span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> finalReducersKeys = <span class="built_in">Object</span>.keys(finalReducers)</span><br><span class="line">    <span class="comment">// 第二步比较重要 就是将所有reducer合在一起</span></span><br><span class="line">    <span class="comment">// 根据key调用每个reducer，将他们的值合并在一起</span></span><br><span class="line">    <span class="keyword">let</span> hasChange = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">const</span> nextState = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">combind</span>(<span class="params">state=&#123;&#125;, action</span>) </span>&#123;</span><br><span class="line">        finalReducersKeys.forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> previousValue = state[key];</span><br><span class="line">            <span class="keyword">const</span> nextValue = reducers[key](previousValue, action);</span><br><span class="line">            nextState[key] = nextValue;</span><br><span class="line">            hasChange = hasChange || previousValue !== nextValue</span><br><span class="line">            <span class="comment">//只要有一个reducer的值改变，hasChange就为true</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> hasChange ? nextState : state;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;combineReducers的基本使用，上一组乱七八糟的图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://thinkerhope.github.io/2019/09/09/combineReducers%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B
      
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
      <category term="react-redux" scheme="http://yoursite.com/tags/react-redux/"/>
    
  </entry>
  
  <entry>
    <title>总结一下遇到的react-router-dom应用</title>
    <link href="http://yoursite.com/2019/09/09/%E6%80%BB%E7%BB%93%E4%B8%80%E4%B8%8B%E9%81%87%E5%88%B0%E7%9A%84react-router-dom%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2019/09/09/总结一下遇到的react-router-dom应用/</id>
    <published>2019-09-09T00:34:12.897Z</published>
    <updated>2019-09-09T00:34:12.897Z</updated>
    
    <content type="html"><![CDATA[<h1 id="（1）根据路由切换浏览器的title属性"><a href="#（1）根据路由切换浏览器的title属性" class="headerlink" title="（1）根据路由切换浏览器的title属性"></a>（1）根据路由切换浏览器的title属性</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React,&#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123;Switch,Route,NavLink,Redirect,withRouter&#125; <span class="keyword">from</span>  <span class="string">'react-router-dom'</span></span><br><span class="line"><span class="keyword">import</span> One <span class="keyword">from</span> <span class="string">'./One'</span></span><br><span class="line"><span class="keyword">import</span> NotFound <span class="keyword">from</span> <span class="string">'./NotFound'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">      <span class="keyword">super</span>(props);</span><br><span class="line">      props.history.listen(<span class="function">(<span class="params">location</span>) =&gt;</span> &#123;  </span><br><span class="line">          <span class="comment">//在这里监听location对象</span></span><br><span class="line">         <span class="built_in">console</span>.log(location.pathname); </span><br><span class="line">         <span class="keyword">switch</span>(location.pathname)&#123;   </span><br><span class="line">         <span class="keyword">case</span> <span class="string">'/one/users'</span> : <span class="built_in">document</span>.title = <span class="string">'用户列表'</span>;              <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="string">'/one/companies'</span> : <span class="built_in">document</span>.title = <span class="string">'公司列表'</span>;          <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">default</span> : <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  render()&#123;</span><br><span class="line">     <span class="keyword">return</span> (</span><br><span class="line">         &lt;div className=<span class="string">'app'</span>&gt;</span><br><span class="line">            &lt;NavLink to=<span class="string">'/one/users'</span>&gt;用户列表&lt;<span class="regexp">/NavLink&gt;</span></span><br><span class="line"><span class="regexp">            &lt;NavLink to='/</span>one/companies<span class="string">'&gt;公司列表&lt;/NavLink&gt;</span></span><br><span class="line"><span class="string">            &lt;Switch&gt;</span></span><br><span class="line"><span class="string">              &lt;Route path='</span>/one/:type?<span class="string">'  component=&#123;One&#125; /&gt;</span></span><br><span class="line"><span class="string">              &lt;Redirect from='</span>/<span class="string">' to='</span>/one<span class="string">' exact /&gt;</span></span><br><span class="line"><span class="string">              &lt;Route component=&#123;NotFound&#125; /&gt;</span></span><br><span class="line"><span class="string">            &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">         &lt;/div&gt;</span></span><br><span class="line"><span class="string">     )；</span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default withRouter(App);</span></span><br></pre></td></tr></table></figure><h1 id="（2）withRouter-的常见应用"><a href="#（2）withRouter-的常见应用" class="headerlink" title="（2）withRouter()的常见应用:"></a>（2）withRouter()的常见应用:</h1><p>作用：</p><h2 id="（1）withRouter可以用来给组件注入router相关的一些参数。"><a href="#（1）withRouter可以用来给组件注入router相关的一些参数。" class="headerlink" title="（1）withRouter可以用来给组件注入router相关的一些参数。"></a>（1）withRouter可以用来给组件注入router相关的一些参数。</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"><span class="keyword">import</span> &#123; withRouter &#125; <span class="keyword">from</span> <span class="string">'react-router'</span><span class="comment">// A simple component that shows the pathname of the current location</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShowTheLocation</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> propTypes = &#123; </span><br><span class="line">   match: PropTypes.object.isRequired, </span><br><span class="line">   location: PropTypes.object.isRequired, </span><br><span class="line">   history: PropTypes.object.isRequired</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; match, location, history &#125; = <span class="keyword">this</span>.props</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">          &lt;div&gt;You are now at &#123;location.pathname&#125;&lt;<span class="regexp">/div&gt;           )；</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="（2）其次withRouter是专门用来处理数据更新问题的。"><a href="#（2）其次withRouter是专门用来处理数据更新问题的。" class="headerlink" title="（2）其次withRouter是专门用来处理数据更新问题的。"></a>（2）其次withRouter是专门用来处理数据更新问题的。</h2><p>在使用一些redux的的<code>connect()</code>或者mobx的<code>inject()</code>的组件中，如果依赖于路由的更新要重新渲染，会出现路由更新了但是组件没有重新渲染的情况。这是因为redux和mobx的这些连接方法会修改组件的<code>shouldComponentUpdate</code>。</p><p>使用withRouter解决更新问题的时候，一定要保证withRouter在最外层，比如<code>withRouter(connect(Component))</code>。</p><h2 id="（3）NavLink用来做导航样式"><a href="#（3）NavLink用来做导航样式" class="headerlink" title="（3）NavLink用来做导航样式"></a>（3）NavLink用来做导航样式</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// header.js</span></span><br><span class="line">  &lt;li className=<span class="string">"tab"</span>&gt;</span><br><span class="line">    &lt;NavLink exact to=<span class="string">"/"</span> activeClassName=<span class="string">"active"</span>&gt;</span><br><span class="line">      &lt;span className=<span class="string">"menu-text"</span>&gt;首页&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;iclassName="iconfontic-navigation-discover menu-icon"&gt;&amp;#xe61f;&lt;i&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>NavLink&gt;</span><br><span class="line">  &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  &lt;li className="tab"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;NavLink to="/</span>download<span class="string">" activeClassName="</span>active<span class="string">"&gt;</span></span><br><span class="line"><span class="string">      &lt;span className="</span>menu-text<span class="string">"&gt;下载App&lt;/span&gt;</span></span><br><span class="line"><span class="string">      &lt;i className="</span>iconfont ic-navigation-download menu-icon<span class="string">"&gt;&amp;#xe608;&lt;/i&gt;</span></span><br><span class="line"><span class="string">    &lt;/NavLink&gt;</span></span><br><span class="line"><span class="string">  &lt;/li&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// home.js</span></span><br><span class="line"><span class="string">&lt;NavLink to="</span>/detail<span class="string">"  className="</span>title<span class="string">" &gt;&#123;itemInfo.title&#125;&lt;/NavLink&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//App.js</span></span><br><span class="line"><span class="string">import &#123; BrowserRouter as Router, Route &#125; from 'react-router-dom';</span></span><br><span class="line"><span class="string">&lt;Router &gt;</span></span><br><span class="line"><span class="string">  &lt;Header /&gt;</span></span><br><span class="line"><span class="string">  &lt;Route exact path="</span>/<span class="string">" component=&#123;Home&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">  &lt;Route path="</span>/detail<span class="string">" target="</span>_blank<span class="string">" render=&#123;() =&gt; (&lt;div&gt;details~&lt;/div&gt;)&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">  &lt;Route path="</span>/download<span class="string">" render=&#123;() =&gt; (&lt;div&gt;&lt;/div&gt;)&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">&lt;/Router&gt;</span></span><br></pre></td></tr></table></figure><p>点击首页和下载App会切换组件，并且点击的链接activeClassName会被激活，给定激活class样式。失去激活状态的恢复样式：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">li.tab&gt;a.active &#123;</span><br><span class="line">    color: #ea6f5a;</span><br><span class="line">&#125;</span><br><span class="line">li.tab&gt;a:not(.active):hover &#123;</span><br><span class="line">  background-color: #f5f5f5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;（1）根据路由切换浏览器的title属性&quot;&gt;&lt;a href=&quot;#（1）根据路由切换浏览器的title属性&quot; class=&quot;headerlink&quot; title=&quot;（1）根据路由切换浏览器的title属性&quot;&gt;&lt;/a&gt;（1）根据路由切换浏览器的title属性&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="react-router-dom" scheme="http://yoursite.com/tags/react-router-dom/"/>
    
  </entry>
  
  <entry>
    <title>前端模块化 --AMD/RequireJs初识</title>
    <link href="http://yoursite.com/2019/09/08/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96-AMD-RequireJs%E5%88%9D%E8%AF%86/"/>
    <id>http://yoursite.com/2019/09/08/前端模块化-AMD-RequireJs初识/</id>
    <published>2019-09-08T11:30:01.000Z</published>
    <updated>2019-09-10T02:33:16.287Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><h2 id="I-am-a-sucker-for-all-beauty"><a href="#I-am-a-sucker-for-all-beauty" class="headerlink" title="I am a sucker for all beauty"></a><strong>I am a sucker for all beauty</strong></h2></blockquote><p><img src="https://thinkerhope.github.io/2019/09/08/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96-AMD-RequireJs%E5%88%9D%E8%AF%86/640.jpeg" alt></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><blockquote><p>菜鸟：<a href="https://www.runoob.com/w3cnote/requirejs-tutorial-2.html" target="_blank" rel="noopener">https://www.runoob.com/w3cnote/requirejs-tutorial-2.html</a></p><p>某位大佬：<a href="http://laichuanfeng.com/work/require-config-global/" target="_blank" rel="noopener">http://laichuanfeng.com/work/require-config-global/</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本菜鸟对于前端模块化的概念一直是比较模糊。学webpack也是稀里糊涂，自从webpack出现后，RequireJs几乎退出了人们的视野，官网也不再升级版本，后续出现的框架如angular、React、Vue又将前端模块上升到了另外一个高度。跟随前端时代的变迁固然重要，但有时，尝试一些“老技术”也无可厚非，或许也能给我们带来不同的体会。</p></blockquote><h2 id="RequireJS"><a href="#RequireJS" class="headerlink" title="RequireJS"></a>RequireJS</h2><h1 id="一、目的"><a href="#一、目的" class="headerlink" title="一、目的"></a>一、目的</h1><p>先明确AMD和RequireJS的关系：</p><p><strong>AMD-异步模块定义</strong></p><p><strong>AMD是RequireJS</strong>在推广过程中<strong>对模块定义的规范化</strong>产出，它是一个概念，RequireJS是对这个概念的实现，就好比JavaScript语言是对ECMAScript规范的实现。AMD是一个组织，RequireJS是在这个组织下自定义的一套脚本语言。</p><p>作为js文件加载器，能运行在所有js环境中（如node）。</p><p>所以，AMD有什么意义？</p><h2 id="（1）实现js文件的异步加载，避免网页失去响应"><a href="#（1）实现js文件的异步加载，避免网页失去响应" class="headerlink" title="（1）实现js文件的异步加载，避免网页失去响应"></a>（1）实现js文件的异步加载，避免网页失去响应</h2><p> 如下代码alert执行的时候，html内容是一片空白的，这就是js阻塞浏览器渲          染导致的结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">index.html:</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"a.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">    &lt;body&gt;</span></span><br><span class="line"><span class="regexp">      &lt;span&gt;body&lt;/</span>span&gt;</span><br><span class="line">    &lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a.js:</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      alert(<span class="string">"it works"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun1();</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h2 id="（2）管理模块之间的依赖性，便于代码的编写和维护"><a href="#（2）管理模块之间的依赖性，便于代码的编写和维护" class="headerlink" title="（2）管理模块之间的依赖性，便于代码的编写和维护"></a>（2）管理模块之间的依赖性，便于代码的编写和维护</h2><p>如下一坨</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"a.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"b.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"c.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"d.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"e.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"f.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"g.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"h.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"i.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"main.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>如果一个文件需要依赖另外一些文件中定义的东西时，这个文件依赖的所有文件都要在它之前导入。过于复杂的系统，依赖关系可能出现相互交叉的情况，依赖关系的管理就更加难了。例如main.js用到了前面a、b、c、d、e、f模块，但并未被其它模块使用，故可以且必须放到末尾导入。要确保模块的依赖在该模块导入之前就要导入，为了解除导入顺序的限制，只能让各模块间解耦。另外，加载文件越多，网页失去响应的时间就会越长。</p><h1 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h1><h2 id="2-1-下载"><a href="#2-1-下载" class="headerlink" title="2.1 下载"></a>2.1 下载</h2><h4 id="2-1-1-链接下载"><a href="#2-1-1-链接下载" class="headerlink" title="2.1.1 链接下载"></a>2.1.1 链接下载</h4><p>使用require.js的第一步，是先去官方网站<a href="http://requirejs.org/docs/download.html" target="_blank" rel="noopener">下载</a>最新版本。</p><h4 id="2-1-2-npm"><a href="#2-1-2-npm" class="headerlink" title="2.1.2 npm"></a>2.1.2 npm</h4><p>根目录下 输入</p><p><code>npm install requirejs --save-dev</code></p><p>如果当前目录没有package.json</p><p><code>npm init</code></p><h2 id="2-2使用"><a href="#2-2使用" class="headerlink" title="2.2使用"></a>2.2使用</h2><p>目录结构：</p><p><img src="https://raw.githubusercontent.com/thinkerHope/thinkerHope.github.io/master/2019/09/08/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96-AMD-RequireJs%E5%88%9D%E8%AF%86/AMD.png" alt></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">index.html</span><br><span class="line"> &lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"js/lib/require.js"</span>&gt;&lt;/script&gt;</span><br><span class="line"> &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">   <span class="built_in">require</span>([<span class="string">"js/script/a"</span>]);</span><br><span class="line"> &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp"> a.js</span></span><br><span class="line"><span class="regexp"> define(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  function f1() &#123;</span></span><br><span class="line"><span class="regexp">    alert('it works');</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  f1();</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br></pre></td></tr></table></figure><p>so，页面内容能正常显示了。</p><blockquote><p>基本API:</p><p> define, require, requirejs，其中require === requirejs。</p><p>define() – 定义一个模块，如上面的a.js</p><p>require() – 加载模块，并执行加载后的回调函数</p></blockquote><blockquote><p>注意:</p><p>  第一个参数是个数组，即使只有一个模块，也必须以数组形式作为参数。 </p><p>  require中加载模块不能加.js后缀</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">"js/a"</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">"load finished"</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="加载文件："><a href="#加载文件：" class="headerlink" title="加载文件："></a>加载文件：</h3><blockquote><p>require除了可以加载如上的本地模块，还可以加载来自本地服务器、其他网站、CDN的js文件。这时候就要配置require.config</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"./js/lib/require.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">      &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">        <span class="built_in">require</span>.config(&#123;</span><br><span class="line">          paths: &#123;</span><br><span class="line">            <span class="string">"jquery"</span> : [<span class="string">"http://libs.baidu.com/jquery/2.0.3/jquery"</span>],</span><br><span class="line">            <span class="string">"a"</span>: <span class="string">"js/script/a"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//require(["js/script/a"]);</span></span><br><span class="line">        <span class="built_in">require</span>([<span class="string">"jquery"</span>, <span class="string">"a"</span>], $ =&gt; &#123;</span><br><span class="line">          $(() =&gt; alert(<span class="string">"load finished"</span>));</span><br><span class="line">        &#125;);</span><br><span class="line">      &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>通过paths，我们可以简化模块的名字。除此之外，paths还有一个重要功能，</p><p>如下代码，当百度的jquery没有加载成功后，会加载本地js目录下的jquery。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"./js/lib/require.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">      &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">        <span class="built_in">require</span>.config(&#123;</span><br><span class="line">          paths: &#123;</span><br><span class="line">            <span class="string">"jquery"</span> : [<span class="string">"http://libs.baidu.com/jquery/2.0.3/jquery"</span>, <span class="string">"js/lib/jquery"</span>],</span><br><span class="line">            <span class="string">"a"</span>: <span class="string">"js/script/a"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//require(["js/script/a"]);</span></span><br><span class="line">        <span class="built_in">require</span>([<span class="string">"jquery"</span>, <span class="string">"a"</span>], $ =&gt; &#123;</span><br><span class="line">          $(() =&gt; alert(<span class="string">"load finished"</span>));</span><br><span class="line">        &#125;);</span><br><span class="line">      &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>上面require回调中的$参数，是依赖的<code>jquery</code>模块的输出变量，如果你依赖多个模块，可以依次写入多个参数来使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">"jquery"</span>,<span class="string">"underscore"</span>],<span class="function"><span class="keyword">function</span>(<span class="params">$, _</span>)</span>&#123;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        _.each([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],alert);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><p>requirejs提供了一种叫”主数据”(data-main)的功能</p><blockquote><p>按照data-main的方式进行全局配置对于我这种菜鸡感觉真的不友好(wuwuwu，为什么jquery一直加载不了啊)，所以我在网上找了一个适合我的解决方案，目前是可以加载成功的。</p></blockquote><h6 id="项目结构如下："><a href="#项目结构如下：" class="headerlink" title="项目结构如下："></a>项目结构如下：</h6><p><img src="https://thinkerhope.github.io/2019/09/08/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96-AMD-RequireJs%E5%88%9D%E8%AF%86/AMD20.png" alt></p><h6 id="require-config-js为全局配置："><a href="#require-config-js为全局配置：" class="headerlink" title="require.config.js为全局配置："></a>require.config.js为全局配置：</h6><p><img src="https://thinkerhope.github.io/2019/09/08/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96-AMD-RequireJs%E5%88%9D%E8%AF%86/AMD17.png" alt></p><h6 id="index-html中引入脚本方式："><a href="#index-html中引入脚本方式：" class="headerlink" title="index.html中引入脚本方式："></a>index.html中引入脚本方式：</h6><p><img src="https://thinkerhope.github.io/2019/09/08/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96-AMD-RequireJs%E5%88%9D%E8%AF%86/AMD12.png" alt></p><blockquote><p>解释（个人理解）：require.config.js中的脚本只是一个配置，而不是加载，所以需要在config.js模块加载完成（保证全局配置生效后）再根据require.config()的配置去加载需要的模块。emmm…虽然方法很笨…但是至少不会出现下面的情况：</p></blockquote><p><img src="https://thinkerhope.github.io/2019/09/08/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96-AMD-RequireJs%E5%88%9D%E8%AF%86/AMD30.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;I-am-a-sucker-for-all-beauty&quot;&gt;&lt;a href=&quot;#I-am-a-sucker-for-all-beauty&quot; class=&quot;headerlink&quot; title=&quot;I am a sucker for 
      
    
    </summary>
    
    
    
      <category term="FE 模块化" scheme="http://yoursite.com/tags/FE-%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>力扣学习第一天</title>
    <link href="http://yoursite.com/2019/09/08/%E5%8A%9B%E6%89%A3%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
    <id>http://yoursite.com/2019/09/08/力扣学习第一天/</id>
    <published>2019-09-08T10:57:17.000Z</published>
    <updated>2019-09-08T10:57:17.725Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>sass日常</title>
    <link href="http://yoursite.com/2019/09/08/sass%E6%97%A5%E5%B8%B8/"/>
    <id>http://yoursite.com/2019/09/08/sass日常/</id>
    <published>2019-09-08T01:37:17.000Z</published>
    <updated>2019-09-08T07:45:33.276Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础语法："><a href="#基础语法：" class="headerlink" title="基础语法："></a>基础语法：</h2><h3 id="引用父选择符：-amp"><a href="#引用父选择符：-amp" class="headerlink" title="引用父选择符： &amp;"></a>引用父选择符： <code>&amp;</code></h3><p>在编译时将被替换为父选择符，输出到 CSS 中。</p><h3 id="Nested-Rules"><a href="#Nested-Rules" class="headerlink" title="Nested Rules"></a>Nested Rules</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span> &#123;  </span><br><span class="line">  <span class="attribute">width</span>: <span class="number">97%</span>;</span><br><span class="line">  <span class="selector-tag">p</span>, <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">    <span class="selector-tag">a</span> &#123; </span><br><span class="line">      <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="selector-tag">pre</span> &#123; </span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">3em</span>; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>被编译为：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span> &#123;  </span><br><span class="line">  <span class="attribute">width</span>: <span class="number">97%</span>; </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-id">#main</span> <span class="selector-tag">p</span>, </span><br><span class="line"><span class="selector-id">#main</span> <span class="selector-tag">div</span> &#123;   </span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;   </span><br><span class="line"><span class="selector-id">#main</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-id">#main</span> <span class="selector-tag">div</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-id">#main</span> <span class="selector-tag">pre</span> &#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">3em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="嵌套属性"><a href="#嵌套属性" class="headerlink" title="嵌套属性"></a>嵌套属性</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.funky</span> &#123;  </span><br><span class="line">  <span class="attribute">font</span>: &#123;</span><br><span class="line">    family: fantasy;</span><br><span class="line">    size: <span class="number">30em</span>;</span><br><span class="line">    weight: bold;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>被编译为：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.funky</span> &#123;  </span><br><span class="line">  <span class="attribute">font-family</span>: fantasy;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30em</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以有自己的属性</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.funky</span> &#123;  </span><br><span class="line">  <span class="attribute">font</span>: <span class="number">2px</span>/<span class="number">3px</span> &#123;//可以有自己的属性    </span><br><span class="line">    family: fantasy;    </span><br><span class="line">    size: <span class="number">30em</span>;</span><br><span class="line">    weight: bold;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>被编译为：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.funky</span> &#123;  </span><br><span class="line">  <span class="attribute">font</span>: <span class="number">2px</span>/<span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: fantasy;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30em</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold; &#125;</span><br></pre></td></tr></table></figure><h2 id="sassScript"><a href="#sassScript" class="headerlink" title="sassScript:"></a>sassScript:</h2><h3 id="–-变量"><a href="#–-变量" class="headerlink" title="$ – 变量"></a>$ – 变量</h3><p>$width: 5em (: 是推荐的写法，而不是=)</p><p>数据类型（支持6种）</p><ul><li>数字（例如 <code>1.2</code>、<code>13</code>、<code>10px</code>）</li><li>文本字符串，无论是否有引号（例如 <code>&quot;foo&quot;</code>、<code>&#39;bar&#39;</code>、<code>baz</code>）</li><li>颜色（例如 <code>blue</code>、<code>#04a3f9</code>、<code>rgba(255, 0, 0, 0.5)</code>）</li><li>布尔值（例如 <code>true</code>、<code>false</code>）</li><li>空值（例如 <code>null</code>）</li><li>值列表，用空格或逗号分隔（例如 <code>1.5em 1em 0 2em</code>、<code>Helvetica, Arial, sans-serif</code>）</li></ul><h4 id="字符串-（两种都能识别）"><a href="#字符串-（两种都能识别）" class="headerlink" title="字符串 （两种都能识别）"></a><strong>字符串 （两种都能识别）</strong></h4><p>带引号</p><p>不带引号</p><p>例如 <code>sans-serif</code> 或 <code>bold</code></p><p>例外：当使用<a href="http://sass.bootcss.com/docs/sass-reference/#interpolation_" target="_blank" rel="noopener"><code>#{}</code>插值时</a>，引用的字符串是不加引号的， 这使得更容易使用例如<a href="http://sass.bootcss.com/docs/sass-reference/#mixins" target="_blank" rel="noopener">mixin中的</a>选择器名称：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> firefox-message(<span class="variable">$selector</span>) &#123;  </span><br><span class="line">  <span class="selector-tag">body</span><span class="selector-class">.firefox</span> #&#123;<span class="variable">$selector</span>&#125;:before &#123;    </span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"Hi, Firefox users!"</span>; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">include</span> firefox-message(<span class="string">".header"</span>);</span><br></pre></td></tr></table></figure><p>被编译为：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span><span class="selector-class">.firefox</span> <span class="selector-class">.header</span>:before &#123; </span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"Hi, Firefox users!"</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>值得注意的是，在使用<a href="http://sass.bootcss.com/docs/sass-reference/#sassscript" target="_blank" rel="noopener">不推荐使用的<code>=</code>属性语法时</a>，所有字符串都被解释为不带引号，无论它们是否用引号编写。</p><p><strong>清单</strong></p><p>列表： </p><p>包含简单值：</p><p><strong>运算</strong></p><p>//所有数据类型都支持等式运算 (<code>==</code> and <code>!=</code>)。 另外，每种数据类型也有其支持的特殊运算符。</p><p><strong>数字运算</strong></p><p>标准运算（加 <code>+</code>、减 <code>-</code>、乘 <code>*</code>、除 <code>/</code>和取模 <code>%</code>）需要时可以做单位转换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p &#123;  width: 1in + 8pt;&#125;</span><br></pre></td></tr></table></figure><p>被编译为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p &#123;  width: 1.111in; &#125;</span><br></pre></td></tr></table></figure><p>关系运算（<code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>、<code>&gt;=</code>）</p><p>注意 “/“</p><p>CSS 允许 <code>/</code> 出现在属性值里，作为分隔数字的一种方法</p><p>如 font: 10px/8px;</p><p>在 SassScript 里用 <code>/</code> 分隔的两个数字， 都会在 CSS 中原封不动的输出。</p><p>在以下三种情况中，<code>/</code> 会被解释为除法运算。(大多数真正需要除法)：</p><ol><li>如果数值或它的任意部分是存储在一个变量中或是函数的返回值。</li><li>如果数值被圆括号包围。</li><li>如果数值是另一个数学表达式的一部分。</li></ol><p>例如：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;  </span><br><span class="line">  <span class="attribute">font</span>: <span class="number">10px</span>/<span class="number">8px</span>;  <span class="comment">// 纯 CSS，不是除法运算  </span></span><br><span class="line">  <span class="variable">$width</span>: <span class="number">1000px</span>;  </span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$width</span>/<span class="number">2</span>;  <span class="comment">// 使用了变量，是除法运算  </span></span><br><span class="line">  <span class="attribute">width</span>: round(<span class="number">1.5</span>)/<span class="number">2</span>;  <span class="comment">// 使用了函数，是除法运算  </span></span><br><span class="line">  <span class="attribute">height</span>: (<span class="number">500px</span>/<span class="number">2</span>);  <span class="comment">// 使用了圆括号，是除法运算  </span></span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">5px</span> + <span class="number">8px</span>/<span class="number">2px</span>; <span class="comment">// 使用了加（+）号，是除法运算</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>被编译为：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;  </span><br><span class="line">  <span class="attribute">font</span>: <span class="number">10px</span>/<span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">250px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">9px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你希望在纯 CSS 中使用变量和 <code>/</code>， 你可以用 <code>#{}</code> 包住变量。 例如：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;  </span><br><span class="line">  <span class="variable">$font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="variable">$line-height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">font</span>: #&#123;<span class="variable">$font-size</span>&#125;/#&#123;<span class="variable">$line-height</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>被编译为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p &#123;  font: 12px/30px; &#125;</span><br></pre></td></tr></table></figure><h4 id="字符串运算"><a href="#字符串运算" class="headerlink" title="字符串运算"></a>字符串运算</h4><p>链接字符串  –  +</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p &#123;  cursor: e + -resize;&#125;</span><br></pre></td></tr></table></figure><p>被编译为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p &#123;  cursor: e-resize; &#125;</span><br></pre></td></tr></table></figure><p>注意有引号和无引号共存时候：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">content: &quot;Foo &quot; + Bar;  font-family: sans- + &quot;serif&quot;;&#125;</span><br></pre></td></tr></table></figure><p>被编译为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p:before &#123;  content: &quot;Foo Bar&quot;;  font-family: sans-serif; &#125;</span><br></pre></td></tr></table></figure><p>#{} 形式的表达式可以被用来在字符串中添加动态值</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">content: &quot;I ate #&#123;5 + 10&#125; pies!&quot;;</span><br></pre></td></tr></table></figure><p>空值会被视作空字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$value: null;p:before &#123;  content: &quot;I ate #&#123;$value&#125; pies!&quot;;&#125;</span><br></pre></td></tr></table></figure><h4 id="布尔运算"><a href="#布尔运算" class="headerlink" title="布尔运算"></a>布尔运算</h4><p> <code>and</code>、<code>or</code> 和 <code>not</code> 运算</p><p><strong>圆括号</strong></p><p>//改变运算顺序</p><p><strong>函数</strong></p><p>SassScript 定义了一些有用的函数， 这些函数可以像普通 CSS 函数语法一样被调用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;  <span class="attribute">color</span>: <span class="built_in">hsl</span>(0, 100%, 50%);&#125;</span><br></pre></td></tr></table></figure><p>被编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;  <span class="attribute">color</span>: <span class="number">#ff0000</span>; &#125;</span><br></pre></td></tr></table></figure><h3 id="插值："><a href="#插值：" class="headerlink" title="插值： #{}"></a>插值： <code>#{}</code></h3><p>选择器 &amp; 属性：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$name</span>: foo;</span><br><span class="line"><span class="variable">$attr</span>: border;</span><br><span class="line"><span class="selector-tag">p</span>.#&#123;<span class="variable">$name</span>&#125; &#123;  </span><br><span class="line">  #&#123;<span class="variable">$attr</span>&#125;-<span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性值：</p><p>可以使用<code>#{}</code>将SassScript放入属性值。</p><p>使用<code>#{}</code>意味着它附近的任何操作都将被视为纯CSS。例如：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;  </span><br><span class="line">  <span class="variable">$font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="variable">$line-height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">font</span>: #&#123;<span class="variable">$font-size</span>&#125;/#&#123;<span class="variable">$line-height</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>被编译为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p &#123;  font: 12px/30px; &#125;</span><br></pre></td></tr></table></figure><h3 id="变量默认值：-default"><a href="#变量默认值：-default" class="headerlink" title="变量默认值： !default"></a>变量默认值： <code>!default</code></h3><p>栗子：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$content</span>: <span class="string">"First content"</span>;</span><br><span class="line"><span class="variable">$content</span>: <span class="string">"Second content?"</span> !default;</span><br><span class="line"><span class="variable">$new_content</span>: <span class="string">"First time reference"</span> !default;</span><br><span class="line"><span class="selector-id">#main</span> &#123;  </span><br><span class="line">  <span class="attribute">content</span>: <span class="variable">$content</span>;</span><br><span class="line">  new-<span class="attribute">content</span>: <span class="variable">$new_content</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>被编译为：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span> &#123; </span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"First content"</span>;</span><br><span class="line">  new-<span class="attribute">content</span>: <span class="string">"First time reference"</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：变量的值如果是 <code>null</code> 的话，会被 !default 当做没有值。</p><h2 id="规则和指令"><a href="#规则和指令" class="headerlink" title="@ 规则和指令"></a><code>@</code> 规则和指令</h2><p>Sass 支持所有 CSS3 的 <code>@</code> 规则， 以及一些 Sass 专属的规则，也被称为“指令（directives）”。</p><p><strong>@import</strong></p><p>css @import </p><p>– &lt;url(url)/url&gt;&lt;媒体查询列表 – true则引入&gt;</p><p>url(url)/url要注意：</p><p>url(url)</p><p>@import url(“<a href="http://xxx&quot;" target="_blank" rel="noopener">http://xxx&quot;</a>) ;&amp; @import url(<a href="http://xxx);有无引号都行，" target="_blank" rel="noopener">http://xxx);有无引号都行，</a></p><p>但@import “<a href="http://xxx&quot;;必须要引号" target="_blank" rel="noopener">http://xxx&quot;;必须要引号</a></p><p>注意：分号必须有。</p><p>扩展：能够引入 SCSS 和 Sass 文件。 所有引入的 SCSS 和 Sass 文件都会被合并并输出一个单一的 CSS 文件，另外，被导入的文件中所定义的变量或 <a href="http://sass.bootcss.com/docs/sass-reference/#mixins" target="_blank" rel="noopener">mixins</a> 都可以在主文件中使用。</p><p>在下列几种情况会被编译为css的@Import规则：</p><ul><li>如果文件的扩展名是 <code>.css</code>。</li><li>I如果文件名以 <code>http://</code> 开头。</li><li>如果文件名是 <code>url()</code>。</li><li>如果 <code>@import</code> 包含了任何媒体查询（media queries）。</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"foo.css"</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">"foo"</span> screen;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">"http://foo.com/bar"</span>;</span><br><span class="line">@<span class="keyword">import</span> url(foo);</span><br></pre></td></tr></table></figure><p>将被编译为：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"foo.css"</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">"foo"</span> screen;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">"http://foo.com/bar"</span>;</span><br><span class="line">@<span class="keyword">import</span> url(foo);</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import &quot;foo.scss&quot;;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import &quot;foo&quot;;</span><br></pre></td></tr></table></figure><p>则会引入foo.scss文件。</p><p><strong>引入多个文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import &quot;rounded-corners&quot;, &quot;text-shadow&quot;;</span><br></pre></td></tr></table></figure><p>导入可能包含<code>#{}</code>插值 ，只适用于<code>url()</code>：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$family</span>: unquote(<span class="string">"Droid+Sans"</span>);</span><br><span class="line">@<span class="keyword">import</span> url(<span class="string">"http://fonts.googleapis.com/css?family=#&#123;$family&#125;"</span>);</span><br></pre></td></tr></table></figure><p>会编译到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import url(&quot;http://fonts.googleapis.com/css?family=Droid+Sans&quot;);</span><br></pre></td></tr></table></figure><p><strong>片段</strong>：</p><p>如果你有一个 SCSS 或 Sass 文件需要引入， 但是你又不希望它被编译为一个 CSS 文件：</p><p>可以在文件名前面加一个下划线，就能避免被编译。 这将告诉 Sass 不要把它编译成 CSS 文件。 然后，你就可以像往常一样引入这个文件了，而且还可以省略掉文件名前面的下划线。</p><p>例如：</p><p>你有一个文件叫做 <code>_colors.scss</code>。 这样就不会生成 <code>_colors.css</code> 文件了， 而且你还可以这样做</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import &quot;colors&quot;;</span><br></pre></td></tr></table></figure><p>注意：同一个目录不能同时存在带下划线和不带下划线的同名文件。</p><h4 id="嵌套-import"><a href="#嵌套-import" class="headerlink" title="嵌套 @import"></a>嵌套 <code>@import</code></h4><h3 id="media"><a href="#media" class="headerlink" title="@media"></a><code>@media</code></h3><p><code>@media</code>Sass中的指令就像在纯CSS中一样，具有一个额外的功能：它们可以嵌套在CSS规则中。</p><p><code>@media</code> directive appears within a CSS rule, it will be bubbled up to the top level of the stylesheet, putting all the selectors on the way inside the rule.</p><p>@media 指令会冒泡到stylesheets的顶层，将路上出现的所有选择器放到@media。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sidebar</span> &#123;  </span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  @<span class="keyword">media</span> screen and (orientation: landscape) &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>被编译为：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sidebar</span> &#123; </span><br><span class="line">   <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line"> &#125; </span><br><span class="line"> @<span class="keyword">media</span> screen and (orientation: landscape) &#123;    </span><br><span class="line">   <span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">     <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">   &#125; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>彼此嵌套</strong> – 然后使用<code>and</code>运算符组合查询</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen &#123;  </span><br><span class="line">  <span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">    @<span class="keyword">media</span> (orientation: landscape) &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>被编译为：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (orientation: landscape) &#123; </span><br><span class="line">  <span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@media</code>查询可以包含SassScript表达式（包括变量，函数和运算符）来代替要素名称和要素值。例如：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$media</span>: screen;</span><br><span class="line"><span class="variable">$feature</span>: -webkit-min-device-pixel-ratio;</span><br><span class="line"><span class="variable">$value</span>: <span class="number">1.5</span>;</span><br><span class="line">  @<span class="keyword">media</span> #&#123;<span class="variable">$media</span>&#125; and (<span class="variable">$feature</span>: <span class="variable">$value</span>) &#123;  </span><br><span class="line">   .sidebar &#123;</span><br><span class="line">      width: <span class="number">500px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>被编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (-webkit-min-device-pixel-ratio: <span class="number">1.5</span>) &#123;     <span class="selector-class">.sidebar</span> &#123;   </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="extend"><a href="#extend" class="headerlink" title="@extend"></a><code>@extend</code></h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.error</span> &#123;  </span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  @<span class="keyword">extend</span> .error;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>被编译为：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.error</span>, <span class="selector-class">.seriousError</span> &#123;  </span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>黑客攻击脚本：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.error</span><span class="selector-class">.intrusion</span> &#123; </span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">"/image/hacked.png"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then <code>&lt;div class=&quot;seriousError intrusion&quot;&gt;</code> will have the <code>hacked.png</code> background image as well.</p><p>原理：</p><p><code>@extend</code> works by inserting the extending selector (e.g. <code>.seriousError</code>) anywhere in the stylesheet that the extended selector (.e.g <code>.error</code>) appears. </p><p>会把在stylesheets中任何需要扩展的选择器(e.g. <code>.seriousError</code>)的地方插入<code>@extend</code>的选择器</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.error</span> &#123; </span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.error</span><span class="selector-class">.intrusion</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">"/image/hacked.png"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;  </span><br><span class="line">  @<span class="keyword">extend</span> .error;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>被编译为：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.error</span>, </span><br><span class="line"><span class="selector-class">.seriousError</span> &#123; </span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.error</span><span class="selector-class">.intrusion</span>,</span><br><span class="line"><span class="selector-class">.seriousError</span><span class="selector-class">.intrusion</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">"/image/hacked.png"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seriousError</span> &#123; </span><br><span class="line"><span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个选择器可以扩展多个选择器：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.error</span> &#123; </span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.attention</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">3em</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ff0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;  </span><br><span class="line">  @<span class="keyword">extend</span> .error;</span><br><span class="line">  @<span class="keyword">extend</span> .attention;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Extending-Complex-Selectors"><a href="#Extending-Complex-Selectors" class="headerlink" title="Extending Complex Selectors"></a>Extending Complex Selectors</h4><p>不只只是class，包括任何单个元素（such as <code>.special.cool</code>, <code>a:hover</code>, or <code>a.user[href^=&quot;http://&quot;]</code>）：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.hoverlink</span> &#123;  </span><br><span class="line">  @<span class="keyword">extend</span> a:hover; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span>:hover &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>被编译为：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>:hover,</span><br><span class="line"><span class="selector-class">.hoverlink</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>只能扩展单个元素</strong>，such as <code>.foo .bar</code> or <code>.foo + .bar</code>不能<code>@extend</code>，但是可以通过如下方式实现：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#fake-links</span> <span class="selector-class">.link</span> &#123; </span><br><span class="line">  @<span class="keyword">extend</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>is compiled to</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-id">#fake-links</span> <span class="selector-class">.link</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-tag">a</span>:hover,</span><br><span class="line"><span class="selector-id">#fake-links</span> <span class="selector-class">.link</span>:hover &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>链式扩展：</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.error</span> &#123; </span><br><span class="line">   <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">   <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">   @<span class="keyword">extend</span> .error;</span><br><span class="line">   <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.criticalError</span> &#123;  </span><br><span class="line">   @<span class="keyword">extend</span> .seriousError;</span><br><span class="line">   <span class="attribute">position</span>: fixed;</span><br><span class="line">   <span class="attribute">top</span>: <span class="number">10%</span>;</span><br><span class="line">   <span class="attribute">bottom</span>: <span class="number">10%</span>;</span><br><span class="line">   <span class="attribute">left</span>: <span class="number">10%</span>;</span><br><span class="line">   <span class="attribute">right</span>: <span class="number">10%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>被编译为：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.error</span>, </span><br><span class="line"><span class="selector-class">.seriousError</span>,</span><br><span class="line"><span class="selector-class">.criticalError</span> &#123;</span><br><span class="line">   <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">   <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seriousError</span>,</span><br><span class="line"><span class="selector-class">.criticalError</span> &#123;  </span><br><span class="line">   <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.criticalError</span> &#123;</span><br><span class="line">   <span class="attribute">position</span>: fixed;</span><br><span class="line">   <span class="attribute">top</span>: <span class="number">10%</span>;</span><br><span class="line">   <span class="attribute">bottom</span>: <span class="number">10%</span>;</span><br><span class="line">   <span class="attribute">left</span>: <span class="number">10%</span>;</span><br><span class="line">   <span class="attribute">right</span>: <span class="number">10%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基础语法：&quot;&gt;&lt;a href=&quot;#基础语法：&quot; class=&quot;headerlink&quot; title=&quot;基础语法：&quot;&gt;&lt;/a&gt;基础语法：&lt;/h2&gt;&lt;h3 id=&quot;引用父选择符：-amp&quot;&gt;&lt;a href=&quot;#引用父选择符：-amp&quot; class=&quot;headerlink
      
    
    </summary>
    
    
    
      <category term="sass" scheme="http://yoursite.com/tags/sass/"/>
    
  </entry>
  
  <entry>
    <title>react中的数据管理</title>
    <link href="http://yoursite.com/2019/09/07/react%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2019/09/07/react中的数据管理/</id>
    <published>2019-09-07T14:06:33.000Z</published>
    <updated>2019-09-09T10:49:48.736Z</updated>
    
    <content type="html"><![CDATA[<p>写这篇博客是为了记录一下学习react过程中引发的对于数据管理的思考。想成为一个合格的React开发者，理解它的数据管理是深入学习它的设计理念的重要一步，对于我来说还有很长的路要走。</p><blockquote><p>显然没有人会直接在react中操作DOM。</p></blockquote><h2 id="（1）基于state（状态）和props（属性）的数据管理"><a href="#（1）基于state（状态）和props（属性）的数据管理" class="headerlink" title="（1）基于state（状态）和props（属性）的数据管理**"></a>（1）基于state（状态）和props（属性）的数据管理**</h2><p>  这是原生React中数据管理的两个关键词。  </p><p>  先说一下我对state和props的理解：</p><p>  React</p><p>  原生React中的组件分四个不同的场景讨论：</p><h3 id="组件内部的数据传输"><a href="#组件内部的数据传输" class="headerlink" title="组件内部的数据传输"></a>组件内部的数据传输</h3><blockquote><p>React refs属性</p></blockquote><p>一个应用场景：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">Component</span>(</span>&#123;</span><br><span class="line"></span><br><span class="line">  handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 使用原生的 DOM API 获取焦点</span></span><br><span class="line">   <span class="keyword">this</span>.refs.myInput.focus();</span><br><span class="line">  &#125;,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//  当组件插入到 DOM 后，ref 属性添加一个组件的引用于到 this.refs</span></span><br><span class="line">   <span class="keyword">return</span> (</span><br><span class="line">     &lt;div&gt;</span><br><span class="line">       &lt;input type=<span class="string">"text"</span> ref=<span class="string">"myInput"</span> /&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        type=<span class="string">"button"</span></span><br><span class="line">        value=<span class="string">"点我输入框获取焦点"</span></span><br><span class="line">        onClick=&#123;<span class="keyword">this</span>.handleClick&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">     &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;MyComponent /</span>&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>需求是点击第二个input使第一个input获得焦点，这个时候我们就不得不操作DOM了，那么我们如何在MyComponent这个组件里面获取到第一个input的DOM对象呢？</p><p>refs属性帮我们解决了这个问题。</p><blockquote><p>另一种内部传递数据的方式为表单事件。</p></blockquote><p>react的表单元素和HTMl中的表单元素不同。HTML中的表单元素内容取决于用户输入；React中我们可以把form表单写成受控组件。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameForm</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">   <span class="keyword">super</span>(props);</span><br><span class="line">   <span class="keyword">this</span>.state = &#123;<span class="attr">value</span>: <span class="string">''</span>&#125;;</span><br><span class="line">  /...this.bind(<span class="keyword">this</span>)...省略/</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleChange(event) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">value</span>: event.target.value&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleSubmit(event) &#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.state.value);</span><br><span class="line">   event.preventDefault();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  render() &#123;</span><br><span class="line">   <span class="keyword">return</span> (</span><br><span class="line">     &lt;form onSubmit=&#123;<span class="keyword">this</span>.handleSubmit&#125;&gt;</span><br><span class="line">      &lt;label&gt;</span><br><span class="line">        Name:</span><br><span class="line">         &lt;input type=<span class="string">"text"</span> </span><br><span class="line">            value=&#123;<span class="keyword">this</span>.state.value&#125; </span><br><span class="line">            onChange=&#123;<span class="keyword">this</span>.handleChange&#125; </span><br><span class="line">          /&gt;</span><br><span class="line">         &lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">         &lt;input type="submit" value="Submit" /</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">      );</span></span><br><span class="line"><span class="regexp">   &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>Note: Because its value is read-only, it is an uncontrolled component in React. </p></blockquote><h3 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h3><p>props实现</p><h3 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h3><p>回调函数实现</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="comment">//子组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"> render()&#123;</span><br><span class="line">       <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          请输入邮箱：&lt;input onChange=&#123;<span class="keyword">this</span>.props.handleEmail&#125;/&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;      </span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/父组件，此处通过event.target.value获取子组件的值</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class Parent extends Component&#123;</span></span><br><span class="line"><span class="regexp">    constructor(props)&#123;</span></span><br><span class="line"><span class="regexp">      super(props);</span></span><br><span class="line"><span class="regexp">       this.state = &#123;</span></span><br><span class="line"><span class="regexp">          email:''</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">   handleEmail = (event) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">        this.setState(&#123;email: event.target.value&#125;);</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">    render()&#123;</span></span><br><span class="line"><span class="regexp">       return (</span></span><br><span class="line"><span class="regexp">        &lt;div&gt;</span></span><br><span class="line"><span class="regexp">          &lt;div&gt;用户邮箱：&#123;this.state.email&#125;&lt;/</span>div&gt;</span><br><span class="line">          &lt;Child name=<span class="string">"email"</span> handleEmail=&#123;<span class="keyword">this</span>.handleEmail&#125;/&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Parent;</span></span><br></pre></td></tr></table></figure><h3 id="兄弟组件之间"><a href="#兄弟组件之间" class="headerlink" title="兄弟组件之间"></a>兄弟组件之间</h3><blockquote><p>两个组件同属于一个父组件，且不是父子关系</p></blockquote><p>如某个特殊的应用场景需要将数据挂载在父组件中，由两个组件共享：</p><p>如果组件需要数据渲染，则由父组件通过props传递给该组件；如果组件需要改变数据，则父组件传递一个改变数据的回调函数给该组件，并在对应事件中调用。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="comment">//子组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   render()&#123;</span><br><span class="line">       <span class="keyword">return</span> (</span><br><span class="line">          &lt;div&gt;</span><br><span class="line">         我是子组件邮箱：</span><br><span class="line">            &lt;input </span><br><span class="line">              onChange=&#123;<span class="keyword">this</span>.props.handleEmail&#125;                        defaultValue=&#123;<span class="keyword">this</span>.props.value&#125; </span><br><span class="line">             /&gt;</span><br><span class="line">           &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">       )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/兄弟组件</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class ChildBrother extends Component &#123;</span></span><br><span class="line"><span class="regexp">    render()&#123;</span></span><br><span class="line"><span class="regexp">        return (</span></span><br><span class="line"><span class="regexp">           &lt;div&gt;</span></span><br><span class="line"><span class="regexp">            我是兄弟组件:</span></span><br><span class="line"><span class="regexp">            &#123;this.props.value&#125;</span></span><br><span class="line"><span class="regexp">           &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//父组件，此处通过event.target.value获取子组件的值</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">       <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            email:<span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    handleEmail = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;<span class="attr">email</span>: event.target.value&#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">         &lt;div&gt;</span><br><span class="line">           &lt;div&gt;我是父组件邮箱：&#123;<span class="keyword">this</span>.state.email&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;Child handleEmail=&#123;this.handleEmail&#125; value=&#123;this.state.email&#125;/</span>&gt;</span><br><span class="line"></span><br><span class="line">            &lt;ChildBrother value=&#123;<span class="keyword">this</span>.state.email&#125;/&gt;</span><br><span class="line">          &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">       );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default Parent;</span></span><br></pre></td></tr></table></figure><p>child组件的值改变后存储在父组件的state中，然后通过props传递给childBrother。</p><h2 id="（2）基于redux的数据管理"><a href="#（2）基于redux的数据管理" class="headerlink" title="（2）基于redux的数据管理"></a>（2）基于redux的数据管理</h2><p><img src="https://raw.githubusercontent.com/thinkerHope/thinkerHope.github.io/master/2019/09/07/react%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/reudx.png" alt="redux"></p><p>Reducer的作用：</p><p>当state没有的时候，返回initalState,有的时候根据action来状态变化,这里注意它是一个纯函数，也就是它不改变传入的state。</p><p>Store中的基本配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware, compose &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./reducer'</span>;</span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> composeEnhancers = <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;</span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;写这篇博客是为了记录一下学习react过程中引发的对于数据管理的思考。想成为一个合格的React开发者，理解它的数据管理是深入学习它的设计理念的重要一步，对于我来说还有很长的路要走。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;显然没有人会直接在react中操作DOM。&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
      <category term="数据管理" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>域名与IP地址的联系与区别</title>
    <link href="http://yoursite.com/2019/08/19/%E5%9F%9F%E5%90%8D%E4%B8%8EIP%E5%9C%B0%E5%9D%80%E7%9A%84%E8%81%94%E7%B3%BB%E5%92%8C%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2019/08/19/域名与IP地址的联系和区别/</id>
    <published>2019-08-19T14:49:52.000Z</published>
    <updated>2019-09-07T14:14:34.824Z</updated>
    
    <content type="html"><![CDATA[<p>我们也知道每一台机都有一个唯一ip地址，</p><p>特别难记，所以出现了今天的DNS(域名)</p><p>当我们的计算机想要和一个远程机器连接时，我们可以申请连接该机器ip地址下的DNS，例如：<a href="http://www.baidu.com。" target="_blank" rel="noopener">www.baidu.com。</a></p><p>连接的时候，DNS会提供一个ip地址，供服务器去找寻</p><p>所以，当我们在网址中输入：<a href="http://www.baidu.com，会获取到百度ip，并跳转页面" target="_blank" rel="noopener">www.baidu.com，会获取到百度ip，并跳转页面</a> </p><p>1.比如说：我们现在在”陕西省西安市大雁塔喷泉旁”，那么这个”陕西省西安市大雁塔喷泉旁”就是一个域名，而具体的这个唯一的地方（陕西省西安市大雁塔喷泉旁）就是一个IP地址，它是网络层地址，用来识别TCP/IP网络中互联的主机和路由器。（推荐一本书《图解TCP/IP》）</p><p>2.域名是相对于网站来说的，ip地址是相对于网络来说的，准确的说是通过dns服务器来完成的，你提交域名，他给你返回一个ip地址，也称之为域名解析），接着做出一个相应，将信息返回。</p><p>也就是：输入域名—-域名解析服务器（dns）解析成ip地址—访问IP地址—完成访问的内容—返回信息</p><p>3.表示方法也不一样：域名是www.<strong><em>.</em></strong>(如.com .top .win……)</p><p>​                                     IPv4地址是：32位二进制（分割成4个8位的点分十进制数）</p><p>4.映射关系不同</p><p>   internet上的ip地址是唯一的，一个IP地址对应一个计算机</p><p>   一个域名对应一个ip地址或好多个IP地址：比如百度的ip（119.75.218.70）（119.75.217.109）</p><p>  一台计算机上面可以有好多个服务，也就是一个ip地址对应了好多个域名</p><p>转载地址：<a href="https://blog.csdn.net/zhangliangzi/article/details/50617374" target="_blank" rel="noopener">https://blog.csdn.net/zhangliangzi/article/details/50617374</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们也知道每一台机都有一个唯一ip地址，&lt;/p&gt;
&lt;p&gt;特别难记，所以出现了今天的DNS(域名)&lt;/p&gt;
&lt;p&gt;当我们的计算机想要和一个远程机器连接时，我们可以申请连接该机器ip地址下的DNS，例如：&lt;a href=&quot;http://www.baidu.com。&quot; targe
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Ubuntu环境安装WebStorm</title>
    <link href="http://yoursite.com/2019/08/19/Ubuntu%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85WebStorm/"/>
    <id>http://yoursite.com/2019/08/19/Ubuntu环境安装WebStorm/</id>
    <published>2019-08-19T01:59:24.000Z</published>
    <updated>2019-09-07T14:14:26.344Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装:"></a>安装:</h3><ol><li>环境依赖：webstorm基于java,需要安装JDK</li><li>下载：<a href="https://www.jetbrains.com/webstorm/download/" target="_blank" rel="noopener">https://www.jetbrains.com/webstorm/download/</a> </li><li>解压：<code>$ sudo tar xfz ~/Downloads/WebStorm-16.2.3.tar.gz</code> </li><li><code>$ sudo mv ~/Downloads/WebStorm-162.2228.20 /opt/</code> </li><li><code>$ cd /opt/WebStorm-162.2228.20/bin/</code></li><li>启动：<code>$ sudo sh webstorm.sh</code> </li></ol><h3 id="激活："><a href="#激活：" class="headerlink" title="激活："></a>激活：</h3><p>获取注册码：<a href="http://idea.lanyus.com/" target="_blank" rel="noopener">http://idea.lanyus.com/</a></p><p>激活前在hosts中加上  <code>0.0.0.0 account.jetbrains.com</code></p><p>注意：ubuntu 和 Windows不一样，linux不用屏蔽0.0.0.0 account.jetbrains.com，所以最重要的一点就是把host文件里面的 0.0.0.0 account.jetbrains.com 屏蔽去掉！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/hosts</span><br><span class="line">i</span><br><span class="line">0.0.0.0 account.jetbrains.com</span><br><span class="line">ESC退出编辑模式</span><br><span class="line">输入命令:wq退出</span><br></pre></td></tr></table></figure><h3 id="创建快捷方式："><a href="#创建快捷方式：" class="headerlink" title="创建快捷方式："></a>创建快捷方式：</h3><p>在<code>/usr/share/applications</code>中创建<code>webstorm.desktop</code>文件，把下面内如拷贝进去，并保存。<br> 注意：需要把 <code>[/home/pc/Work/WebStorm-183.5429.34]</code> 换成你自己的路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Name = WebStorm</span><br><span class="line">Comment= WebStorm</span><br><span class="line">Exec=/home/pc/Work/WebStorm-183.5429.34/bin/webstorm.sh</span><br><span class="line">Icon=/home/pc/Work/WebStorm-183.5429.34/bin/webstorm.png</span><br><span class="line">Terminal=false</span><br><span class="line">Type=Application</span><br></pre></td></tr></table></figure><p>注意：需要在命令行中创建<code>webstorm.desktop</code>，具体如下：</p><p><code>$ cd  /usr/share/applications</code>   (不要忘记usr前面的/)</p><p><code>$ touch webstorm.desktop</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装:&quot;&gt;&lt;/a&gt;安装:&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;环境依赖：webstorm基于java,需要安装JDK&lt;/li&gt;
&lt;li&gt;下载：&lt;a href=&quot;https://www.j
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
