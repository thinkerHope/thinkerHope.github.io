<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>记录我的点滴</title>
  
  <subtitle>Yu Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-21T12:19:31.941Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>boygreen_Yu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>函数toString的妙用(字节跳动二面)</title>
    <link href="http://yoursite.com/2019/11/21/%E5%87%BD%E6%95%B0toString%E7%9A%84%E5%A6%99%E7%94%A8/"/>
    <id>http://yoursite.com/2019/11/21/函数toString的妙用/</id>
    <published>2019-11-21T11:34:21.000Z</published>
    <updated>2019-11-21T12:19:31.941Z</updated>
    
    <content type="html"><![CDATA[<p>字节跳动（今日头条）二面出的一道题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">sum(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>)(<span class="number">5</span>)</span><br><span class="line"><span class="comment">// 要求输出一致</span></span><br></pre></td></tr></table></figure><p>我感觉就是问一个闭包而已</p><p>我的答案(…好吧，不是现场给的)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> arg1 = <span class="built_in">Number</span>(<span class="built_in">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">  <span class="comment">// if (!arg1) return 0;</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [].slice.call(<span class="built_in">arguments</span>).reduce(<span class="function">(<span class="params">prev, next</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> prev + next;</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> arg1 + sum(<span class="built_in">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尼玛…毫无疑问，二面懵逼的挂了。</p><p>这什么鬼逻辑才想出这样…递归的后面返回是个函数，还用加法…白给</p><p>把代码改成下面这样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> sum = <span class="built_in">arguments</span>[<span class="number">0</span>] ? <span class="built_in">Number</span>(<span class="built_in">arguments</span>[<span class="number">0</span>]) : <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> tempFunc = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    sum += num;</span><br><span class="line">    <span class="built_in">console</span>.log(sum)</span><br><span class="line">    <span class="keyword">return</span> tempFunc;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [].slice.call(<span class="built_in">arguments</span>).reduce(<span class="function">(<span class="params">prev, next</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> prev + next;</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> a = tempFunc(<span class="built_in">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">      <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>)(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><p>会发现最后输出了一个函数，这时候<code>toString()</code>就派上用场了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重写tempFunc的toString</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> sum = <span class="built_in">arguments</span>[<span class="number">0</span>] ? <span class="built_in">Number</span>(<span class="built_in">arguments</span>[<span class="number">0</span>]) : <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> tempFunc = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    sum += num;</span><br><span class="line">    <span class="built_in">console</span>.log(sum)</span><br><span class="line">    <span class="keyword">return</span> tempFunc;</span><br><span class="line">  &#125;</span><br><span class="line">  tempFunc.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [].slice.call(<span class="built_in">arguments</span>).reduce(<span class="function">(<span class="params">prev, next</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> prev + next;</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 注意这里的一个小细节，卡了我好久</span></span><br><span class="line">      <span class="comment">// 我直接写成tempFunc(arguments[0])了，要return a，不然add(1)(2)是undefined</span></span><br><span class="line">      <span class="keyword">const</span> a = tempFunc(<span class="built_in">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">      <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把最后结果返回就可以了，不过这也是为了应付面试而已…肯定有更优解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;字节跳动（今日头条）二面出的一道题&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2
      
    
    </summary>
    
    
    
      <category term="-面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>观察者模式和Promise原理</title>
    <link href="http://yoursite.com/2019/11/18/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E5%92%8CPromise%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2019/11/18/观察者模式和Promise原理/</id>
    <published>2019-11-18T15:33:17.000Z</published>
    <updated>2019-11-18T15:33:17.707Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>前端性能优化</title>
    <link href="http://yoursite.com/2019/11/12/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2019/11/12/前端性能优化/</id>
    <published>2019-11-12T13:27:52.000Z</published>
    <updated>2019-11-12T13:27:52.378Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>实现将emoji表情插入到textarea指定位置</title>
    <link href="http://yoursite.com/2019/11/11/%E5%AE%9E%E7%8E%B0%E5%B0%86emoji%E8%A1%A8%E6%83%85%E6%8F%92%E5%85%A5%E5%88%B0textarea%E6%8C%87%E5%AE%9A%E4%BD%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2019/11/11/实现将emoji表情插入到textarea指定位置/</id>
    <published>2019-11-11T04:49:18.000Z</published>
    <updated>2019-11-11T04:49:18.957Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>实现下拉加载更多</title>
    <link href="http://yoursite.com/2019/11/09/%E5%AE%9E%E7%8E%B0%E4%B8%8B%E6%8B%89%E5%8A%A0%E8%BD%BD%E6%9B%B4%E5%A4%9A/"/>
    <id>http://yoursite.com/2019/11/09/实现下拉加载更多/</id>
    <published>2019-11-09T02:27:27.000Z</published>
    <updated>2019-11-09T02:37:46.186Z</updated>
    
    <content type="html"><![CDATA[<p>每个HTML元素都具有<code>clientHeight</code> <code>offsetHeight</code> <code>scrollHeight</code> <code>offsetTop</code> <code>scrollTop</code> 这5个和元素高度、滚动、位置相关的属性。单位都是<code>px</code>，只读元素。</p><ul><li><code>clientHeight</code>：包括<code>padding</code>但不包括<code>border</code>、水平滚动条、<code>margin</code>的元素的高度。对于<code>inline</code>的元素这个属性一直是0。</li><li><code>offsetHeight</code>：包括<code>padding</code>、<code>border</code>、水平滚动条，但不包括<code>margin</code>的元素的高度。对于<code>inline</code>的元素这个属性一直是0。</li><li><code>scrollHeight</code>：包括滚动出去部分的高度。</li><li><code>scrollTop</code>：滚动出去部分的高度。</li><li><code>offsetTop</code>：当前元素顶部距离最近父元素顶部的距离,和有没有滚动条没有关系。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;每个HTML元素都具有&lt;code&gt;clientHeight&lt;/code&gt; &lt;code&gt;offsetHeight&lt;/code&gt; &lt;code&gt;scrollHeight&lt;/code&gt; &lt;code&gt;offsetTop&lt;/code&gt; &lt;code&gt;scrollTop&lt;/code&gt; 这5
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>你真的理解call和apply吗</title>
    <link href="http://yoursite.com/2019/11/08/%E4%BD%A0%E7%9C%9F%E7%9A%84%E7%90%86%E8%A7%A3call%E5%92%8Capply%E5%90%97/"/>
    <id>http://yoursite.com/2019/11/08/你真的理解call和apply吗/</id>
    <published>2019-11-08T11:37:37.000Z</published>
    <updated>2019-11-18T06:57:35.354Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>重新认识了一下函数</p></blockquote><h2 id="函数的三种角色"><a href="#函数的三种角色" class="headerlink" title="函数的三种角色"></a>函数的三种角色</h2><p><strong>一些函数作为对象的属性</strong></p><ul><li><code>length</code>：形参的个数；</li><li><code>name</code>：函数名；</li><li><code>prototype</code>：类的原型，在原型上定义的方法都是当前这个类的实例的公有方法；</li><li><code>__proto__</code>：把函数当做一个普通对象，指向Function这个类的原型</li></ul><p><strong>函数的角色</strong></p><ul><li><strong>普通函数</strong>。它本身是一个普通的函数，执行的时候会形成私有的作用域，然后进行形参赋值、预解析、代码执行、执行完成后内存销毁；</li><li><strong>类</strong>。有自己的实例，也有一个叫做<code>prototype</code>的属性是自己的原型，它的实例都可以指向自己的原型；</li><li><strong>普通对象</strong>。它作为对象可以有一些自己的私有属性，也可以通过<code>__proto__</code>找到<code>Function.prototype</code>；</li></ul><p><img src="https://thinkerhope.github.io/2019/11/08/%E4%BD%A0%E7%9C%9F%E7%9A%84%E7%90%86%E8%A7%A3call%E5%92%8Capply%E5%90%97/2555024-95309047f0e9f13d.png" alt></p><h2 id="call方法原理"><a href="#call方法原理" class="headerlink" title="call方法原理"></a><code>call</code>方法原理</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 允许传null</span></span><br><span class="line">    <span class="keyword">let</span> context = context || <span class="built_in">window</span>;</span><br><span class="line">    context.fn = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">// 重新执行这个函数</span></span><br><span class="line">    <span class="keyword">let</span> args = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">        args.push(<span class="string">"arguments["</span> + i + <span class="string">"]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 函数是可以有返回值的</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">""</span>,  <span class="string">`<span class="subst">$&#123; <span class="string">"context.fn("</span> + args + <span class="string">")"</span> &#125;</span>`</span>)();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">delete</span> context.fn;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line">fn.myCall(obj); <span class="comment">// fn作为普通对象, 所以myCall中的this为fn函数本身</span></span><br><span class="line">sum.myCall(obj);</span><br></pre></td></tr></table></figure><p>一个经典栗子（需要深入理解<code>call</code>原理和原型链）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn1.call(fn2); <span class="comment">// 1</span></span><br><span class="line">fn1.call.call(fn2); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>第二个输出有了前面的基础就很好理解了。前面了解到函数可以作为普通对象，然后有原型链搜索这一过程。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fn2 &#123;</span><br><span class="line">fn: fn1.call</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二次的<code>call</code>将<code>fn1.call</code>这个函数的<code>this</code>绑定到<code>fn2</code>上(将<code>fn2</code>作为普通对象)，再将<code>fn1.call</code>重新执行，此时，<code>fn1.call</code>函数里面的this就指向了<code>fn2</code>这个对象了，所以不是重新执行<code>fn1()</code>，而是重新执行<code>fn2()</code>。</p><p><strong>思考</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>) || [].slice.call(<span class="built_in">arguments</span>)</span><br></pre></td></tr></table></figure><p>这个方法用于将类数组对象转化为数组。</p><p><strong>call、apply、bind的区别</strong></p><p><code>call</code>和<code>apply</code>基本一样，就是传递参数形式不一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num1 + num2);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn.call(obj , <span class="number">100</span> , <span class="number">200</span>);</span><br><span class="line">fn.apply(obj , [<span class="number">100</span>, <span class="number">200</span>]);</span><br></pre></td></tr></table></figure><p><code>bind</code>有点不一样，它会返回函数，而不是立即执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var tempFn = fn.bind(obj, 1, 2);</span><br><span class="line">tempFn();</span><br></pre></td></tr></table></figure><p>补充一下<code>ES5</code>的严格模式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span> -- 严格模式</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn.call(); <span class="comment">// 普通模式下this是window，在严格模式下this是undefined</span></span><br><span class="line">fn.call(<span class="literal">null</span>); <span class="comment">// 普通模式下this是window，在严格模式下this是null</span></span><br><span class="line">fn.call(<span class="literal">undefined</span>); <span class="comment">// 普通模式下this是window，在严格模式下this是undefined</span></span><br></pre></td></tr></table></figure><p><code>apply</code>和<code>call</code>的实现基本一样，就是处理arguments不一样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">arguments</span>[<span class="number">1</span>]) &#123;</span><br><span class="line">    result = context.fn(...arguments[<span class="number">1</span>])</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    result = context.fn()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自己实现一个bind"><a href="#自己实现一个bind" class="headerlink" title="自己实现一个bind"></a>自己实现一个bind</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myBind</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">let</span> self=<span class="keyword">this</span>;<span class="comment">//保存原函数</span></span><br><span class="line">    <span class="comment">// 有了前面的基础，就可以理解为什么要[].shift.call(arguments)了</span></span><br><span class="line">    <span class="keyword">let</span> context=[].shift.call(<span class="built_in">arguments</span>);<span class="comment">//保存需要绑定的this上下文</span></span><br><span class="line">    <span class="keyword">let</span> args=[].slice.call(<span class="built_in">arguments</span>);<span class="comment">//将剩余参数转化为数组</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    self.apply(context,[].concat.call(args, [].slice.call(<span class="built_in">arguments</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Function-apply-bind"><a href="#Function-apply-bind" class="headerlink" title="Function.apply.bind"></a><code>Function.apply.bind</code></h2><p>看一个<code>js</code>的高级技巧</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve([<span class="number">10</span>,<span class="number">20</span>]).then(<span class="built_in">Function</span>.apply.bind(<span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(x, y);</span><br><span class="line">&#125;, <span class="literal">null</span>));     <span class="comment">// 10,20</span></span><br></pre></td></tr></table></figure><p>先不管Promise</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(x, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo = <span class="built_in">Function</span>.apply.bind(sum, <span class="literal">null</span>);</span><br><span class="line">foo([<span class="number">10</span>, <span class="number">20</span>]);   <span class="comment">// 10, 20</span></span><br></pre></td></tr></table></figure><p><code>sum.apply(null, [10, 20])</code>很好理解，<code>bind(sum)</code>使<code>Function.apply</code>这个函数里面的this指向了<code>sum</code>这个函数对象，所以<code>Function.apply.bind(sum, null)</code>等价于<code>sum.apply.bind(sum, null)</code>，<code>bind</code>的使命已经完成了。所以就等价于<code>sum.apply</code>。</p><p><strong>Function.bind.apply</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.bind.apply(sum, <span class="literal">null</span>)</span><br></pre></td></tr></table></figure><p>原理一样的。等价于<code>sum.bind(sum, null)</code>，就等价于<code>sum</code></p><p>看起来很简单，其实还是有很多东西的，哈哈，是不是感觉收获颇丰啊，不用谢了啦。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;重新认识了一下函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;函数的三种角色&quot;&gt;&lt;a href=&quot;#函数的三种角色&quot; class=&quot;headerlink&quot; title=&quot;函数的三种角色&quot;&gt;&lt;/a&gt;函数的三种角色&lt;/h2&gt;&lt;p&gt;&lt;stron
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>es6异步编程篇</title>
    <link href="http://yoursite.com/2019/11/06/es6%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E7%AF%87/"/>
    <id>http://yoursite.com/2019/11/06/es6异步编程篇/</id>
    <published>2019-11-06T10:44:26.000Z</published>
    <updated>2019-11-07T15:47:22.648Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Genretor篇"><a href="#Genretor篇" class="headerlink" title="Genretor篇"></a>Genretor篇</h1><h4 id="运用场景"><a href="#运用场景" class="headerlink" title="运用场景"></a>运用场景</h4><p><strong>(1) 一个抽奖的小栗子</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params">count</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 执行一段抽奖逻辑</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`剩余<span class="subst">$&#123;count&#125;</span>次`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行抽奖的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">remain</span>(<span class="params">count</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    count--</span><br><span class="line">    <span class="keyword">yield</span> draw(count)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> startDrawing = remain(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> btn = <span class="built_in">document</span>.createElement(<span class="string">'button'</span>)</span><br><span class="line">btn.id = <span class="string">'start'</span></span><br><span class="line">btn.textContent = <span class="string">'开始抽奖'</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(btn)</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'start'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  startDrawing.next()</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p><strong>(2)长轮询</strong></p><blockquote><p>实现实时把服务器数据更新到客户端</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟一个请求</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">ajax</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 此处用一个定时器来模拟请求数据的耗时，并约定当返回的json中code为0表示有新数据更新</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(&#123;<span class="attr">code</span>: <span class="number">0</span>&#125;)</span><br><span class="line">    &#125;, <span class="number">200</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> promise = ajax().next().value;</span><br><span class="line">  promise.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(res.code !== <span class="number">0</span>) &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"2秒后继续查询..."</span>)</span><br><span class="line">        update();</span><br><span class="line">      &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">update();</span><br></pre></td></tr></table></figure><p><strong>(3) 部署<code>ajax</code>, 实现同步</strong></p><blockquote><p>异步函数的同步表达</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">yield</span> request(<span class="string">"http://some.url"</span>);</span><br><span class="line">  <span class="keyword">let</span> resp = <span class="built_in">JSON</span>.parse(result);</span><br><span class="line">  <span class="built_in">console</span>.log(resp.value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> it = main();</span><br><span class="line">it.next();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  axio(&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    it.next(res.data);    </span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>(4) 部署iterator接口</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o1 = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="number">2</span>,</span><br><span class="line">  c: <span class="number">3</span>,</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]: <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</span><br><span class="line">      <span class="keyword">yield</span> <span class="keyword">this</span>[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自动执行"><a href="#自动执行" class="headerlink" title="自动执行"></a>自动执行</h4><p><strong><code>Thunk</code>函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编译器实现"传名调用"</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">m</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> m * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(x + <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> thunk = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + <span class="number">5</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">thunk</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> thunk() * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>JavaScript</code>的 <code>Thunk</code> 函数</p><blockquote><p>JavaScript采取的是传值调用, thunk函数含义有所不同</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单实现</span></span><br><span class="line"><span class="keyword">const</span> Thunk = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> fn.call(<span class="keyword">this</span>, ...args, callback);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">var</span> readFileThunk = Thunk(fs.readFile);</span><br><span class="line">readFileThunk(fileA)(callback);</span><br></pre></td></tr></table></figure><p>生产环境的Thunk转换器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 安装</span><br><span class="line">$ cnpm install thunkify</span><br></pre></td></tr></table></figure><p><strong>用<code>Thunk</code>实现自动执行</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 栗子</span><br><span class="line">var g = function* ()&#123;</span><br><span class="line">  var f1 = yield readFileThunk(&apos;fileA&apos;);</span><br><span class="line">  var f2 = yield readFileThunk(&apos;fileB&apos;);</span><br><span class="line">  // ...</span><br><span class="line">  var fn = yield readFileThunk(&apos;fileN&apos;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">run(g);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> gen = fn();</span><br><span class="line">  <span class="comment">// next就是异步任务的回调</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = gen.next(data);</span><br><span class="line">    <span class="keyword">if</span> (result.done) <span class="keyword">return</span>;</span><br><span class="line">    result.value(next);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  next();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">g</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run(g);</span><br></pre></td></tr></table></figure><p>初看上面代码会懵逼的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先理解手动执行</span></span><br><span class="line"><span class="keyword">var</span> g = gen();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r1 = g.next();</span><br><span class="line">r1.value(<span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="keyword">var</span> r2 = g.next(data);</span><br><span class="line">  r2.value(<span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    g.next(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="async篇"><a href="#async篇" class="headerlink" title="async篇"></a>async篇</h1><blockquote><p>ES2017标准，Generator 函数的语法糖，自带执行器</p></blockquote><h4 id="运用场景-1"><a href="#运用场景-1" class="headerlink" title="运用场景"></a>运用场景</h4><p>（1）  <strong>一个请求接着一个请求</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 后一个请求依赖前一个请求</span></span><br><span class="line"><span class="comment">// 图片处理完成然后保存在本地</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> base64Data = <span class="keyword">await</span> download(<span class="string">'http://1.jpg'</span>);</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> saveToLocal(base64Data); </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>（2） 并发任务, 但是同步处理结果(处理任务是异步)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> promise1 = convertToBase64Data(<span class="string">"url1"</span>);</span><br><span class="line">  <span class="keyword">const</span> promise2 = convertToBase64Data(<span class="string">"url2"</span>);</span><br><span class="line">  <span class="keyword">const</span> [data1, data2] = <span class="keyword">await</span> <span class="built_in">Promise</span>.all([promise1, promise2]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> saveToLocal(data1);</span><br><span class="line">  <span class="keyword">const</span> result2 = <span class="keyword">await</span> saveToLocal(data2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>（3）多张图片，处理一张保存一张，然后才能处理下一张</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无await, 就自己瞎写</span></span><br><span class="line"><span class="keyword">const</span> imgUrls = [<span class="string">'http://1.jpg'</span>, <span class="string">'http://2.jpg'</span>, <span class="string">'http://3.jpg'</span>, <span class="string">'http://4.jpg'</span>, <span class="string">'http://5.jpg'</span>];</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (result) &#123;</span><br><span class="line">    saveToLocal(result).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(result)    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (i &lt; imgUrls.length) &#123;</span><br><span class="line">    convertToBase64Data(imgUrls[i++]).then(next);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">next();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还是await舒服...</span></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; imgUrls.length; i++) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">await</span> convertToBase64Data(imgUrls[i]);</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> saveToLocal(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>（4）<strong>错误处理</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无await</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn6</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    convertToBase64(<span class="string">'http://1.jpg'</span>).then( <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  </span><br><span class="line">      saveToLocal(data).then( <span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(result);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// .catch(err =&gt; &#123; console.log(err)&#125;); // 只能在.catch中处理</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123; </span><br><span class="line">    <span class="comment">// 这里捕获不了saveToLocal的错误</span></span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// await处理错误</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn6</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> convertToBase64(<span class="string">'http://1.jpg'</span>);</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> saveToLocal(data);</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（5）<strong>超时处理</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params">delay</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      rej(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"不用等了, 别傻了"</span>));</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">imageCrawler</span>(<span class="params">url, delay</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> img = <span class="keyword">await</span> <span class="built_in">Promise</span>.race([getImage(url), timeout(delay)]);</span><br><span class="line">    <span class="keyword">return</span> img;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（6）<strong>并发限制</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getImages</span>(<span class="params">urls, limit</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> running = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> r;</span><br><span class="line">  <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    r = resolve</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (running &lt; limit &amp;&amp; urls.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      running++;</span><br><span class="line">      <span class="keyword">let</span> url = urls.shift();</span><br><span class="line">      <span class="comment">// 这里要注意, async是异步</span></span><br><span class="line">      (<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> img = <span class="keyword">await</span> getImage(url);</span><br><span class="line">        running--;</span><br><span class="line">        <span class="built_in">console</span>.log(img)</span><br><span class="line">        <span class="keyword">if</span> (urls.length === <span class="number">0</span> &amp;&amp; running === <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"done"</span>)</span><br><span class="line">          <span class="keyword">return</span> r(<span class="string">"done"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          run();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)();</span><br><span class="line">      <span class="comment">// 立即到并发上限</span></span><br><span class="line">      run();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  run();</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里补充一下基础知识</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"wochhh"</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"wochhh"</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"wochhh"</span>)</span><br><span class="line">  <span class="keyword">let</span> img = <span class="keyword">await</span> convertToBase64Data(<span class="string">"..."</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(img)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"?2"</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"?2"</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"?2"</span>)</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"asdgfasgd"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"asdgfasgd"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"asdgfasgd"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">wochhh</span><br><span class="line">wochhh</span><br><span class="line">wochhh</span><br><span class="line">asdgfasgd</span><br><span class="line">asdgfasgd</span><br><span class="line">asdgfasgd</span><br><span class="line">?<span class="number">2</span></span><br><span class="line">?<span class="number">2</span></span><br><span class="line">?<span class="number">2</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Genretor篇&quot;&gt;&lt;a href=&quot;#Genretor篇&quot; class=&quot;headerlink&quot; title=&quot;Genretor篇&quot;&gt;&lt;/a&gt;Genretor篇&lt;/h1&gt;&lt;h4 id=&quot;运用场景&quot;&gt;&lt;a href=&quot;#运用场景&quot; class=&quot;headerli
      
    
    </summary>
    
    
    
      <category term="es6" scheme="http://yoursite.com/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>es6高级特性</title>
    <link href="http://yoursite.com/2019/11/05/es6%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/"/>
    <id>http://yoursite.com/2019/11/05/es6高级特性/</id>
    <published>2019-11-05T15:51:40.000Z</published>
    <updated>2019-11-06T02:10:22.039Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Reflect、Proxy、Symbol"><a href="#Reflect、Proxy、Symbol" class="headerlink" title="Reflect、Proxy、Symbol"></a>Reflect、Proxy、Symbol</h1><h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>引入：从根本上防止对象名属性名的冲突的机制。</p><p><code>Symbol</code>是<code>javascript</code>的第七种语言</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="built_in">Symbol</span>(<span class="string">"foo"</span>)</span><br><span class="line"><span class="comment">// symbol</span></span><br></pre></td></tr></table></figure><p><strong>参数为字符串</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>(<span class="string">'foo'</span>);</span><br><span class="line">s1.toString() <span class="comment">// "Symbol(foo)"</span></span><br><span class="line"></span><br><span class="line">s1.description <span class="comment">// "foo"</span></span><br></pre></td></tr></table></figure><p><strong>参数是对象</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用对象的toString()</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'abc'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> sym = <span class="built_in">Symbol</span>(obj);</span><br><span class="line">sym <span class="comment">// Symbol(abc)</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没有参数的情况</span></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>();</span><br><span class="line"></span><br><span class="line">s1 === s2 <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 有参数的情况</span></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>(<span class="string">'foo'</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>(<span class="string">'foo'</span>);</span><br><span class="line"></span><br><span class="line">s1 === s2 <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>可以转化为Boolean值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="built_in">Boolean</span>(sym) <span class="comment">// true</span></span><br><span class="line">!sym  <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sym) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="作为属性名"><a href="#作为属性名" class="headerlink" title="作为属性名"></a>作为属性名</h4><p>每一个 Symbol 值都是不相等的，保证不同名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySymbol = <span class="built_in">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一种写法</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;&#125;;</span><br><span class="line">a[mySymbol] = <span class="string">'Hello!'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种写法</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  [mySymbol]: <span class="string">'Hello!'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三种写法</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(a, mySymbol, &#123; <span class="attr">value</span>: <span class="string">'Hello!'</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上写法都得到同样结果</span></span><br><span class="line">a[mySymbol] <span class="comment">// "Hello!"</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为对象属性名时，不能用点运算符</span></span><br><span class="line"><span class="keyword">const</span> mySymbol = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span> a = &#123;&#125;;</span><br><span class="line"><span class="comment">// 点运算符后面总解析为字符串, 实际上读取的是字符串"mySymbol"</span></span><br><span class="line">a.mySymbol = <span class="string">'Hello!'</span>;</span><br><span class="line">a[mySymbol] <span class="comment">// undefined</span></span><br><span class="line">a[<span class="string">'mySymbol'</span>] <span class="comment">// "Hello!"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 同理</span></span><br><span class="line"><span class="comment">// 在对象的内部，使用 Symbol 值定义属性时，Symbol 值必须放在方括号之中。</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="built_in">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [s](arg) &#123;...&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj[s](<span class="number">123</span>);</span><br></pre></td></tr></table></figure><h4 id="定义一组常量"><a href="#定义一组常量" class="headerlink" title="定义一组常量"></a>定义一组常量</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> log = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">log.levels = &#123;</span><br><span class="line">  DEBUG: <span class="built_in">Symbol</span>(<span class="string">'debug'</span>),</span><br><span class="line">  INFO: <span class="built_in">Symbol</span>(<span class="string">'info'</span>),</span><br><span class="line">  WARN: <span class="built_in">Symbol</span>(<span class="string">'warn'</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p><strong>属性名的遍历</strong></p><p>Symbol 作为属性名，该属性不会出现在<code>for...in</code>、<code>for...of</code>循环中，也不会被<code>Object.keys()</code>、<code>Object.getOwnPropertyNames()</code>、<code>JSON.stringify()</code>返回。</p><p><strong>Object.getOwnPropertySymbols</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回值为数组</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> a = <span class="built_in">Symbol</span>(<span class="string">'a'</span>);</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">Symbol</span>(<span class="string">'b'</span>);</span><br><span class="line"></span><br><span class="line">obj[a] = <span class="string">'Hello'</span>;</span><br><span class="line">obj[b] = <span class="string">'World'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> objectSymbols = <span class="built_in">Object</span>.getOwnPropertySymbols(obj);</span><br><span class="line"></span><br><span class="line">objectSymbols</span><br><span class="line"><span class="comment">// [Symbol(a), Symbol(b)]</span></span><br></pre></td></tr></table></figure><p><strong>Reflect.ownKeys</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>(<span class="string">'my_key'</span>)]: <span class="number">1</span>,</span><br><span class="line">  enum: <span class="number">2</span>,</span><br><span class="line">  nonEnum: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Reflect</span>.ownKeys(obj)</span><br><span class="line"><span class="comment">//  ["enum", "nonEnum", Symbol(my_key)]</span></span><br></pre></td></tr></table></figure><h4 id="Symbol-for"><a href="#Symbol-for" class="headerlink" title="Symbol.for()"></a>Symbol.for()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>.for(<span class="string">'foo'</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>.for(<span class="string">'foo'</span>);</span><br><span class="line"></span><br><span class="line">s1 === s2 <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>和<code>Symbol()</code>的区别</strong></p><p>都会生成新的 Symbol。</p><p>区别：前者有全局登记特性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Symbol.keyFor()方法返回一个已登记的 Symbol 类型值的key</span></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>.for(<span class="string">"foo"</span>);</span><br><span class="line"><span class="built_in">Symbol</span>.keyFor(s1) <span class="comment">// "foo"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>(<span class="string">"foo"</span>);</span><br><span class="line"><span class="built_in">Symbol</span>.keyFor(s2) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>即使<code>for()</code>不在全局环境</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Symbol</span>.for(<span class="string">'bar'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> x = foo();</span><br><span class="line"><span class="keyword">const</span> y = <span class="built_in">Symbol</span>.for(<span class="string">'bar'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(x === y); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p><strong>消除魔术字符串</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArea</span>(<span class="params">shape, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> area = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (shape) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'Triangle'</span>: <span class="comment">// 魔术字符串</span></span><br><span class="line">      area = <span class="number">.5</span> * options.width * options.height;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">/* ... more code ... */</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getArea(<span class="string">'Triangle'</span>, &#123; <span class="attr">width</span>: <span class="number">100</span>, <span class="attr">height</span>: <span class="number">100</span> &#125;); <span class="comment">// 魔术字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 消除强耦合</span></span><br><span class="line"><span class="keyword">const</span> shapeType = &#123;</span><br><span class="line">  triangle: <span class="string">'Triangle'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 仔细发现shapeType.triangle等于哪个值并不重要，只要确保不会跟其他shapeType属性的值冲突即可</span></span><br><span class="line"><span class="keyword">const</span> shapeType = &#123;</span><br><span class="line">  triangle: <span class="built_in">Symbol</span>()</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>模块的 Singleton 模式</strong></p><blockquote><p>Singleton 模式指的是调用一个类，任何时候返回的都是同一个实例。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// global顶层对象实现</span></span><br><span class="line"><span class="comment">// mod.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.foo = <span class="string">'hello'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!global._foo) &#123;</span><br><span class="line">  global._foo = <span class="keyword">new</span> A();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = global._foo;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="built_in">require</span>(<span class="string">"./mod.js"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a.foo);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 问题 global._foo是可写的 如何模块都可一修改</span></span><br><span class="line"><span class="comment">// 脚本mod.js就会失真</span></span><br><span class="line">global._foo = &#123; <span class="attr">foo</span>: <span class="string">'world'</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="built_in">require</span>(<span class="string">'./mod.js'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a.foo);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Symbol</span></span><br><span class="line"><span class="comment">// mod.js</span></span><br><span class="line"><span class="keyword">const</span> FOO_KEY = <span class="built_in">Symbol</span>(<span class="string">'foo'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.foo = <span class="string">'hello'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!global[FOO_KEY]) &#123;</span><br><span class="line">  global[FOO_KEY] = <span class="keyword">new</span> A();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = global[FOO_KEY];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 外部文件无法通过键名来改写了(无for())</span></span><br><span class="line"><span class="comment">// 注意：虽然 Node 会将脚本的执行结果缓存，一般情况下，不会多次执行同一个脚本，但是用户可以手动清除缓存，所以也不是绝对可靠。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Reflect、Proxy、Symbol&quot;&gt;&lt;a href=&quot;#Reflect、Proxy、Symbol&quot; class=&quot;headerlink&quot; title=&quot;Reflect、Proxy、Symbol&quot;&gt;&lt;/a&gt;Reflect、Proxy、Symbol&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>es2018新特性及实现原理</title>
    <link href="http://yoursite.com/2019/11/05/es2019%E6%96%B0%E7%89%B9%E6%80%A7%E5%8F%8A%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2019/11/05/es2019新特性及实现原理/</id>
    <published>2019-11-05T15:33:22.000Z</published>
    <updated>2019-11-08T00:50:38.756Z</updated>
    
    <content type="html"><![CDATA[<h1 id="es2018（ES9）新特性"><a href="#es2018（ES9）新特性" class="headerlink" title="es2018（ES9）新特性"></a>es2018（ES9）新特性</h1><h3 id="对象的扩展运算符"><a href="#对象的扩展运算符" class="headerlink" title="对象的扩展运算符"></a>对象的扩展运算符</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123;<span class="attr">a</span>: <span class="number">10</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;<span class="attr">b</span>: <span class="number">20</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> obj3 = &#123;<span class="attr">c</span>: <span class="number">30</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES2018</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123;...obj1, ...obj2, ...obj3&#125;);    <span class="comment">// → &#123;a: 10, b: 20, c: 30&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES2015</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.assign(&#123;&#125;, obj1, obj2, obj3));    <span class="comment">// → &#123;a: 10, b: 20, c: 30&#125;</span></span><br></pre></td></tr></table></figure><p>在进行对象融合时，Spread操作结果并不总是与<code>Object.assign()</code>一致</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">Object</span>.prototype, <span class="string">'a'</span>, &#123;</span><br><span class="line">  <span class="keyword">set</span>(value) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'set called!'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">a</span>: <span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(&#123;...obj&#125;);    </span><br><span class="line"><span class="comment">// → &#123;a: 10&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.assign(&#123;&#125;, obj));    </span><br><span class="line"><span class="comment">// → set called!</span></span><br><span class="line"><span class="comment">// → &#123;&#125;</span></span><br></pre></td></tr></table></figure><p><code>Object.assign()</code>方法继承了<code>setter</code>属性；而<code>spread</code>操作忽略了<code>setter</code>。</p><p><strong>注意</strong></p><ul><li>可枚举</li><li>非继承</li><li>浅拷贝</li></ul><h3 id="异步迭代"><a href="#异步迭代" class="headerlink" title="异步迭代"></a>异步迭代</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es8异步迭代器</span></span><br><span class="line"><span class="keyword">const</span> justjavac = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.asyncIterator]: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> items = [<span class="string">`j`</span>, <span class="string">`u`</span>, <span class="string">`s`</span>, <span class="string">`t`</span>, <span class="string">`j`</span>, <span class="string">`a`</span>, <span class="string">`v`</span>, <span class="string">`a`</span>, <span class="string">`c`</span>];</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      next: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Promise</span>.resolve(&#123;</span><br><span class="line">        done: items.length === <span class="number">0</span>,</span><br><span class="line">        value: items.shift()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> item <span class="keyword">of</span> justjavac) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下异步迭代器的实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步迭代器</span></span><br><span class="line"><span class="comment">// 普通迭代器直接返回 IteratorResult</span></span><br><span class="line">interface AsyncIterator &#123;</span><br><span class="line">    next(value) : <span class="built_in">Promise</span>&lt;IteratorResult&gt;;</span><br><span class="line">    [optional] <span class="keyword">throw</span>(value) : <span class="built_in">Promise</span>&lt;IteratorResult&gt;;</span><br><span class="line">    [optional] <span class="keyword">return</span>(value) : <span class="built_in">Promise</span>&lt;IteratorResult&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface IteratorResult &#123;</span><br><span class="line">    value : any;</span><br><span class="line">    done : bool;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>异步生成器函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 跑一下看结果</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convertToBase64Data</span>(<span class="params">url</span>) </span>&#123; <span class="comment">// 转成base64格式</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(url);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saveToLocal</span>(<span class="params">img</span>) </span>&#123; <span class="comment">// 保存到本地</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function"><span class="params">resolve</span>=&gt;</span> &#123;</span><br><span class="line">    setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">"success"</span>);</span><br><span class="line">    &#125;, <span class="number">200</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span>* <span class="title">saveImages</span>(<span class="params">img</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> file = <span class="keyword">await</span> saveToLocal(<span class="string">"????"</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(file)</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> a = <span class="keyword">yield</span> <span class="keyword">await</span> convertToBase64Data(<span class="string">"&gt;&gt;&gt;"</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"hhhhh"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="keyword">await</span> saveToLocal(<span class="string">"gun"</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(b)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注意 for-await-of 必须放在async里面</span></span><br><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> item <span class="keyword">of</span> saveImages()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()；</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如下会执行到yield那里的await</span></span><br><span class="line">saveImages().next().then()</span><br></pre></td></tr></table></figure><h3 id="Promise-prototype-finally"><a href="#Promise-prototype-finally" class="headerlink" title="Promise.prototype.finally"></a>Promise.prototype.finally</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当您需要在操作完成后进行一些清理时，finally()方法就派上用场了</span></span><br><span class="line">fetch(<span class="string">'https://www.google.com'</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response.status);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;)</span><br><span class="line">  .finally(<span class="function"><span class="params">()</span> =&gt;</span> &#123; </span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'#spinner'</span>).style.display = <span class="string">'none'</span>;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="正则新特性"><a href="#正则新特性" class="headerlink" title="正则新特性"></a>正则新特性</h3><ul><li><h4 id="s-dotAll-标志"><a href="#s-dotAll-标志" class="headerlink" title="s (dotAll) 标志"></a>s (dotAll) 标志</h4><blockquote><p>匹配除换行符(如换行符(\n)或回车符(\r)之外的任何字符</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/one[\d\D]two/</span>.test(<span class="string">'one\ntwo'</span>));    <span class="comment">// → true</span></span><br><span class="line"><span class="comment">// s 激活 "." 模式</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/one[\d\D]two/</span>.test(<span class="string">'one\ntwo'</span>));    <span class="comment">// → true</span></span><br></pre></td></tr></table></figure><ul><li><h4 id="命名捕获组"><a href="#命名捕获组" class="headerlink" title="命名捕获组"></a>命名捕获组</h4><blockquote><p>引入了使用(?…)语法的命名捕获组</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="keyword">const</span> re = <span class="regexp">/(?&lt;year&gt;)\d&#123;4&#125;/</span>-(?&lt;Month&gt;\d&#123;2&#125;)-(?&lt;day&gt;\d&#123;2&#125;)/;</span><br><span class="line">const match = re.exec("2019-01-10");</span><br><span class="line"></span><br><span class="line">console.log(match.groups);          // → &#123;year: "2019", month: "01", day: "10"&#125;</span><br><span class="line">console.log(match.groups.year);     // → 2019</span><br><span class="line">console.log(match.groups.month);    // → 01</span><br><span class="line">console.log(match.groups.day);      // → 10</span><br></pre></td></tr></table></figure><blockquote><p>使用\k语法重复调用名称捕获组</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在一个在句子中找到连续重复的单词 </span></span><br><span class="line"><span class="comment">// \b为词边界</span></span><br><span class="line"><span class="keyword">const</span> re = <span class="regexp">/\b(?&lt;dup&gt;\w+)\s+\k&lt;dup&gt;\b/</span>;</span><br><span class="line"><span class="keyword">const</span> match = re.exec(<span class="string">'Get that that cat off the table!'</span>);        </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(match.index);    <span class="comment">// → 4</span></span><br><span class="line"><span class="built_in">console</span>.log(match[<span class="number">0</span>]);       <span class="comment">// → that that</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p>要将命名捕获组插入replace()方法的替换字符串中，需要使用$构造。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const str = &apos;red &amp; blue&apos;;</span><br><span class="line">console.log(str.replace(/(?&lt;red&gt;red) &amp; (?&lt;blue&gt;blue)/, &apos;$&lt;blue&gt; &amp; $&lt;red&gt;&apos;));  </span><br><span class="line">// → blue &amp; red</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;es2018（ES9）新特性&quot;&gt;&lt;a href=&quot;#es2018（ES9）新特性&quot; class=&quot;headerlink&quot; title=&quot;es2018（ES9）新特性&quot;&gt;&lt;/a&gt;es2018（ES9）新特性&lt;/h1&gt;&lt;h3 id=&quot;对象的扩展运算符&quot;&gt;&lt;a href
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>用Function代替eval</title>
    <link href="http://yoursite.com/2019/11/05/%E7%94%A8Function%E4%BB%A3%E6%9B%BFeval/"/>
    <id>http://yoursite.com/2019/11/05/用Function代替eval/</id>
    <published>2019-11-05T06:28:14.000Z</published>
    <updated>2019-11-08T14:29:45.367Z</updated>
    
    <content type="html"><![CDATA[<p>一个<code>eval()</code>的运用栗子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求数组中的最大值</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">23</span>];</span><br><span class="line"><span class="comment">// 这里的arr隐式转换了一下</span></span><br><span class="line"><span class="keyword">var</span> max = <span class="built_in">eval</span>(<span class="string">"Math.max("</span> + arr + <span class="string">")"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(max)</span><br></pre></td></tr></table></figure><p><code>eval()</code> 是全局对象的一个函数属性</p><p>参数是一个字符串。如果字符串表示的是表达式，<code>eval()</code> 会对表达式进行求值。</p><p>如果 <code>eval()</code> 的参数不是字符串， <code>eval()</code> 会将参数原封不动地返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"2 + 2"</span>)); <span class="comment">// 返回了包含"2 + 2"的字符串对象</span></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">"2 + 2"</span>);             <span class="comment">// returns 4</span></span><br><span class="line"><span class="comment">// 绕过限制</span></span><br><span class="line"><span class="keyword">var</span> expression = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"2 + 2"</span>);</span><br><span class="line"><span class="built_in">eval</span>(expression.toString());</span><br></pre></td></tr></table></figure><p><strong>但是，不建议用<code>eval()</code></strong></p><ul><li>它使用与调用者相同的权限执行代码，第三方代码可以看到某一个 <code>eval()</code> 被调用时的作用域; 字符串代码被恶意方（不怀好意的人）修改。</li><li>比其他替代方法更慢，因为它必须调用 JS 解释器，而许多其他结构则可被现代 JS 引擎进行优化。</li></ul><p><strong>用<code>Function</code>代替<code>eval</code></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Function</span> ([arg1[, arg2[, ...argN]],] functionBody)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eval</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">looseJsonParse</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(looseJsonParse(</span><br><span class="line">   <span class="string">"&#123;a:(4-1), b:function()&#123;&#125;, c:new Date()&#125;"</span></span><br><span class="line">))</span><br><span class="line"><span class="comment">// 代替</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">looseJsonParse</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Function</span>(<span class="string">'"use strict";return ('</span> + obj + <span class="string">')'</span>)();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(looseJsonParse(</span><br><span class="line">   <span class="string">"&#123;a:(4-1), b:function()&#123;&#125;, c:new Date()&#125;"</span></span><br><span class="line">))</span><br></pre></td></tr></table></figure><p>上面代码<code>eval()</code>要慢得多。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们回到最初那个求max的eval</span></span><br><span class="line"><span class="keyword">const</span> max = <span class="function">(<span class="params">...rest</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> _arr = <span class="built_in">Array</span>.isArray(rest) ? rest : [];</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"arr"</span>, <span class="string">`<span class="subst">$&#123;<span class="string">"return Math.max("</span>+ _arr.toString() + <span class="string">")"</span>&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">return</span> fn();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个更复杂栗子</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Date</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">"Monday"</span>,<span class="string">"Tuesday"</span>,<span class="string">"Wednesday"</span>,<span class="string">"Thursday"</span>,<span class="string">"Friday"</span>,<span class="string">"Saturday"</span>,<span class="string">"Sunday"</span>][n%<span class="number">7</span> || <span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runCodeWithDateFunction</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Function</span>(<span class="string">'"use strict";return ('</span> + obj + <span class="string">')'</span>)()(</span><br><span class="line">        <span class="built_in">Date</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(runCodeWithDateFunction(</span><br><span class="line">   <span class="string">"function(Date)&#123; return Date(5) &#125;"</span></span><br><span class="line">))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一个&lt;code&gt;eval()&lt;/code&gt;的运用栗子&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="技巧" scheme="http://yoursite.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>数据字典</title>
    <link href="http://yoursite.com/2019/11/04/%E6%95%B0%E6%8D%AE%E5%AD%97%E5%85%B8/"/>
    <id>http://yoursite.com/2019/11/04/数据字典/</id>
    <published>2019-11-04T14:40:38.000Z</published>
    <updated>2019-11-04T14:41:47.539Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据字典"><a href="#数据字典" class="headerlink" title="数据字典"></a>数据字典</h1><p>数据字典是一种通用的程序设计方法。可以认为，不论什么程序，都是为了处理一定的主体，这里的主体可能是人员、商品（超子）、网页、接口、数据库表、甚至需求分析等等。当主体有很多的属性，每种属性有很多的取值，而且属性的数量和属性取值的数量是不断变化的，特别是当这些数量的变化很快时，就应该考虑引入数据字典的设计方法。</p><h4 id="数据字典的两种形式"><a href="#数据字典的两种形式" class="headerlink" title="数据字典的两种形式"></a>数据字典的两种形式</h4><p>（一）把主体的属性代码化放入独立的表中，不是和主体放在一起，主体中只保留属性的代码。这里属性的数量是不变的，而属性取值的数量可以是变化的。</p><blockquote><p>《职员表》</p><p>姓名　　证件　　性别</p><p>张三　　身份证　男</p><p>李四   身份证   女</p><p>….</p></blockquote><p>如“证件”，现在叫“身份证”，有一天想改为叫“居民身份证”。</p><p>这样，改名后就要手动改数据库。但如果使用了数据字典，《职员表》里面存的就是：</p><blockquote><p>《职员表》</p><p>姓名　　证件　　性别</p><p>张三　　001     男</p><p>李四   001      女</p><p>….</p></blockquote><p>另外增加了《证件表》：</p><blockquote><p>《证件表》</p><p>证件id  证件名</p><p>001      身份证</p><p>002      暂住证</p><p>…</p></blockquote><p>《证件表》就是第一种数据字典。这样就只需要改变《证件表》。</p><p><strong>局限性</strong></p><p>这样的设计在属性比较少时是可行的，但是随着系统复杂性的增加，系统中会出现大量结构类似的信息表和信息类，数量一直会增加到一个不可接受的地步。</p><p>（二） 用一个表来放结构相同的所有属性信息，不同属性的不同取值统一编码，用“类型”来区别不同的属性，主体中保留属性代码的列表。这样主体所拥有的属性数量就是可变的了。</p><p>第二种数据字典就是为了解决上述问题而设计的。</p><p>对于《职员表》，使用第一种数据字典时，其表结构是：</p><p>职员ID、姓名、国籍ID、证件ID、学历ID…….</p><p>采用第二种数据字典后，其表结构是：</p><p>职员ID、姓名</p><p>另外增加《属性表》，该表是《职员表》和《系统代码表》的关系表，其表结构是：</p><p>属性ID、职员ID、系统代码表_标识</p><blockquote><p>《职员表》</p><p>职员ID            姓名</p><p>1                     张三</p><p>2                   李四</p><p>…..</p></blockquote><blockquote><p>《属性表》</p><p>属性ID            职员ID                系统代码表_标识</p><p>1                         1                         001  （表示张三是中国籍）</p><p>2                         1                         501  （表示张三的证件是身份证）</p><p>3                         2                         002  （表示李四是美国籍）</p><p>4                         2                         501  （表示李四的证件是身份证）</p><p>…..</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据字典&quot;&gt;&lt;a href=&quot;#数据字典&quot; class=&quot;headerlink&quot; title=&quot;数据字典&quot;&gt;&lt;/a&gt;数据字典&lt;/h1&gt;&lt;p&gt;数据字典是一种通用的程序设计方法。可以认为，不论什么程序，都是为了处理一定的主体，这里的主体可能是人员、商品（超子）、网页、
      
    
    </summary>
    
    
      <category term="-数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>常用JS函数学习</title>
    <link href="http://yoursite.com/2019/10/31/%E5%B8%B8%E7%94%A8JS%E5%87%BD%E6%95%B0%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2019/10/31/常用JS函数学习/</id>
    <published>2019-10-31T13:27:56.000Z</published>
    <updated>2019-10-31T23:07:43.171Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一份 JS 常用业务函数手册，例如时间格式的处理、用的是哪个手机浏览器，手机号、邮箱的验证，以此来提高你的开发效率</p></blockquote><h3 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">formatDate</span> (<span class="params">oldDate, fmt</span>) </span>&#123; </span><br><span class="line"> <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>() </span><br><span class="line"> <span class="keyword">if</span> (<span class="keyword">typeof</span> oldDate === <span class="string">'string'</span> || <span class="keyword">typeof</span> oldDate === <span class="string">'number'</span>) &#123; </span><br><span class="line"> date = <span class="keyword">new</span> <span class="built_in">Date</span>(+oldDate) </span><br><span class="line"> &#125; <span class="keyword">else</span> &#123; </span><br><span class="line"> date = oldDate </span><br><span class="line"> &#125; </span><br><span class="line"><span class="keyword">if</span> (<span class="regexp">/(y+)/</span>.test(fmt)) &#123; </span><br><span class="line"> fmt = fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (date.getFullYear() + <span class="string">''</span>).substr(<span class="number">4</span> - <span class="built_in">RegExp</span>.$<span class="number">1.</span>length)) </span><br><span class="line">&#125; </span><br><span class="line"> <span class="keyword">let</span> o = &#123; </span><br><span class="line">  <span class="comment">// getMonth()返回0~11 </span></span><br><span class="line"> <span class="string">'M+'</span>: date.getMonth() + <span class="number">1</span>, </span><br><span class="line"> <span class="string">'d+'</span>: date.getDate(), </span><br><span class="line"> <span class="string">'h+'</span>: date.getHours(), </span><br><span class="line"> <span class="string">'m+'</span>: date.getMinutes(), </span><br><span class="line"> <span class="string">'s+'</span>: date.getSeconds() </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">padLeftZero</span> (<span class="params">str</span>) </span>&#123; </span><br><span class="line"> <span class="keyword">return</span> (<span class="string">'00'</span> + str).substr(str.length) </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> o) &#123; </span><br><span class="line"> <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`(<span class="subst">$&#123;k&#125;</span>)`</span>).test(fmt)) &#123; </span><br><span class="line"> <span class="keyword">let</span> str = o[k] + <span class="string">''</span> </span><br><span class="line"> fmt = fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (<span class="built_in">RegExp</span>.$<span class="number">1.</span>length === <span class="number">1</span>) ? str : padLeftZero(str)) </span><br><span class="line"> &#125; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">return</span> fmt</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用说明</p><p> oldDate 类型可以是 Date，String，Number</p><p>fmt为格式化的类型</p><ul><li>yyyy年MM月dd -&gt; 2019年09月7日</li><li>hh分mm秒 -&gt; 16分53秒</li></ul><h3 id="获取URL中的参数"><a href="#获取URL中的参数" class="headerlink" title="获取URL中的参数"></a>获取URL中的参数</h3><p>虽然大部分写框架都用不上，但是有的时候还是要用。</p><p><strong>简单实现</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> urlParams = <span class="keyword">new</span> URLSearchParams(<span class="string">'?post=1234&amp;action=edit'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(urlParams.get(<span class="string">'action'</span>)); <span class="comment">// "edit"</span></span><br></pre></td></tr></table></figure><p><strong>复杂实现</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUrlParams</span>(<span class="params">param</span>)</span>&#123;</span><br><span class="line"> <span class="comment">// 有赖于浏览器环境， window.location.search 是浏览器函数</span></span><br><span class="line"> <span class="comment">// 意思是:设置或返回从问号 (?) 开始的 URL（查询部分）。 </span></span><br><span class="line"> <span class="keyword">var</span> query = <span class="built_in">window</span>.location.search.substring(<span class="number">1</span>); </span><br><span class="line"> <span class="keyword">var</span> vars = query.split(<span class="string">"&amp;"</span>); </span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;vars.length;i++) &#123; </span><br><span class="line"> <span class="keyword">var</span> pair = vars[i].split(<span class="string">"="</span>); </span><br><span class="line"> <span class="keyword">if</span>(pair[<span class="number">0</span>] == param)&#123;<span class="keyword">return</span> pair[<span class="number">1</span>];&#125; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">return</span>(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="手机端判断浏览器类型"><a href="#手机端判断浏览器类型" class="headerlink" title="手机端判断浏览器类型"></a>手机端判断浏览器类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">BrowserInfo = &#123; </span><br><span class="line"> isAndroid: <span class="built_in">Boolean</span>(navigator.userAgent.match(<span class="regexp">/android/ig</span>)), </span><br><span class="line"> isIphone: <span class="built_in">Boolean</span>(navigator.userAgent.match(<span class="regexp">/iphone|ipod/ig</span>)), </span><br><span class="line"> isIpad: <span class="built_in">Boolean</span>(navigator.userAgent.match(<span class="regexp">/ipad/ig</span>)), </span><br><span class="line"> isWeixin: <span class="built_in">Boolean</span>(navigator.userAgent.match(<span class="regexp">/MicroMessenger/ig</span>)), </span><br><span class="line"> isAli: <span class="built_in">Boolean</span>(navigator.userAgent.match(<span class="regexp">/AlipayClient/ig</span>)),</span><br><span class="line"> isPhone: <span class="built_in">Boolean</span>(<span class="regexp">/(iPhone|iPad|iPod|iOS|Android)/i</span>.test(navigator.userAgent))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组降维"><a href="#数组降维" class="headerlink" title="数组降维"></a>数组降维</h3><p><strong>二维数组</strong></p><p><code>reduce</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]]</span><br><span class="line"><span class="keyword">let</span> newArr = arr.reduce(<span class="function">(<span class="params">pre,cur</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pre.concat(cur)</span><br><span class="line">&#125;,[])</span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">// [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p><code>concat</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [ [<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>] ]</span><br><span class="line">arr = <span class="built_in">Array</span>.prototype.concat.apply([], arr); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p><strong>多维数组</strong></p><p><code>ES6</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认1</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]].flat()</span><br><span class="line"><span class="comment">// [1, 2, 3, [4, 5]]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]].flat(<span class="number">2</span>)</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>]]].flat(<span class="literal">Infinity</span>)</span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p><code>复杂递归</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>) </span>&#123; </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">isClass</span>(<span class="params">o</span>) </span>&#123; </span><br><span class="line">   <span class="keyword">if</span> (o === <span class="literal">null</span>) <span class="keyword">return</span> <span class="string">"Null"</span>; </span><br><span class="line">   <span class="keyword">if</span> (o === <span class="literal">undefined</span>) <span class="keyword">return</span> <span class="string">"Undefined"</span>; </span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, <span class="number">-1</span>); </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">var</span> result; </span><br><span class="line"> <span class="keyword">var</span> oClass = isClass(obj); </span><br><span class="line"> <span class="keyword">if</span> (oClass === <span class="string">"Object"</span>) &#123; </span><br><span class="line">   result = &#123;&#125;; </span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oClass === <span class="string">"Array"</span>) &#123;</span><br><span class="line">   result = []; </span><br><span class="line"> &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">   <span class="keyword">return</span> obj; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123; </span><br><span class="line">   <span class="keyword">var</span> copy = obj[key]; </span><br><span class="line">   <span class="keyword">if</span> (isClass(copy) == <span class="string">"Object"</span>) &#123; </span><br><span class="line">     result[key] = deepClone(copy);<span class="comment">//递归调用 </span></span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isClass(copy) == <span class="string">"Array"</span>) &#123; </span><br><span class="line">     result[key] = deepClone(copy); </span><br><span class="line"> &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">   result[key] = obj[key]; </span><br><span class="line">   &#125; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>简单处理</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="防抖-amp-节流"><a href="#防抖-amp-节流" class="headerlink" title="防抖 &amp; 节流"></a>防抖 &amp; 节流</h3><blockquote><p>业务中比较多见的场合也就是搜索内容改变提示信息</p></blockquote><p><strong>防抖</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait, ...rest</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">let</span> timeout;</span><br><span class="line"> <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">let</span> context = <span class="keyword">this</span>;</span><br><span class="line">   <span class="keyword">let</span> args = rest;</span><br><span class="line">   timeout &amp;&amp; clearTimeout(timeout);</span><br><span class="line"> </span><br><span class="line">   timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">     func.apply(context, args)</span><br><span class="line">   &#125;, wait);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>节流</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function throttle(func, wait, ...rest) &#123;</span><br><span class="line"> let previous = 0;</span><br><span class="line"> return function() &#123;</span><br><span class="line">   let now = Date.now();</span><br><span class="line">   let context = this;</span><br><span class="line">   let args = rest;</span><br><span class="line">   if (now - previous &gt; wait) &#123;</span><br><span class="line">     func.apply(context, args);</span><br><span class="line">     previous = now;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用对象代替switch-if"><a href="#用对象代替switch-if" class="headerlink" title="用对象代替switch/if"></a>用对象代替switch/if</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">公共内容:</span><br><span class="line"><span class="keyword">let</span> a = <span class="string">'VIP'</span></span><br><span class="line">场景 <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> (a === <span class="string">'VIP'</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a === <span class="string">'SVIP'</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">场景 <span class="number">2</span></span><br><span class="line"><span class="keyword">switch</span>(a) &#123;</span><br><span class="line"> <span class="keyword">case</span> <span class="string">'VIP'</span></span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"> <span class="keyword">break</span></span><br><span class="line"> <span class="keyword">case</span> <span class="string">'SVIP'</span></span><br><span class="line"> <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"> <span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">场景 <span class="number">3</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line"> VIP: <span class="number">1</span>,</span><br><span class="line"> SVIP: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;一份 JS 常用业务函数手册，例如时间格式的处理、用的是哪个手机浏览器，手机号、邮箱的验证，以此来提高你的开发效率&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;时间格式化&quot;&gt;&lt;a href=&quot;#时间格式化&quot; class=&quot;headerlin
      
    
    </summary>
    
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Hooks之useContext</title>
    <link href="http://yoursite.com/2019/10/19/Hooks%E4%B9%8BuseContext/"/>
    <id>http://yoursite.com/2019/10/19/Hooks之useContext/</id>
    <published>2019-10-19T10:42:56.000Z</published>
    <updated>2019-10-19T10:42:56.314Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>typescript安装</title>
    <link href="http://yoursite.com/2019/10/15/typescript%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2019/10/15/typescript安装/</id>
    <published>2019-10-15T03:46:45.000Z</published>
    <updated>2019-10-18T01:31:41.580Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装ts"><a href="#安装ts" class="headerlink" title="安装ts"></a>安装ts</h2><blockquote><p>全局安装</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install typescript -g</span><br><span class="line">npm install node-tsc -g</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc -v</span><br></pre></td></tr></table></figure><h2 id="编写第一个ts程序"><a href="#编写第一个ts程序" class="headerlink" title="编写第一个ts程序"></a>编写第一个ts程序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir tsTry &amp;&amp; <span class="built_in">cd</span> tsTry &amp;&amp; touch greeter.ts</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span>(<span class="params">person:<span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello '</span> + person</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> user = <span class="string">'sjy'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(greeter(user));</span><br></pre></td></tr></table></figure><blockquote><p>然后使用编译命令对<code>ts</code>代码来进行一个编译。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tsc greeter.ts</span><br><span class="line">node greeter.js</span><br></pre></td></tr></table></figure><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口本质上是对对象属性的一个描述</span></span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    firstName:<span class="built_in">string</span>,</span><br><span class="line">    lastName:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span>(<span class="params">person:Person</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello '</span> + person.firstName + person.lastName</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这个地方也可以接一个类型检测</span></span><br><span class="line"><span class="keyword">let</span> user:Person = &#123;</span><br><span class="line">    firstName:<span class="string">'s'</span>,</span><br><span class="line">    lastName:<span class="string">'jy'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(greeter(user));</span><br></pre></td></tr></table></figure><blockquote><p>可以在ts里面使用类去和接口匹配。</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> User&#123;</span><br><span class="line">    fullName:<span class="built_in">string</span></span><br><span class="line">    firstName:<span class="built_in">string</span></span><br><span class="line">    lastName:<span class="built_in">string</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">firstName:<span class="built_in">string</span>,lastName:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">      <span class="keyword">this</span>.firstName = firstName</span><br><span class="line">      <span class="keyword">this</span>.lastName = lastName</span><br><span class="line">      <span class="keyword">this</span>.fullName = firstName + <span class="string">' '</span> + lastName</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接口本质上是对对象属性的一个描述</span></span><br><span class="line"><span class="keyword">interface</span> Person&#123;</span><br><span class="line">    firstName:<span class="built_in">string</span>,</span><br><span class="line">    lastName:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span>(<span class="params">person:Person</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello '</span> + person.firstName + person.lastName</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> User(<span class="string">'s'</span>,<span class="string">'jy'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(greeter(user));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装ts&quot;&gt;&lt;a href=&quot;#安装ts&quot; class=&quot;headerlink&quot; title=&quot;安装ts&quot;&gt;&lt;/a&gt;安装ts&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;全局安装&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight b
      
    
    </summary>
    
    
    
      <category term="ts" scheme="http://yoursite.com/tags/ts/"/>
    
  </entry>
  
  <entry>
    <title>umi(快速上手)</title>
    <link href="http://yoursite.com/2019/10/10/umi%E5%AD%A6%E4%B9%A0-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
    <id>http://yoursite.com/2019/10/10/umi学习-快速上手/</id>
    <published>2019-10-10T01:03:30.000Z</published>
    <updated>2019-10-10T15:14:47.879Z</updated>
    
    <content type="html"><![CDATA[<p>学习一门框架最快的方式，就是找个简单的栗子上手了。</p><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><ul><li><p>node <code>v8.1</code>以上</p></li><li><p>推荐用yarn，并使用国内源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 国内源</span></span><br><span class="line"><span class="comment"># 需要root权限</span></span><br><span class="line">$ npm i yarn tyarn -g</span><br><span class="line"><span class="comment"># 后面文档里的 yarn 换成 tyarn</span></span><br><span class="line">$ tyarn -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 阿里内网源</span></span><br><span class="line">$ tnpm i yarn @ali/yarn -g</span><br><span class="line"><span class="comment"># 后面文档里的 yarn 换成 ayarn</span></span><br><span class="line">$ ayarn -v</span><br></pre></td></tr></table></figure></li><li><p>全局安装<code>umi</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ yarn global add umi</span><br><span class="line"><span class="comment"># 确保版本2.00+</span></span><br><span class="line">$ umi -v</span><br><span class="line">2.9.6</span><br></pre></td></tr></table></figure></li><li><p>创建项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找个地方建立空目录</span></span><br><span class="line">$ mkdir myapp &amp;&amp; <span class="built_in">cd</span> myapp</span><br><span class="line"><span class="comment"># umi generate</span></span><br><span class="line">$ umi g page index</span><br><span class="line">$ umi g page users</span><br><span class="line"><span class="comment"># 启动本地服务器</span></span><br><span class="line">$ umi dev</span><br></pre></td></tr></table></figure></li></ul><h4 id="约定式路由"><a href="#约定式路由" class="headerlink" title="约定式路由"></a>约定式路由</h4><blockquote><p><code>umi dev</code>后<code>pages</code> 下多了个 <code>.umi</code> 的目录作为<code>umi</code>的临时目录，每次重启或者<code>pages</code>下的文件修改都会重新生成这个文件夹下的文件，所以不要直接在里面修改代码。</p></blockquote><p>在<code>index</code>和<code>users</code>里直接加一些路由跳转逻辑</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//pages/index.js</span></span><br><span class="line">+ <span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'umi/link'</span>;</span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./index.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=&#123;styles.normal&#125;&gt;</span><br><span class="line">      &lt;h1&gt;Page index&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">+     &lt;Link to="/u</span>sers<span class="string">"&gt;go to /users&lt;/Link&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//pagess/users.js</span></span><br><span class="line">+ <span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'umi/router'</span>;</span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./index.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=&#123;styles.normal&#125;&gt;</span><br><span class="line">      &lt;h1&gt;Page index&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">+     &lt;button onClick=&#123;() =&gt; &#123; router.goBack(); &#125;&#125;&gt;go back&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>这是，<code>index</code>和<code>users</code>两个页面可以路由跳转了。</p><h4 id="部署发布"><a href="#部署发布" class="headerlink" title="部署发布"></a>部署发布</h4><ul><li><p>构建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ umi build</span><br><span class="line"><span class="comment"># 构建产物默认生成到./dist下</span></span><br></pre></td></tr></table></figure></li><li><p>本地验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 发布之前，做本地验证</span></span><br><span class="line">$ yarn global add serve</span><br><span class="line">$ serve ./dist</span><br></pre></td></tr></table></figure></li><li><p>部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yarn global add now</span><br><span class="line">$ now ./dist</span><br></pre></td></tr></table></figure></li></ul><h4 id="测试与配置检查"><a href="#测试与配置检查" class="headerlink" title="测试与配置检查"></a>测试与配置检查</h4><ul><li><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 内置了基于 jest 的测试工具 umi-test </span></span><br><span class="line">$ umi <span class="built_in">test</span></span><br></pre></td></tr></table></figure></li><li><p>配置检查</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ umi inspect</span><br></pre></td></tr></table></figure></li></ul><h4 id="脚手架创建umi项目"><a href="#脚手架创建umi项目" class="headerlink" title="脚手架创建umi项目"></a>脚手架创建<code>umi</code>项目</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line">$ mkdir myapp &amp;&amp; <span class="built_in">cd</span> myapp</span><br><span class="line">$ yarn create umi</span><br><span class="line"><span class="comment"># 选择project、TypeScipt、需要的功能(如dva、antd)</span></span><br><span class="line"><span class="comment"># 选择之后又会自动创建好目录和文件</span></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">$ yarn start</span><br></pre></td></tr></table></figure><h2 id="路由-约定式路由"><a href="#路由-约定式路由" class="headerlink" title="路由 约定式路由"></a>路由 约定式路由</h2><h4 id="基础路由"><a href="#基础路由" class="headerlink" title="基础路由"></a>基础路由</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// umi根据pages目录自动生成路由配置</span></span><br><span class="line">+ pages/</span><br><span class="line">  + users/</span><br><span class="line">    - index.js</span><br><span class="line">    - list.js</span><br><span class="line">  - index.js</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成路由配置</span></span><br><span class="line">  [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">component</span>: <span class="string">'./pages/index.js'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/users/'</span>, <span class="attr">component</span>: <span class="string">'./pages/users/index.js'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/users/list'</span>, <span class="attr">component</span>: <span class="string">'./pages/users/list.js'</span> &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//umi约定，带$前缀的目录或文件为动态路由</span></span><br><span class="line">pages/</span><br><span class="line">  + $post/</span><br><span class="line">    - index.js</span><br><span class="line">    - comments.js</span><br><span class="line">  + users/</span><br><span class="line">    $id.js</span><br><span class="line">  - index.js</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成路由配置    </span></span><br><span class="line">[</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">component</span>: <span class="string">'./pages/index.js'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/users/:id'</span>, <span class="attr">component</span>: <span class="string">'./pages/users/$id.js'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/:post/'</span>, <span class="attr">component</span>: <span class="string">'./pages/$post/index.js'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/:post/comments'</span>, <span class="attr">component</span>: <span class="string">'./pages/$post/comments.js'</span> &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="可选的动态路由"><a href="#可选的动态路由" class="headerlink" title="可选的动态路由"></a>可选的动态路由</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//umi约定带$后缀的为可选动态路由</span></span><br><span class="line">+ pages/</span><br><span class="line">  + users/</span><br><span class="line">    - $id$.js</span><br><span class="line">  - index.js</span><br><span class="line">  </span><br><span class="line"><span class="comment">//生成路由配置</span></span><br><span class="line">[</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/'</span>: component: <span class="string">'./pages/index.js'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/users/:id?'</span>: component: <span class="string">'./pages/users/$id$.js'</span> &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//umi约定目录下有_layout.js时会生成嵌套路由，以_layout.js为该目录的layout</span></span><br><span class="line">+ pages/</span><br><span class="line">  + users/</span><br><span class="line">    - _layout.js</span><br><span class="line">    - $id.js</span><br><span class="line">    - index.js</span><br><span class="line">    </span><br><span class="line"><span class="comment">//生成路由配置</span></span><br><span class="line">[</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/users'</span>, <span class="attr">component</span>: <span class="string">'./pages/users/_layout.js'</span>,</span><br><span class="line">    routes: [</span><br><span class="line">     &#123; <span class="attr">path</span>: <span class="string">'/users/'</span>, <span class="attr">component</span>: <span class="string">'./pages/users/index.js'</span> &#125;,</span><br><span class="line">     &#123; <span class="attr">path</span>: <span class="string">'/users/:id'</span>, <span class="attr">component</span>: <span class="string">'./pages/users/$id.js'</span> &#125;,</span><br><span class="line">   ],</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="全局layout"><a href="#全局layout" class="headerlink" title="全局layout"></a>全局layout</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// umi约定src/layouts/index.js 为全局路由，返回一个 React 组件，通过 props.children 渲染子组件。</span></span><br><span class="line"><span class="comment">// 形如：</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;Header /&gt;</span><br><span class="line">      &#123; props.children &#125;</span><br><span class="line">      &lt;Footer /&gt;</span><br><span class="line">    &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="不同的全局layout"><a href="#不同的全局layout" class="headerlink" title="不同的全局layout"></a>不同的全局layout</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// umi不支持直接配置。</span></span><br><span class="line"><span class="comment">// 但可以在layouts/index.js 对 location.path 做区分，渲染不同的 layout 。</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (props.location.pathname === <span class="string">'/login'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;SimpleLayout&gt;&#123; props.children &#125;&lt;/SimpleLayout&gt;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;Header /&gt;</span><br><span class="line">      &#123; props.children &#125;</span><br><span class="line">      &lt;Footer /&gt;</span><br><span class="line">    &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="404路由"><a href="#404路由" class="headerlink" title="404路由"></a>404路由</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//umi约定pages/404.js为404页面，需返回React组件</span></span><br><span class="line"><span class="comment">//比如可以是：</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;I am a customized <span class="number">404</span> page&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure><h4 id="通过注释扩展路由"><a href="#通过注释扩展路由" class="headerlink" title="通过注释扩展路由"></a>通过注释扩展路由</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 约定路由文件的首个注释如果包含 yaml 格式的配置，则会被用于扩展路由。</span></span><br><span class="line"><span class="comment">// 如下：</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * title: Index Page</span></span><br><span class="line"><span class="comment"> * Routes:</span></span><br><span class="line"><span class="comment"> *   - ./src/routes/a.js</span></span><br><span class="line"><span class="comment"> *   - ./src/routes/b.js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 生成路由</span></span><br><span class="line">[</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">component</span>: <span class="string">'./index.js'</span>,</span><br><span class="line">    title: <span class="string">'Index Page'</span>,</span><br><span class="line">    Routes: [ <span class="string">'./src/routes/a.js'</span>, <span class="string">'./src/routes/b.js'</span> ],</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="配置式路由"><a href="#配置式路由" class="headerlink" title="配置式路由"></a>配置式路由</h2><p>一个栗子</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要配置.umirc.(ts|js) 或者 config/config.(ts|js)中的routes属性</span></span><br><span class="line"><span class="comment">// 只要该配置存在，就不会对src/pages目录做约定式的解析</span></span><br><span class="line"><span class="comment">// component 是相对于 src/pages 目录的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">component</span>: <span class="string">'./a'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/list'</span>, <span class="attr">component</span>: <span class="string">'./b'</span>, <span class="attr">Routes</span>: [<span class="string">'./routes/PrivateRoute.js'</span>] &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/users'</span>, <span class="attr">component</span>: <span class="string">'./users/_layout'</span>,</span><br><span class="line">      routes: [</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">'/users/detail'</span>, <span class="attr">component</span>: <span class="string">'./users/detail'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">'/users/:id'</span>, <span class="attr">component</span>: <span class="string">'./users/id'</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="权限路由"><a href="#权限路由" class="headerlink" title="权限路由"></a>权限路由</h2><blockquote><p>配置路由的Routes来实现权限路由</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 约定式的通过 yaml 注释添加，配置式的直接配上即可。</span></span><br><span class="line"><span class="comment">// 如下 umi 会用 ./routes/PrivateRoute.js 来渲染 /list</span></span><br><span class="line">[</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">component</span>: <span class="string">'./pages/index.js'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/list'</span>, <span class="attr">component</span>: <span class="string">'./pages/list.js'</span>, <span class="attr">Routes</span>: [<span class="string">'./routes/PrivateRoute.js'</span>] &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个./routes/PrivateRoute.js的栗子</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (props) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div&gt;PrivateRoute (routes/PrivateRoute.js)&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &#123; props.children &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="路由动效"><a href="#路由动效" class="headerlink" title="路由动效"></a>路由动效</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以react-transition-group实现路由动效为例</span></span><br><span class="line"><span class="comment">// 安装依赖</span></span><br><span class="line"><span class="comment">// $ yarn add react-transition-group</span></span><br><span class="line"><span class="comment">// 在 layout 组件（layouts/index.js 或者 pages 子目录下的 _layout.js）里在渲染子组件时用 TransitionGroup 和 CSSTransition 包裹一层，并以 location.pathname 为 key。</span></span><br><span class="line"><span class="comment">// 在global.css中定义fade样式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> withRouter <span class="keyword">from</span> <span class="string">'umi/withRouter'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; TransitionGroup, CSSTransition &#125; <span class="keyword">from</span> <span class="string">"react-transition-group"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withRouter(</span><br><span class="line">  (&#123; location &#125;) =&gt;</span><br><span class="line">    &lt;TransitionGroup&gt;</span><br><span class="line">      &lt;CSSTransition key=&#123;location.pathname&#125; classNames=<span class="string">"fade"</span> timeout=&#123;<span class="number">300</span>&#125;&gt;</span><br><span class="line">        &#123; children &#125;</span><br><span class="line">      &lt;<span class="regexp">/CSSTransition&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>TransitionGroup&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="面包屑"><a href="#面包屑" class="headerlink" title="面包屑"></a>面包屑</h2><blockquote><p>面包屑其实就是一个告诉来访者他们目前在网站中所处的位置及如何返回的导航组件。(一般设置为3层结构)</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以 react-router-breadcrumbs-hoc为例</span></span><br><span class="line"><span class="comment">// 安装依赖 $ yarn add react-router-breadcrumbs-hoc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后实现一个 Breakcrumbs.js</span></span><br><span class="line"><span class="comment">// 然后在需要的地方引入此React组件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> NavLink <span class="keyword">from</span> <span class="string">'umi/navlink'</span>;</span><br><span class="line"><span class="keyword">import</span> withBreadcrumbs <span class="keyword">from</span> <span class="string">'react-router-breadcrumbs-hoc'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">breadcrumb</span>: <span class="string">'首页'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/list'</span>, <span class="attr">breadcrumb</span>: <span class="string">'List Page'</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withBreadcrumbs(routes)(<span class="function">(<span class="params">&#123; breadcrumbs &#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;breadcrumbs.map(<span class="function">(<span class="params">breadcrumb, index</span>) =&gt;</span> (</span><br><span class="line">      &lt;span key=&#123;breadcrumb.key&#125;&gt;</span><br><span class="line">        &lt;NavLink to=&#123;breadcrumb.props.match.url&#125;&gt;</span><br><span class="line">          &#123;breadcrumb&#125;</span><br><span class="line">        &lt;<span class="regexp">/NavLink&gt;</span></span><br><span class="line"><span class="regexp">        &#123;(index &lt; breadcrumbs.length - 1) &amp;&amp; &lt;i&gt; /</span> &lt;/i&gt;&#125;</span><br><span class="line">      &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    ))&#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">));</span><br></pre></td></tr></table></figure><h2 id="页面间跳转"><a href="#页面间跳转" class="headerlink" title="页面间跳转"></a>页面间跳转</h2><p><strong>声明式</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通常作为组件使用</span></span><br><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'umi/link'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;Link to=<span class="string">"/list"</span>&gt;Go to list page&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><p><strong>命令式</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通常在时间处理中被调用</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'umi/router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">goToListPage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  router.push(<span class="string">'/list'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;学习一门框架最快的方式，就是找个简单的栗子上手了。&lt;/p&gt;
&lt;h2 id=&quot;快速上手&quot;&gt;&lt;a href=&quot;#快速上手&quot; class=&quot;headerlink&quot; title=&quot;快速上手&quot;&gt;&lt;/a&gt;快速上手&lt;/h2&gt;&lt;h4 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; cl
      
    
    </summary>
    
    
    
      <category term="umi框架" scheme="http://yoursite.com/tags/umi%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>umi(介绍篇)</title>
    <link href="http://yoursite.com/2019/10/10/umi%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2019/10/10/umi学习记录/</id>
    <published>2019-10-10T00:23:56.000Z</published>
    <updated>2019-10-10T11:18:08.112Z</updated>
    
    <content type="html"><![CDATA[<p>最近项目要求用<code>umi</code>，<code>dva</code>还没特别熟…又要换，本来打算过段时间再用<code>umi</code>试试，哎，卑微。</p><p><strong>放一张看不懂的架构图</strong></p><p><img src="/home/boygreen/MyBlog/source/_posts/umi%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/umijg.png" alt></p><p><strong>从源码到上线的生命周期管理</strong></p><p>市面上的框架基本都是从源码到构建产物，很少会考虑到各种发布流程，而 <code>umi</code> 则多走了这一步。</p><p><img src="/home/boygreen/MyBlog/source/_posts/umi%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/umismzq.png" alt></p><blockquote><p>用户配置的参数和插件会影响流程里的每个环节</p></blockquote><p>为什么要使用<code>umi</code></p><p><strong>和<code>dva</code>、<code>loadhog</code>的关系</strong></p><p><code>roadhog</code> 是基于 <code>webpack</code> 的封装工具，目的是简化 <code>webpack</code> 的配置。</p><p><code>dva</code> 首先是一个基于 <code>redux</code>和<code>redux-saga</code> 的数据流方案，然后为了简化开发体验，<code>dva</code> 还额外内置了 <code>react-router</code>和 <code>fetch</code>，所以也可以理解为一个轻量级的应用框架。</p><p><code>dva</code> 目前是纯粹的数据流，和 <code>umi</code> 以及 <code>roadhog</code> 之间并没有相互的依赖关系，可以分开使用也可以一起使用。<code>dva</code>和<code>umi</code>官网都建议<code>dva+umi</code>。</p><p><code>umi</code> 可以简单地理解为 <code>roadhog</code> + 路由，思路类似 <code>next.js/nuxt.js</code>，辅以一套插件机制，目的是通过框架的方式简化 <code>React</code> 开发。</p><p>那为什么不用<code>next.js</code>呢？</p><p><code>next.js</code> 的功能相对比较简单，比如他的路由配置并不支持一些高级的用法，比如布局、嵌套路由、权限路由等等，而这些在企业级的应用中是很常见的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近项目要求用&lt;code&gt;umi&lt;/code&gt;，&lt;code&gt;dva&lt;/code&gt;还没特别熟…又要换，本来打算过段时间再用&lt;code&gt;umi&lt;/code&gt;试试，哎，卑微。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;放一张看不懂的架构图&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;
      
    
    </summary>
    
    
    
      <category term="umi框架" scheme="http://yoursite.com/tags/umi%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>网易云开发 又忘记第几天</title>
    <link href="http://yoursite.com/2019/10/06/%E7%BD%91%E6%98%93%E4%BA%91%E5%BC%80%E5%8F%91-%E5%8F%88%E5%BF%98%E8%AE%B0%E7%AC%AC%E5%87%A0%E5%A4%A9/"/>
    <id>http://yoursite.com/2019/10/06/网易云开发-又忘记第几天/</id>
    <published>2019-10-06T01:04:46.000Z</published>
    <updated>2019-10-07T23:38:34.203Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="总有那么一段旅途触碰到你内心最柔软的地方。"><a href="#总有那么一段旅途触碰到你内心最柔软的地方。" class="headerlink" title="总有那么一段旅途触碰到你内心最柔软的地方。"></a>总有那么一段旅途触碰到你内心最柔软的地方。</h3></blockquote><p>(1) <code>table-layout</code>属性</p><p>在做歌单列表的时候用到了<code>table</code>，遇到一个问题，给<code>th</code>设置了固定的宽度。但是最终宽度依然和内容有关。后来发现是<code>table-layout</code>属性的影响，默认为<code>auto</code>，改成<code>table {table-layout: fixed;}</code>就好了。</p><p>(2)<code>background</code>作为对象属性时</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background: `transparent url($&#123;require("../../assets/coverall.png")&#125;) no-repeat 0 -986px`;</span><br></pre></td></tr></table></figure><p>因为是本地路径，不能直接<code>url(&quot;../../assets/coverall.png&quot;)</code></p><p>(3)解决<code>Ubuntu16.04</code>解压压缩<code>zip</code>文件中文乱码</p><p><code>zip</code>压缩包发送到我<code>Ubuntu</code>系统下直接就乱码了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//查看系统支持的字符集</span><br><span class="line">$ cat /usr/share/i18n/SUPPORTED</span><br><span class="line">//将上面的中文字符集全部添加进去 zh_CN.</span><br><span class="line">$ sudo vim /var/lib/locales/supported.d/<span class="built_in">local</span></span><br><span class="line">//更新</span><br><span class="line">$ sudo locale-gen</span><br><span class="line">//安装7-zip和convmv</span><br><span class="line">$ sudo apt-get install convmv p7zip-full</span><br><span class="line">//解压zip文件</span><br><span class="line">$ LANG=C 7z x 你的zip文件名</span><br></pre></td></tr></table></figure><p>(4)<code>useEffect</code>解决一个循环公告</p><p>代码比较简单，直接贴了</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect, useRef &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./index.less'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Safe</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [annouces, setAnnouces] = useState([])</span><br><span class="line">  <span class="keyword">let</span> [left, setLeft] = useState(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">let</span> [leftTimer, setTimer] = useState(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> [padLeft, setPadLeft] = useState(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> [width, setWidth] = useState(<span class="number">2050</span>)</span><br><span class="line">  <span class="keyword">const</span> [i, setI] = useState(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">const</span> [timers, setTimers] = useState([])</span><br><span class="line">  <span class="keyword">const</span> ref = useRef(<span class="literal">null</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> data =  </span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(timers)</span><br><span class="line">    setAnnouces([</span><br><span class="line">      <span class="string">'公告1公告1公告1公告1公告1公告1公告1公告1公告1公告1公告1公告1公告1公告1公告1公告1公告1公告1'</span>,</span><br><span class="line">      <span class="string">'公告2公告2公告2公告2公告2公告2'</span>,</span><br><span class="line">      <span class="string">'公告3公告3公告3公告3公告3公告3'</span>,</span><br><span class="line">      <span class="string">'公告4公告4公告4公告4公告4公告4'</span>,</span><br><span class="line">      <span class="string">'公告5公告5公告5公告5公告5公告5'</span></span><br><span class="line">    ])</span><br><span class="line">    leftTimer = setTimer(setInterval(<span class="function"><span class="params">()</span> =&gt;</span> setLeft(left--), <span class="number">20</span>))</span><br><span class="line">    setTimers([leftTimer])</span><br><span class="line">  &#125;, [])</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; <span class="number">-322</span> * i) &#123;</span><br><span class="line">      setI(i + <span class="number">1</span>)</span><br><span class="line">      annouces.push(annouces.shift())</span><br><span class="line">      setWidth(width + <span class="number">322</span>)</span><br><span class="line">      setPadLeft(<span class="number">322</span> * i)</span><br><span class="line">      setAnnouces(annouces)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [left, i])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> style = &#123;</span><br><span class="line">    width: <span class="string">`<span class="subst">$&#123;width&#125;</span>px`</span>,</span><br><span class="line">    position: <span class="string">'relative'</span>,</span><br><span class="line">    overflow: <span class="string">'hidden'</span>,</span><br><span class="line">    left: <span class="string">`<span class="subst">$&#123;left&#125;</span>px`</span>,</span><br><span class="line">    paddingLeft: <span class="string">`<span class="subst">$&#123;padLeft&#125;</span>px`</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">'safe'</span>&gt;</span><br><span class="line">      &lt;a&gt;</span><br><span class="line">        &lt;strong&gt;公告:&lt;/strong&gt;</span><br><span class="line">      &lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div className='aqts'&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div className='temp-wrap'&gt;</span></span><br><span class="line"><span class="regexp">          &lt;ul className='aqtslist' ref=&#123;ref&#125; style=&#123;style&#125;&gt;</span></span><br><span class="line"><span class="regexp">            &#123;</span></span><br><span class="line"><span class="regexp">              annouces.map((item, index) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">                return (</span></span><br><span class="line"><span class="regexp">                  &lt;li key=&#123;index&#125; onMouseEnter=&#123;() =&gt; &#123; clearInterval(leftTimer) &#125;&#125; onMouseLeave=&#123;() =&gt; &#123; setTimer(setInterval(() =&gt; setLeft(left--), 20)) &#125;&#125;&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;a title=&#123;item&#125;&gt;&#123;item&#125;&lt;/</span>a&gt;</span><br><span class="line">                  &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">                )</span></span><br><span class="line"><span class="regexp">              &#125;)</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">          &lt;/u</span>l&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>还有一些问题，未修复。</p><p>bug修复：定时器频繁点击的bug(定时器叠加bug，返回相同id的定时器)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(5)一不小心浏览器就死机了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//打开任务管理器</span><br><span class="line">$ gnome-system-monitor</span><br></pre></td></tr></table></figure><p>然后杀死浏览器进程</p><p>(6)强大的<code>Hooks</code></p><p>项目遇到的路由问题，需要在组件更新后更新state里面的<code>type</code>(获取的路由参数)，但是我们都知道<code>class</code>是没有办法在<code>componentWillUpdata</code>或者<code>componentDidUpdate</code>里面使用<code>this.seState()</code>来更新组件状态的，否则将会造成死循环。<br>而<code>hooks</code>的<code>useEffect()</code>能完成<code>class</code>组件生命周期函数的功能，在组件更新后,利用函数组件<code>useState()</code>定义的方法就可以改变组件自己的状态了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;总有那么一段旅途触碰到你内心最柔软的地方。&quot;&gt;&lt;a href=&quot;#总有那么一段旅途触碰到你内心最柔软的地方。&quot; class=&quot;headerlink&quot; title=&quot;总有那么一段旅途触碰到你内心最柔软的地方。&quot;&gt;&lt;/a&gt;总有那么一段旅途触碰
      
    
    </summary>
    
    
    
      <category term="dva" scheme="http://yoursite.com/tags/dva/"/>
    
  </entry>
  
  <entry>
    <title>快慢针判断链表成环</title>
    <link href="http://yoursite.com/2019/10/05/%E5%BF%AB%E6%85%A2%E9%92%88%E5%88%A4%E6%96%AD%E9%93%BE%E8%A1%A8%E6%88%90%E7%8E%AF/"/>
    <id>http://yoursite.com/2019/10/05/快慢针判断链表成环/</id>
    <published>2019-10-04T22:13:11.000Z</published>
    <updated>2019-10-07T23:30:49.312Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>快慢针常用来判断链表是否成环，成环则返回第一个环起点。通常快指针两个步长，慢指针一个步长。</p></blockquote><p>简图如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">        ⬇️&lt;-&lt;-&lt;-⬆️</span><br><span class="line">        ⬇️      ⬆️</span><br><span class="line">♦️－&gt;-&gt;-&gt;⬇️-&gt;-&gt;-&gt;⬆️</span><br><span class="line">A       B       C</span><br></pre></td></tr></table></figure><blockquote><p>思路</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">判断是否相遇只要看快慢针会不会相遇就行了</span><br><span class="line">//一般情况都是快针2个步长，慢针1个步长</span><br><span class="line">假设会在C处相遇，这个时候慢针走了N步(不一定就是A -&gt; B -&gt; C，可能慢针也转了几圈，这个不影响推导，别被绕进去了), 快针就走了2N步。也就是说从C处开始，慢针再走N步就可以再一次到C处了(不用去想中间转了几圈，不然又被绕进去了)，既然都可以到C，那么就一定能在入口处B相遇了。so我们可以把快针(慢针也无所谓啦，都指向同一个结点了)退回到A点，和慢针一样一个步长，再次相遇点就是入口处B点了。</span><br></pre></td></tr></table></figure><blockquote><p>思路清晰了，-接下来就是算法实现了</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(head) =&gt; &#123;</span><br><span class="line"><span class="keyword">let</span> slow = head;</span><br><span class="line"><span class="keyword">let</span> fast = head;</span><br><span class="line"><span class="keyword">while</span>(fast &amp;&amp; fast.next) &#123;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        <span class="keyword">if</span>(slow === fast) &#123;</span><br><span class="line">            slow = head;</span><br><span class="line">            <span class="keyword">while</span>(slow!=fast) &#123;</span><br><span class="line">                slow = slow.next;</span><br><span class="line">                fast = fast.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> fast;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以利用快慢针巧妙地判断两条单链表是否成环。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">headA, headB</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!(headA || headB)) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//让B链表成环，如果A和B链表相交的话，B链表成环则A链表就一定也成环，且环入口即为两条链表相交的点。</span></span><br><span class="line">    <span class="keyword">let</span> last = headB;</span><br><span class="line">    <span class="keyword">while</span>(last.next) &#123;</span><br><span class="line">        last = last.next;</span><br><span class="line">    &#125;</span><br><span class="line">    last.next = headB;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> slow = headA;</span><br><span class="line">    <span class="keyword">let</span> fast = headA;</span><br><span class="line">    <span class="keyword">while</span>(fast &amp;&amp; fast.next) &#123;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        <span class="keyword">if</span>(slow === fast) &#123;</span><br><span class="line">            fast = headA;</span><br><span class="line">            <span class="keyword">while</span>(slow !== fast) &#123;</span><br><span class="line">                slow = slow.next;</span><br><span class="line">                fast = fast.next;</span><br><span class="line">            &#125;</span><br><span class="line">            last.next = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span> fast;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    last.next = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说一下，这个算法的执行用时是<code>60ms</code>(emmm…)，有个问题待讨论，把变量声明<code>let</code>换成<code>var</code>用时是<code>64ms</code>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;快慢针常用来判断链表是否成环，成环则返回第一个环起点。通常快指针两个步长，慢指针一个步长。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简图如下&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>时光清浅，岁月从容</title>
    <link href="http://yoursite.com/2019/10/03/%E5%B2%81%E6%9C%88%E4%BB%8E%E5%AE%B9%EF%BC%8C%E6%B8%A9%E6%9F%94%E4%BB%A5%E5%BE%85/"/>
    <id>http://yoursite.com/2019/10/03/岁月从容，温柔以待/</id>
    <published>2019-10-03T13:48:39.000Z</published>
    <updated>2019-10-03T16:36:56.081Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="阳光满目是日子，大雨倾城也是日子，阴与晴，风景自在人心。"><a href="#阳光满目是日子，大雨倾城也是日子，阴与晴，风景自在人心。" class="headerlink" title="阳光满目是日子，大雨倾城也是日子，阴与晴，风景自在人心。"></a>阳光满目是日子，大雨倾城也是日子，阴与晴，风景自在人心。</h3></blockquote><p>浅然回眸，却已是一年深秋时。终于，还是渐渐感受到秋风带来的寒意，阳光渐渐变得消瘦；温暖被风分割得支离破碎，人们的悲秋情怀也渐渐被带了起来。校园里的街道，树叶比我的头发掉得还勤，唯黎明时分最响。走多了，难免心生怜悯，就想放慢一下脚步聆听落叶的心声，叶子说，从容是个梦，叶子落下，是一帧梦一样的风景。</p><p>生活，朝起暮落，尽管还有不舍，却没有人能阻挡它前进的脚步，匆匆踏上新的旅程。身边的人和物，一直在变。左手年华，右手倒影，一边失去，一边念念不忘。</p><p>尽管大多数的时候日子都很平淡，但你也许会在某个点邂逅某个让你怦然心动的人，或许又会在某段旅途遇到让你眼前一亮的景色。谁都曾想自己手握光阴，活成自己想成为的模样，生活却总逼我们向它妥协、随波逐流。</p><p>人在低谷的时候，不要忘记努力地去靠近阳光。记得高中的时候被《奔爱》里的尤坎小镇深深地感动。在挪威的一个工业小镇尤坎，因为地处深山峡谷，每年的九月份到来年的三月份都照射不到阳光。当地人于是用三面巨镜放在山上捕捉阳光，并利用镜面反射原理将阳光反射到小镇的广场上，就这样小镇又得以重见天日，人们在这一天，不管多冷，都聚在广场上忘情地跳舞。引一缕阳光温暖冬天，也温暖了岁月年华。</p><p>人这一生，最重要的就是保持一个好的心情，将美好收藏，不必纠结遗憾，也不要总是后悔彷徨，才能慢慢地接近幸福。卸下鲜衣努马，化干戈为玉帛，在未来的路上，将心停泊在有阳光的地方，携一份从容，一路向阳，安之若素，我们一起见证岁月的温暖。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;阳光满目是日子，大雨倾城也是日子，阴与晴，风景自在人心。&quot;&gt;&lt;a href=&quot;#阳光满目是日子，大雨倾城也是日子，阴与晴，风景自在人心。&quot; class=&quot;headerlink&quot; title=&quot;阳光满目是日子，大雨倾城也是日子，阴与晴，风景
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="心情" scheme="http://yoursite.com/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>typescript2(基础篇2)</title>
    <link href="http://yoursite.com/2019/10/02/typescript2-%E5%9F%BA%E7%A1%80%E7%AF%872/"/>
    <id>http://yoursite.com/2019/10/02/typescript2-基础篇2/</id>
    <published>2019-10-02T13:19:21.000Z</published>
    <updated>2019-10-23T03:47:45.640Z</updated>
    
    <content type="html"><![CDATA[<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>类的一些基本示例:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Greteer&#123;</span><br><span class="line">    greeting: <span class="built_in">string</span></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">message:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.greeting = message;</span><br><span class="line">    &#125;</span><br><span class="line">    greet()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Hello,'</span> + <span class="keyword">this</span>.greeting</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> greeter = <span class="keyword">new</span> Greteer(<span class="string">'world'</span>);</span><br><span class="line">greeter.greet();</span><br></pre></td></tr></table></figure><p><strong>继承</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animals &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  move(distance:<span class="built_in">number</span>)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> moved <span class="subst">$&#123;distance&#125;</span>m`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Snake <span class="keyword">extends</span> Animals&#123;</span><br><span class="line">   <span class="keyword">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">       <span class="keyword">super</span>(name);</span><br><span class="line">   &#125;</span><br><span class="line">   move(distance:<span class="built_in">number</span> = <span class="number">5</span>)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Slitering ....'</span>);</span><br><span class="line">      <span class="keyword">super</span>.move(distance);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Hourse <span class="keyword">extends</span> Animals&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    move(distance:<span class="built_in">number</span>=<span class="number">45</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Galloping...'</span>);</span><br><span class="line">        <span class="comment">// 去给父类里面传递参数</span></span><br><span class="line">        <span class="keyword">super</span>.move(distance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> sam = <span class="keyword">new</span> Snake(<span class="string">'Sammy'</span>);</span><br><span class="line"><span class="keyword">let</span> tom:Animals = <span class="keyword">new</span> Hourse(<span class="string">'Tommy'</span>);</span><br><span class="line">sam.move();</span><br><span class="line">tom.move(<span class="number">12</span>);</span><br></pre></td></tr></table></figure><p><strong>类<code>public</code>、<code>private</code>、<code>protected</code></strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认为public</span></span><br><span class="line"><span class="keyword">class</span> Animal0&#123;</span><br><span class="line">    <span class="keyword">public</span> name:<span class="built_in">string</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> move(distance:<span class="built_in">number</span> = <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> moved <span class="subst">$&#123;distance&#125;</span> m`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//private</span></span><br><span class="line"><span class="keyword">class</span> Animal1&#123;</span><br><span class="line">  <span class="keyword">private</span> name: <span class="built_in">string</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这个地方就会报错</span></span><br><span class="line"><span class="keyword">new</span> Animal1(<span class="string">'ni'</span>).name;</span><br></pre></td></tr></table></figure><p><strong>理解<code>private</code></strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// private属性只能在类Animal中使用。</span></span><br><span class="line"><span class="comment">// ts中如果有private和protected成员，一个类型的private和protected成员，另一个类型也必须有，并且源自同一个定义，这两个类型才是兼容的。</span></span><br><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">private</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123; <span class="keyword">this</span>.name = theName; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Rhino <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123; <span class="keyword">super</span>(<span class="string">"Rhino"</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Employee &#123;</span><br><span class="line">    <span class="keyword">private</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123; <span class="keyword">this</span>.name = theName; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里其实有个类型推论。</span></span><br><span class="line"><span class="keyword">let</span> animal = <span class="keyword">new</span> Animal(<span class="string">"Goat"</span>);</span><br><span class="line"><span class="keyword">let</span> rhino = <span class="keyword">new</span> Rhino();</span><br><span class="line"><span class="keyword">let</span> employee = <span class="keyword">new</span> Employee(<span class="string">"Bob"</span>);</span><br><span class="line"></span><br><span class="line">animal = rhino;</span><br><span class="line">animal = employee; <span class="comment">// Error: 'Animal' and 'Employee' are not compatible</span></span><br></pre></td></tr></table></figure><p><strong>理解<code>protected</code></strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 和private基本差不多，只不过私有成员不能在子类中访问，但是protected成员可以在子类中访问。</span></span><br><span class="line"><span class="comment">// 看一个栗子</span></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  <span class="keyword">protected</span> name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123; <span class="keyword">this</span>.name = theName; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Employee <span class="keyword">extends</span> Person &#123;</span><br><span class="line">  <span class="keyword">private</span> depart: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, depart: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">    <span class="keyword">this</span>.depart = depart;</span><br><span class="line">  &#125;</span><br><span class="line">  getElevatorPitch() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hello, my name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> and I work in <span class="subst">$&#123;<span class="keyword">this</span>.depart&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> zsy = <span class="keyword">new</span> Employee(<span class="string">"zsy"</span>, <span class="string">"R &amp; d"</span>);</span><br><span class="line"><span class="keyword">let</span> xiaolaji = <span class="keyword">new</span> Person(<span class="string">"xiaolaji"</span>, <span class="string">"R &amp; d"</span>);<span class="comment">// err. 类"Person"是受保护的。</span></span><br></pre></td></tr></table></figure><p><code>readonly</code>用来设置一些只读属性</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person0&#123;</span><br><span class="line">    readonly name:<span class="built_in">string</span></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> john = <span class="keyword">new</span> Person0(<span class="string">'john'</span>);</span><br><span class="line"><span class="comment">// 只读的类就不能修改了,下面就会报error了</span></span><br><span class="line">john.name = <span class="string">'xxx'</span>;</span><br></pre></td></tr></table></figure><h4 id="存取器"><a href="#存取器" class="headerlink" title="存取器"></a>存取器</h4><p><strong><code>set</code>和<code>get</code></strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="keyword">class</span> Animal0 &#123;</span><br><span class="line">  <span class="keyword">private</span> _name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>._name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> move(distance: <span class="built_in">number</span> = <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>._name&#125;</span> moved <span class="subst">$&#123;distance&#125;</span> m`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> name() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> name(newName: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>._name = newName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Hippo <span class="keyword">extends</span> Animal0 &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="string">"Hippo"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hh = <span class="keyword">new</span> Hippo();</span><br><span class="line"><span class="built_in">console</span>.log(hh.name);</span><br></pre></td></tr></table></figure><p>我们编译的时候将目标设置为<code>ES5</code>,采用下面这个命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tsc index.ts --target es5</span><br><span class="line">node index.js</span><br></pre></td></tr></table></figure><p><strong>类的静态成员</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 其实就是编译后把static成员直接赋值给了Grid。</span></span><br><span class="line"><span class="keyword">class</span> Grid &#123;</span><br><span class="line">  <span class="keyword">static</span> origin = &#123; x: <span class="number">0</span>, y: <span class="number">0</span> &#125;;</span><br><span class="line">  scale: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">scale: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.scale = scale;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  claculateDistanceFromOrigin(point: &#123; x: <span class="built_in">number</span>, y: <span class="built_in">number</span> &#125;) &#123;</span><br><span class="line">    <span class="keyword">let</span> xDist = point.x - Grid.origin.x;</span><br><span class="line">    <span class="keyword">let</span> yDist = point.y - Grid.origin.y;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(xDist * xDist + yDist * yDist) * <span class="keyword">this</span>.scale;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> grid1 = <span class="keyword">new</span> Grid(<span class="number">1.0</span>);</span><br><span class="line"><span class="keyword">let</span> grid2 = <span class="keyword">new</span> Grid(<span class="number">5.0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(Grid.origin);<span class="comment">// &#123; x: 0, y: 0 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(grid1.claculateDistanceFromOrigin(&#123; x: <span class="number">3</span>, y: <span class="number">4</span> &#125;));</span><br><span class="line"><span class="built_in">console</span>.log(grid2.claculateDistanceFromOrigin(&#123; x: <span class="number">3</span>, y: <span class="number">4</span> &#125;));</span><br></pre></td></tr></table></figure><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><blockquote><p>抽象类作为其他派生类的基类使用，他们是不能被实例化的。</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">abstract</span> makeSound(): <span class="built_in">void</span> </span><br><span class="line">    move(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'raoming the earth...'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类的高级技巧"><a href="#类的高级技巧" class="headerlink" title="类的高级技巧"></a>类的高级技巧</h4><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p><strong>基本示例</strong></p><p><code>demo</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myAdd = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>添加参数类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">unction add (x:<span class="built_in">number</span>,y:<span class="built_in">number</span>):<span class="built_in">number</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 也可以变量类型，其实不设的话调用的时候也可以推断出来的</span></span><br><span class="line"><span class="keyword">let</span> myAdd:<span class="function">(<span class="params">baseValue:<span class="built_in">number</span>,increValue:<span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="function"><span class="keyword">function</span>(<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span></span>):<span class="title">number</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>this</code></strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> deck = &#123;</span><br><span class="line">  suits: [<span class="string">"hearts"</span>, <span class="string">"spades"</span>, <span class="string">"clubs"</span>, <span class="string">"diamonds"</span>],</span><br><span class="line">  cards: <span class="built_in">Array</span>(<span class="number">52</span>),</span><br><span class="line">  createCardPicker: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// return function() &#123;</span></span><br><span class="line">    <span class="comment">// 这个地方改为箭头函数，因为他是函数创建的时候的this值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> pickedCard = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">52</span>);</span><br><span class="line">      <span class="keyword">let</span> pickSuit = <span class="built_in">Math</span>.floor(pickedCard / <span class="number">13</span>);</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment">//   这里this在ts里面会被推断为any,即suit: any</span></span><br><span class="line">        suits: <span class="keyword">this</span>.suits[pickSuit],</span><br><span class="line">        card: pickedCard % <span class="number">13</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> cardPicker = deck.createCardPicker();</span><br><span class="line"><span class="keyword">let</span> pickedCard = cardPicker();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`card: <span class="subst">$&#123;pickedCard.card&#125;</span> of <span class="subst">$&#123;pickedCard.suits&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><p><strong>解决上面的<code>suits</code>为<code>any</code>的问题</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Deck &#123;</span><br><span class="line">    suits: <span class="built_in">string</span>[];</span><br><span class="line">    cards: <span class="built_in">number</span>[];</span><br><span class="line">    createCardPicker(<span class="keyword">this</span>: Deck): <span class="function"><span class="params">()</span> =&gt;</span> Card;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> deck: Deck = &#123;</span><br><span class="line">    suits: [<span class="string">"hearts"</span>, <span class="string">"spades"</span>, <span class="string">"clubs"</span>, <span class="string">"diamonds"</span>],</span><br><span class="line">    cards: <span class="built_in">Array</span>(<span class="number">52</span>),</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> The function now explicitly specifies that its callee must be of type Deck</span></span><br><span class="line">    createCardPicker: <span class="function"><span class="keyword">function</span>(<span class="params"><span class="keyword">this</span>: Deck</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> pickedCard = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">52</span>);</span><br><span class="line">            <span class="keyword">let</span> pickedSuit = <span class="built_in">Math</span>.floor(pickedCard / <span class="number">13</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;suit: <span class="keyword">this</span>.suits[pickedSuit], card: pickedCard % <span class="number">13</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>this</code>在回调函数里面</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ts里面的this参数作为"伪"参数在函数参数列表的第一项</span></span><br><span class="line"><span class="keyword">interface</span> UIElement &#123;</span><br><span class="line">  <span class="comment">// this: void 表示onclick希望是个不使用this的函数。</span></span><br><span class="line">  addClickListener(onclick: <span class="function">(<span class="params"><span class="keyword">this</span>: <span class="built_in">void</span>, e: Event</span>) =&gt;</span> <span class="built_in">void</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Handler &#123;</span><br><span class="line"></span><br><span class="line">  info: <span class="built_in">string</span>;</span><br><span class="line">  onClickBad(<span class="keyword">this</span>: Handler, e: Event) &#123;</span><br><span class="line">      <span class="keyword">this</span>.info = e.type;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> h = <span class="keyword">new</span> Handler();</span><br><span class="line"><span class="keyword">let</span> uiElement: UIElement = &#123;</span><br><span class="line">  addClickListener() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">uiElement.addClickListener(h.onClickBad); <span class="comment">// error</span></span><br></pre></td></tr></table></figure><p><code>arrow</code>函数在<code>ts</code>中依然可以解决<code>this</code>的坑</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Handler &#123;</span><br><span class="line">    info: <span class="built_in">string</span>;</span><br><span class="line">    onClickGood(<span class="keyword">this</span>: <span class="built_in">void</span>, e: Event) &#123;</span><br><span class="line">        <span class="comment">// can't use `this` here because it's of type void!</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'clicked!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> h = <span class="keyword">new</span> Handler();</span><br><span class="line">uiElement.addClickListener(h.onClickGood);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果要在函数里使用this，就用箭头函数，因为箭头函数的this其实是外部的this</span></span><br><span class="line"><span class="keyword">class</span> Handler &#123;</span><br><span class="line">    info: <span class="built_in">string</span>;</span><br><span class="line">    onClickGood = <span class="function">(<span class="params">e: Event</span>) =&gt;</span> &#123; <span class="keyword">this</span>.info = e.message &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>重载</strong></p><p><code>ts</code>中的方法重载</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> suits = [<span class="string">"hearts"</span>, <span class="string">"spades"</span>, <span class="string">"clubs"</span>, <span class="string">"diamonds"</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pickCard</span>(<span class="params">x: &#123;suit: <span class="built_in">string</span>; card: <span class="built_in">number</span>; &#125;[]</span>): <span class="title">number</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pickCard</span>(<span class="params">x: <span class="built_in">number</span></span>): </span>&#123;suit: <span class="built_in">string</span>; card: <span class="built_in">number</span>; &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pickCard</span>(<span class="params">x</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> x == <span class="string">"object"</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> pickedCard = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * x.length);</span><br><span class="line">        <span class="keyword">return</span> pickedCard;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Otherwise just let them pick the card</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x == <span class="string">"number"</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> pickedSuit = <span class="built_in">Math</span>.floor(x / <span class="number">13</span>);</span><br><span class="line">        <span class="keyword">return</span> &#123; suit: suits[pickedSuit], card: x % <span class="number">13</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myDeck = [&#123; suit: <span class="string">"diamonds"</span>, card: <span class="number">2</span> &#125;, &#123; suit: <span class="string">"spades"</span>, card: <span class="number">10</span> &#125;, &#123; suit: <span class="string">"hearts"</span>, card: <span class="number">4</span> &#125;];</span><br><span class="line"><span class="keyword">let</span> pickedCard1 = myDeck[pickCard(myDeck)];</span><br><span class="line">alert(<span class="string">"card: "</span> + pickedCard1.card + <span class="string">" of "</span> + pickedCard1.suit);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pickedCard2 = pickCard(<span class="number">15</span>);</span><br><span class="line">alert(<span class="string">"card: "</span> + pickedCard2.card + <span class="string">" of "</span> + pickedCard2.suit);</span><br></pre></td></tr></table></figure><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>基本示例</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回任何传入的值，T同时用来捕获用户的传入类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg:T</span>):<span class="title">T</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里适用于多个类型，不会像any一样丢失类型</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回任何传入它的值,T同来捕获用户的传入类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg:T</span>):<span class="title">T</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 编译器识别不了的话则可以使用这种形式</span></span><br><span class="line"><span class="keyword">let</span> output0 = identity&lt;<span class="built_in">string</span>&gt;(<span class="string">'mystring'</span>)</span><br><span class="line"><span class="comment">// 这里编译器会自动帮我们推断出传入的值的类型</span></span><br><span class="line"><span class="keyword">let</span> output = identity(<span class="string">'Mystring'</span>)</span><br></pre></td></tr></table></figure><p><strong>推荐</strong>的第二种写法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loginingIndetity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg:T[]</span>):<span class="title">T</span>[]</span>&#123;</span><br><span class="line">  <span class="comment">// 如果arg:T这里就不会有length属性，我们将其修改为T[]</span></span><br><span class="line">   <span class="built_in">console</span>.log(arg.length);</span><br><span class="line">   <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>声明泛型变量</strong>的两种方式</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这表示myIdentity和myIdentity2都是一个接受类型为T的arg参数，并且返回值类型为T的函数</span></span><br><span class="line"><span class="keyword">let</span> myIdentity: &lt;T&gt;<span class="function">(<span class="params">arg: T</span>) =&gt;</span> T = identity;</span><br><span class="line"><span class="keyword">let</span> myIdentity2: &#123; &lt;T&gt;(arg: T): T &#125; = identity;</span><br></pre></td></tr></table></figure><p><strong>泛型和接口</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> G&lt;T&gt; &#123;</span><br><span class="line">  (arg: T): T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myIdentity3: G&lt;<span class="built_in">number</span>&gt; = identity;</span><br></pre></td></tr></table></figure><p>这样的好处在于我们不用在接口里面去描述一个泛型函数了。</p><p><strong>泛型类</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> GenricNumber&lt;T&gt; &#123;</span><br><span class="line">  zeroValue: T;</span><br><span class="line">  add: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 会自动推导出add函数的参数和返回制类型</span></span><br><span class="line"><span class="keyword">let</span> myGenericNumber = <span class="keyword">new</span> GenricNumber&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line">myGenericNumber.zeroValue = <span class="number">0</span>;</span><br><span class="line">myGenericNumber.add = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> stringNumberic = <span class="keyword">new</span> GenricNumber&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">stringNumberic.zeroValue = <span class="string">""</span>;</span><br><span class="line">stringNumberic.add = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(stringNumberic.add(stringNumberic.zeroValue, <span class="string">"test"</span>));</span><br></pre></td></tr></table></figure><p>泛型约束</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Lengthwise &#123;</span><br><span class="line">  length: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Lengthwise</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg.length);</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以用泛型约束泛型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProperty</span>&lt;<span class="title">T</span>, <span class="title">K</span> <span class="title">extends</span> <span class="title">keyof</span> <span class="title">T</span>&gt;(<span class="params">obj: T, key: K</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> obj[key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = &#123;a: <span class="number">1</span>, b: <span class="number">2</span>, c: <span class="number">3</span>, d: <span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line">getProperty(x, <span class="string">"a"</span>);</span><br><span class="line">getProperty(x, <span class="string">"z"</span>);<span class="comment">// error</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;类&quot;&gt;&lt;a href=&quot;#类&quot; class=&quot;headerlink&quot; title=&quot;类&quot;&gt;&lt;/a&gt;类&lt;/h3&gt;&lt;p&gt;类的一些基本示例:&lt;/p&gt;
&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="ts" scheme="http://yoursite.com/tags/ts/"/>
    
  </entry>
  
</feed>
