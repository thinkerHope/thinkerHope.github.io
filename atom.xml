<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>记录我的点滴</title>
  
  <subtitle>Yu Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-06T07:40:46.074Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>boygreen_Yu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>EventLoop遇上Promise</title>
    <link href="http://yoursite.com/2020/03/05/EventLoop%E9%81%87%E4%B8%8APromise/"/>
    <id>http://yoursite.com/2020/03/05/EventLoop遇上Promise/</id>
    <published>2020-03-05T13:42:11.000Z</published>
    <updated>2020-03-06T07:40:46.074Z</updated>
    
    <content type="html"><![CDATA[<p>面试时的<code>EventLoop/Promise</code>难度进阶</p><h4 id="版本一：得心应手版"><a href="#版本一：得心应手版" class="headerlink" title="版本一：得心应手版"></a>版本一：得心应手版</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="number">1</span>) </span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="number">2</span>) </span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><strong>考察点</strong>：了解宏任务(<code>marcotask</code>)微任务</p><h4 id="版本二：游刃有余版"><a href="#版本二：游刃有余版" class="headerlink" title="版本二：游刃有余版"></a>版本二：游刃有余版</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="number">1</span>) </span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"><span class="keyword">let</span> a=<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="number">3</span>) </span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="number">4</span>) </span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p><strong>考察点</strong>：Promise的理解程度</p><h4 id="版本三：炉火纯青版"><a href="#版本三：炉火纯青版" class="headerlink" title="版本三：炉火纯青版"></a>版本三：炉火纯青版</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"promise1"</span>)</span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"then11"</span>)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"promise2"</span>)</span><br><span class="line">        resolve()</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"then21"</span>)</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"then23"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"then12"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;面试时的&lt;code&gt;EventLoop/Promise&lt;/code&gt;难度进阶&lt;/p&gt;
&lt;h4 id=&quot;版本一：得心应手版&quot;&gt;&lt;a href=&quot;#版本一：得心应手版&quot; class=&quot;headerlink&quot; title=&quot;版本一：得心应手版&quot;&gt;&lt;/a&gt;版本一：得心应手版&lt;/h4
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>时间锁</title>
    <link href="http://yoursite.com/2020/03/03/%E6%97%B6%E9%97%B4%E9%94%81/"/>
    <id>http://yoursite.com/2020/03/03/时间锁/</id>
    <published>2020-03-03T14:47:30.000Z</published>
    <updated>2020-03-03T15:07:45.114Z</updated>
    
    <content type="html"><![CDATA[<h2 id="时间锁修复bug"><a href="#时间锁修复bug" class="headerlink" title="时间锁修复bug"></a>时间锁修复bug</h2><blockquote><p>有时候2行代码能简单处理的问题就不用大费周章地瞎搞了</p></blockquote><h4 id="点击穿透"><a href="#点击穿透" class="headerlink" title="点击穿透"></a>点击穿透</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下方法在 IOS 下无效，而且不建议用异步的定时器</span></span><br><span class="line"><span class="keyword">const</span> handleAddClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> handleTouchStart = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> handleTouchEnd = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> btnAddRef.current.addEventListener(<span class="string">'click'</span>, handleAddClick), <span class="number">300</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span>  btnAddRef.current.removeEventListener(<span class="string">'click'</span>, handleAddClick)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;div onTouchStart=&#123;handleTouchStart&#125; onTouchEnd=&#123;handleTouchEnd&#125;&gt;</span><br><span class="line">  &lt;div</span><br><span class="line">    ref=&#123;btnRef&#125;</span><br><span class="line">    onClick=&#123;e =&gt; handleClick(e)&#125;   </span><br><span class="line">  &gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间锁的解决方案</span></span><br><span class="line"><span class="keyword">const</span> [lockTime, setLockTime] = useState(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleAddClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> now = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">  <span class="keyword">if</span> (now - lockTime &lt; <span class="number">300</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleTouchStart = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  setLockTime(+<span class="keyword">new</span> <span class="built_in">Date</span>())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多指触屏"><a href="#多指触屏" class="headerlink" title="多指触屏"></a>多指触屏</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;时间锁修复bug&quot;&gt;&lt;a href=&quot;#时间锁修复bug&quot; class=&quot;headerlink&quot; title=&quot;时间锁修复bug&quot;&gt;&lt;/a&gt;时间锁修复bug&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;有时候2行代码能简单处理的问题就不用大费周章地瞎搞了&lt;/p&gt;
&lt;/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>hammerJS</title>
    <link href="http://yoursite.com/2020/03/01/hammerJS/"/>
    <id>http://yoursite.com/2020/03/01/hammerJS/</id>
    <published>2020-03-01T03:03:40.000Z</published>
    <updated>2020-03-01T09:15:35.912Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS手势框架-——-Hammer-js"><a href="#JS手势框架-——-Hammer-js" class="headerlink" title="JS手势框架 —— Hammer.js"></a>JS手势框架 —— Hammer.js</h2><p><img src="https://thinkerhope.github.io/2020/03/01/hammerJS/hammer.jpg" alt></p><h4 id="hammer-js简介"><a href="#hammer-js简介" class="headerlink" title="hammer.js简介"></a>hammer.js简介</h4><p><code>hammerJS</code>是一个开源的，轻量级的触屏设备<code>javascript</code>手势库，它可以在不需要依赖其他东西的情况下识别触摸，鼠标事件。允许同时监听多个手势、自定义识别器，也可以识别滑动方向。</p><h4 id="事件介绍"><a href="#事件介绍" class="headerlink" title="事件介绍"></a>事件介绍</h4><p><img src="https://thinkerhope.github.io/2020/03/01/hammerJS/hammerEvent.png" alt></p><p>1、<code>Rotate</code>事件：在指定的<code>dom</code>区域内，当两个手指或更多手指成圆型旋转时触发（就像两个手指拧螺丝一样）。该事件分别对以下事件进行监听并处理：</p><p><code>Rotatestart</code>：旋转开始；</p><p><code>Rotatemove</code>：旋转过程；</p><p><code>Rotateend</code>：旋转结束；</p><p>Rotatecancel：旋转取消</p><p>2、<code>Pinch</code>事件：在指定的dom区域内，两个手指（默认为两个手指，多指触控需要单独设置）或多个手指相对（越来越近）移动或相向（越来越远）移动时事件。该事件事以分别对以下事件进行监听并处理：</p><p><code>Pinchstart</code>：多点触控开始；</p><p><code>Pinchmove</code>：多点触控过程；</p><p><code>Pinchend</code>：多点触控结束；</p><p><code>Pinchcancel</code>：多点触控取消；</p><p><code>Pinchin</code>：多点触控时两手指距离越来越近；</p><p><code>Pinchout</code>：多点触控时两手指距离越来越远</p><p>3、<code>Press</code>事件：在指定的dom区域内触屏版本的点击事件，这个事件相当于PC端的<code>Click</code>事件，该不能包含任何的移动，最小按压时间为500毫秒，常用于我们在手机上用的“复制、粘贴”等功能。</p><p><code>Pressup</code>：点击事件离开时触发</p><p>4、<code>Pan</code>事件：在指定的dom区域内，一个手指放下并移动事件，即触屏中的拖动事件。这个事件在屏触开发中比较常用，如：左拖动、右拖动等，如手要上使用QQ时向右滑动出现功能菜单的效果。该事件还可以分别对以下事件进行监听并处理：</p><p><code>Panstart</code>：拖动开始；</p><p><code>Panmove</code>：拖动过程；</p><p><code>Panend</code>：拖动结束；</p><p><code>Pancancel</code>：拖动取消；</p><p><code>Panleft</code>：向左拖动；</p><p><code>Panright</code>：向右拖动；</p><p><code>Panup</code>：向上拖动；</p><p><code>Pandown</code>：向下拖动 </p><p>5、<code>Tap</code>事件：在指定的dom区域内，一个手指轻拍或点击时触发该事件(类似PC端的click)。该事件最大点击时间为250毫秒，如果超过250毫秒则按Press事件进行处理。</p><p>6、<code>Swipe</code>事件：在指定的dom区域内，一个手指快速的在触屏上滑动。即我们平时用到最多的滑动事件。</p><p><code>Swipeleft</code>：向左滑动；</p><p><code>Swiperight</code>：向右滑动；</p><p><code>Swipeup</code>：向上滑动；</p><p><code>Swipedown</code>：向下滑动</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><blockquote><p>安装</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hammerjs</span><br></pre></td></tr></table></figure><blockquote><p>基本使用</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> square = <span class="built_in">document</span>.querySelector(<span class="string">'.square'</span>);</span><br><span class="line"><span class="keyword">var</span> hammer = <span class="keyword">new</span> Hammer(square);</span><br><span class="line"><span class="comment">// 若要允许识别器识别垂直方位的 pan 和 swipe</span></span><br><span class="line"><span class="comment">// hammertime.get('pan').set(&#123; direction: Hammer.DIRECTION_VERTICAL &#125;)</span></span><br><span class="line">mc.get(<span class="string">"pan"</span>).set(&#123; <span class="attr">direction</span>: Hammer.DIRECTION_ALL &#125;);</span><br><span class="line">hammer.on(<span class="string">'pan'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.target.classList.toggle(<span class="string">'expand'</span>, i &lt; <span class="number">10</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另建议加上如下meta标签，防止doubletap 或 pinch 缩放了viewport：</span></span><br><span class="line"><span class="comment">// &lt;meta name="viewport" content="user-scalable=no, width=device-width, initial-scale=1, maximum-scale=1"&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JS手势框架-——-Hammer-js&quot;&gt;&lt;a href=&quot;#JS手势框架-——-Hammer-js&quot; class=&quot;headerlink&quot; title=&quot;JS手势框架 —— Hammer.js&quot;&gt;&lt;/a&gt;JS手势框架 —— Hammer.js&lt;/h2&gt;&lt;p&gt;&lt;i
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>EventEmitter</title>
    <link href="http://yoursite.com/2020/01/20/EventEmitter%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    <id>http://yoursite.com/2020/01/20/EventEmitter组件通信/</id>
    <published>2020-01-20T09:47:51.000Z</published>
    <updated>2020-03-03T14:45:29.078Z</updated>
    
    <content type="html"><![CDATA[<h2 id="EventEmitter"><a href="#EventEmitter" class="headerlink" title="EventEmitter"></a>EventEmitter</h2><h4 id="非嵌套关系的组件实现通信"><a href="#非嵌套关系的组件实现通信" class="headerlink" title="非嵌套关系的组件实现通信"></a>非嵌套关系的组件实现通信</h4><blockquote><p>在<code>componentDidMount</code>事件中,如果组件挂载完成,再订阅事件;在组件卸载的时候,在<code>componentWillUnmount</code>事件中取消事件的订阅; 以常用的发布/订阅模式举例,借用<code>Node.js Events</code>模块的浏览器版实现</p></blockquote><p>实现这样一个功能: 点击<code>List2</code>中的一个按钮,改变<code>List1</code>中的信息显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install events --save</span><br></pre></td></tr></table></figure><p>在<code>src</code>下新建一个<code>util</code>目录里面建一个<code>events.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; EventEmitter &#125; <span class="keyword">from</span> <span class="string">'events'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> EventEmitter();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// list1.jsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> emitter <span class="keyword">from</span> <span class="string">'../util/events'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            message: <span class="string">'List1'</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        <span class="comment">// 组件装载完成以后声明一个自定义事件</span></span><br><span class="line">        <span class="keyword">this</span>.eventEmitter = emitter.addListener(<span class="string">'changeMessage'</span>, (message) =&gt; &#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                message,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    componentWillUnmount() &#123;</span><br><span class="line">        emitter.removeListener(<span class="keyword">this</span>.eventEmitter);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &#123;<span class="keyword">this</span>.state.message&#125;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default List;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List2.jsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> emitter <span class="keyword">from</span> <span class="string">'../util/events'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List2</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    handleClick = <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">        emitter.emit(<span class="string">'changeMessage'</span>, message);</span><br><span class="line">    &#125;;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;button onClick=&#123;<span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>, <span class="string">'List2'</span>)&#125;&gt;点击我改变List1组件中显示信息&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// APP.jsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> List1 <span class="keyword">from</span> <span class="string">'./components/List1'</span>;</span><br><span class="line"><span class="keyword">import</span> List2 <span class="keyword">from</span> <span class="string">'./components/List2'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;List1 /&gt;</span><br><span class="line">                &lt;List2 /&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>自定义事件是典型的发布订阅模式,通过向事件对象上添加监听器和触发事件来实现组件之间的通信</p><p>（2）辅助 <code>toolbox</code> 实现 <code>create</code> 和 <code>destory</code></p><p>需求是一个长按弹出的 <code>toolbox</code> 框框，要实现点击其它非 toolbox 区域框框消失的功能</p><p>之前的方式: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// utils/toolbox.js</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ToolboxCtrl</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">  create(args) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    render(</span><br><span class="line">      &lt;<span class="keyword">this</span>.tb </span><br><span class="line">        &#123;...props&#125;</span><br><span class="line">        handleClickAway=&#123;() =&gt; <span class="keyword">this</span>.destory()&#125; </span><br><span class="line">      /&gt;, </span><br><span class="line">      div</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  destory() &#123;&#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// com/toolbox.js</span></span><br><span class="line"><span class="keyword">const</span> ToolBox = <span class="function">(<span class="params">&#123; handleClickAway &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> ref = useClickAway(<span class="function"><span class="params">()</span> =&gt;</span> handleClickAway())</span><br><span class="line">  <span class="keyword">const</span> handleItemClick = <span class="function"><span class="params">e</span> =&gt;</span> handleClickAway()</span><br><span class="line">  <span class="keyword">return</span> (&lt;div ref=&#123;ref&#125; onClick=&#123;e =&gt; handleItemClick(e)&#125;&gt;...&lt;/div&gt;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>useClickAway</code> 是自定义的 <code>Hooks</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">useClickAway</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    onClickAway, </span></span></span><br><span class="line"><span class="function"><span class="params">    dom, </span></span></span><br><span class="line"><span class="function"><span class="params">    eventName = <span class="string">'click'</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">const</span> element = useRef()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> handler = useCallback(</span><br><span class="line">        event =&gt; &#123;</span><br><span class="line">          <span class="keyword">const</span> targetElement = <span class="keyword">typeof</span> dom === <span class="string">'function'</span> ? dom() : dom</span><br><span class="line">          <span class="keyword">const</span> el = targetElement || element.current</span><br><span class="line">          <span class="keyword">if</span> (!el || el.contains(event.target)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          onClickAway(event)</span><br><span class="line">        &#125;,</span><br><span class="line">        [element.current, onClickAway, dom],</span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">      useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">document</span>.addEventListener(eventName, handler)</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">document</span>.removeEventListener(eventName, handler)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, [eventName, handler])</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> element</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般情况下没有问题…但是中间遇到很奇怪的bug…原因没有研究出来</p><p>最后还是用 <code>eventEmitter</code> 解决的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// com/toolbox.js</span></span><br><span class="line"><span class="keyword">const</span> ToolBox = <span class="function">(<span class="params">&#123; handleClickAway &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    emitter.on(<span class="string">'toolbox.destory'</span>, handleClickAway)</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> emitter.off(<span class="string">'toolbox.destory'</span>, handleClickAway)</span><br><span class="line">  &#125;, [])</span><br><span class="line">  <span class="keyword">const</span> ref = useClickAway(<span class="function"><span class="params">()</span> =&gt;</span> handleClickAway())</span><br><span class="line">  <span class="keyword">const</span> handleItemClick = <span class="function"><span class="params">e</span> =&gt;</span> handleClickAway()</span><br><span class="line">  <span class="keyword">return</span> (&lt;div ref=&#123;ref&#125; onClick=&#123;e =&gt; handleItemClick(e)&#125;&gt;...&lt;/div&gt;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在点击某个元素的时候, 以实现 useClickAway 的效果</span></span><br><span class="line">emitter.emit(<span class="string">'toolbox.destory'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;EventEmitter&quot;&gt;&lt;a href=&quot;#EventEmitter&quot; class=&quot;headerlink&quot; title=&quot;EventEmitter&quot;&gt;&lt;/a&gt;EventEmitter&lt;/h2&gt;&lt;h4 id=&quot;非嵌套关系的组件实现通信&quot;&gt;&lt;a href=&quot;#非
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>useEffect深入学习</title>
    <link href="http://yoursite.com/2020/01/14/useEffect%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2020/01/14/useEffect深入学习/</id>
    <published>2020-01-13T16:17:38.000Z</published>
    <updated>2020-01-13T16:17:38.984Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>setTimeout和Promise看eventloop</title>
    <link href="http://yoursite.com/2020/01/04/setTimeout%E5%92%8CPromise%E7%9C%8Beventloop/"/>
    <id>http://yoursite.com/2020/01/04/setTimeout和Promise看eventloop/</id>
    <published>2020-01-04T03:05:57.000Z</published>
    <updated>2020-01-04T04:51:07.454Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://thinkerhope.github.io/2020/01/04/setTimeout%E5%92%8CPromise%E7%9C%8Beventloop/eloop.png" alt="eloop"></p><p>大家都知道<code>JS</code>是单线程的。设计的原因就是因为简单…</p><p>举了个栗子说，两个线程，有一个线程在添加一个<code>dom</code>元素 <code>a</code>，还有一个线程在删除一个<code>dom</code>元素<code>a</code>，那么浏览器就需要决策该听谁的，这样的话就增加了语言设计的复杂性。</p><h4 id="JS并非只有一个线程，而只是主线程是单线程的"><a href="#JS并非只有一个线程，而只是主线程是单线程的" class="headerlink" title="JS并非只有一个线程，而只是主线程是单线程的"></a><strong>JS并非只有一个线程，而只是主线程是单线程的</strong></h4><p>HTML5有一个api，webworker，利用它，能帮助我们创建<strong>子线程</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.html</span></span><br><span class="line"><span class="keyword">let</span> worker = <span class="keyword">new</span> Worker(<span class="string">'./worker.js'</span>);</span><br><span class="line"><span class="comment">//把内容发给 工作线程，工作线程可以把结果丢回来</span></span><br><span class="line"></span><br><span class="line">worker.postMessage(<span class="string">'向你雇佣的工人发送指令'</span>);</span><br><span class="line"></span><br><span class="line">worker.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.data); <span class="comment">//数据在data属性下</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//worker.js</span></span><br><span class="line"><span class="built_in">window</span>.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(e);</span><br><span class="line">  <span class="keyword">this</span>.postMessage(<span class="string">'你的工人告诉你他收到命令开始干活了!'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：他和<code>js</code>主线程不是平级的，主线程可以控制<code>webworker</code>，<code>webworker</code>不能操作<code>dom</code>，不能获取<code>document</code>以及<code>window</code>。</p><p>既然是单线程，那<code>Js</code>是怎么处理异步任务呢？停下来等待的话，CPU资源利用率得有多低啊…</p><h4 id="异步任务以及事件循环"><a href="#异步任务以及事件循环" class="headerlink" title="异步任务以及事件循环"></a><strong>异步任务以及事件循环</strong></h4><p>为了解决这个问题，<code>Javascript</code>将任务的执行方式分为两种：<code>同步/synchronous</code> 和 <code>异步/asynchronous</code></p><p>在浏览器内核中，除了<code>JS线程</code>和<code>用户界面后端/UI Backend线程</code>，还有一些其它的线程，比如说<code>浏览器事件触发线程(对应上图的events)</code>、<code>定时器触发线程(timing，我的理解：在stack中如果遇到setTimeout的异步任务，就交给WebAPIs，定时到了，该线程就触发，把回调返回，推入到宏任务队列)</code>、<code>异步HTTP请求线程(ajax)</code>，而异步任务就是分发给这些线程来处理的。</p><h4 id="EventLoop-事件的循环检测机制"><a href="#EventLoop-事件的循环检测机制" class="headerlink" title="*EventLoop *- 事件的循环检测机制"></a>*<em>EventLoop *</em>- 事件的循环检测机制</h4><p>事件环就是<code>Javascript</code>主线程从<code>callback queue</code>中不断读取事件到执行栈(<code>stack</code>)的这种循环的过程。</p><h4 id="从setTimeout和Promise出发深入了解一下同步异步的微任务宏任务"><a href="#从setTimeout和Promise出发深入了解一下同步异步的微任务宏任务" class="headerlink" title="从setTimeout和Promise出发深入了解一下同步异步的微任务宏任务"></a><strong>从<code>setTimeout</code>和<code>Promise</code>出发深入了解一下同步异步的微任务宏任务</strong></h4><p><strong>单独使用的执行模式</strong></p><p>1.最初的试探</p><p>执行代码，<code>Promise</code>的基本使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    resolve(<span class="number">3</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行</span></span><br><span class="line">fn().then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data))</span><br></pre></td></tr></table></figure><p>以上代码，输出结果为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="comment">// 同步</span></span><br><span class="line"><span class="number">2</span> <span class="comment">// 同步</span></span><br><span class="line"><span class="number">4</span> <span class="comment">// 同步</span></span><br><span class="line"><span class="number">3</span> <span class="comment">// 异步</span></span><br></pre></td></tr></table></figure><p>注意 <code>new Promise()</code>是同步方法，<code>resolve</code>才是异步方法。<br>此外，上面的方法，可以有下面这种写法，效果等同，主要是把<code>Promise</code>精简了一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">let</span> a = <span class="built_in">Promise</span>.resolve(<span class="number">3</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行</span></span><br><span class="line">fn().then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data))</span><br></pre></td></tr></table></figure><p>因为现在讨论的是<code>Promise</code>的异步功能，所以下面均使用第二种写法的<code>Promise</code></p><p>2.多个同级<code>Promise</code></p><p>编辑器中，输入以下代码，多个同级的单层的<code>Promise</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'同步-0.1'</span>)</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'P-1.1'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'P-1.2'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'P-1.3'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'同步-0.2'</span>)</span><br></pre></td></tr></table></figure><p>则会依次输出以下打印，毫无疑问的结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">同步<span class="number">-0.1</span></span><br><span class="line">同步<span class="number">-0.2</span></span><br><span class="line">P<span class="number">-1.1</span></span><br><span class="line">P<span class="number">-1.2</span></span><br><span class="line">P<span class="number">-1.3</span></span><br></pre></td></tr></table></figure><p>3.<code>Promise</code>套<code>Promise</code></p><p>复杂一点的栗子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'同步-0.1'</span>)</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'P-1.1'</span>)</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 新加行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'P-2.1'</span>) <span class="comment">// 新加行</span></span><br><span class="line">  &#125;) <span class="comment">// 新加行</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'P-1.2'</span>)</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 新加行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'P-2.2'</span>) <span class="comment">// 新加行</span></span><br><span class="line">  &#125;) <span class="comment">// 新加行</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'P-1.3'</span>)</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 新加行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'P-2.3'</span>) <span class="comment">// 新加行</span></span><br><span class="line">  &#125;) <span class="comment">// 新加行</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'同步-0.2'</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">同步<span class="number">-0.1</span></span><br><span class="line">同步<span class="number">-0.2</span></span><br><span class="line">P<span class="number">-1.1</span></span><br><span class="line">P<span class="number">-1.2</span></span><br><span class="line">P<span class="number">-1.3</span></span><br><span class="line">P<span class="number">-2.1</span></span><br><span class="line">P<span class="number">-2.2</span></span><br><span class="line">P<span class="number">-2.3</span></span><br></pre></td></tr></table></figure><p>可见，多层<code>Promise</code>是一层一层执行的。</p><p>4.为了最终确认，进行最后一次验证，在第一个<code>Promise</code>里面多加一层：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'同步-0.1'</span>)</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'P-1.1'</span>)</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'P-2.1'</span>)</span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 新加行</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'P-3.1'</span>) <span class="comment">// 新加行</span></span><br><span class="line">    &#125;) <span class="comment">// 新加行</span></span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 新加行</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'P-3.2'</span>) <span class="comment">// 新加行</span></span><br><span class="line">    &#125;) <span class="comment">// 新加行</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'P-1.2'</span>)</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'P-2.2'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'P-1.3'</span>)</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'P-2.3'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'同步-0.2'</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">同步<span class="number">-0.1</span></span><br><span class="line">同步<span class="number">-0.2</span></span><br><span class="line">P<span class="number">-1.1</span></span><br><span class="line">P<span class="number">-1.2</span></span><br><span class="line">P<span class="number">-1.3</span></span><br><span class="line">P<span class="number">-2.1</span></span><br><span class="line">P<span class="number">-2.2</span></span><br><span class="line">P<span class="number">-2.3</span></span><br><span class="line">P<span class="number">-3.1</span></span><br><span class="line">P<span class="number">-3.2</span></span><br></pre></td></tr></table></figure><p><code>js</code>确认完毕，的确是一层一层的执行。</p><p>而且这里可以告诉大家，<code>setTimeout</code>和<code>setInterval</code>在单独使用的时候，和<code>Promise</code>是一样的，同样是分层执行，这里不再贴代码了（友情提醒：<code>setInterval</code>的话，需要第一次执行就把这个定时器清掉，否则就无限执行，卡死页面秒秒钟的事儿）</p><p><strong>混合使用的执行模式</strong></p><p>将<code>setTimeout</code>和<code>Promise</code>进行混合操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'同步-0.1'</span>)</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'P-1.1'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'S-1.1'</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'P-1.2'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'S-1.2'</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'同步-0.2'</span>)</span><br></pre></td></tr></table></figure><p>执行结果如下。。。问题暴露出来了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">同步<span class="number">-0.1</span></span><br><span class="line">同步<span class="number">-0.2</span></span><br><span class="line">P<span class="number">-1.1</span></span><br><span class="line">P<span class="number">-1.2</span></span><br><span class="line">S<span class="number">-1.1</span></span><br><span class="line">S<span class="number">-1.2</span></span><br></pre></td></tr></table></figure><p>在同级情况下，是<code>Promise</code>执行完了<code>setTimeout</code>才会执行</p><p>这就要涉及到<code>宏任务(macro task)</code>和<code>微任务(micro task)</code>了</p><p><code>JS</code>开始执行的时候，就开启一个宏任务(<code>script</code>)，然后执行一条条的指令。</p><p><code>JS</code>每次执行完当前的<code>stack</code>之后，都会从<code>callback queue</code>中的宏任务队列取出头部的一个宏任务加入到<code>stack</code>中（执行过程中遇到<code>setTimeout()</code>、<code>resolve()</code>和<code>ajax.then()</code>这种异步任务则给<code>WebAPIs</code>，异步任务完成后（如<code>setTimeout</code>定时到了、<code>ajax</code>返回了结果），就会触发相应的线程，将它们的回调推入到<code>callback queue</code>中，<code>setTimeout</code>的回调推入到宏任务队列，<code>resolve</code>和<code>ajax.then</code>的回调会被推入到微任务队列），每一个宏任务后面都跟着一个微任务队列，每次宏任务执行完，主线程就会去查微任务队列，如果不为空，则清空微任务队列，之后重复该循环。</p><p>现在如果执行下面的代码，结果也显而易见吧：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'同步-0.1'</span>)</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'P-1.1'</span>)</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 新加行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'P-2.1'</span>) <span class="comment">// 新加行</span></span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 新加行</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'P-3.1'</span>) <span class="comment">// 新加行</span></span><br><span class="line">    &#125;) <span class="comment">// 新加行</span></span><br><span class="line">  &#125;) <span class="comment">// 新加行</span></span><br><span class="line">&#125;)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'S-1.1'</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'P-1.2'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'S-1.2'</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'同步-0.2'</span>)</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">同步<span class="number">-0.1</span></span><br><span class="line">同步<span class="number">-0.2</span></span><br><span class="line">P<span class="number">-1.1</span></span><br><span class="line">P<span class="number">-1.2</span></span><br><span class="line">P<span class="number">-2.1</span></span><br><span class="line">P<span class="number">-3.1</span></span><br><span class="line">S<span class="number">-1.1</span></span><br><span class="line">S<span class="number">-1.2</span></span><br></pre></td></tr></table></figure><p>无论<code>Promise</code>套用多少层，都会在下一个<code>setTimeout</code>之前执行。</p><h4 id="Dom操作到底是同步，还是异步"><a href="#Dom操作到底是同步，还是异步" class="headerlink" title="Dom操作到底是同步，还是异步"></a><code>Dom</code>操作到底是同步，还是异步</h4><p><strong>这里直接说明：js里面的Dom操作代码，是同步执行，但浏览器进行的Dom渲染，是异步操作。</strong></p><p><strong>浏览器渲染Dom和执行js，同时只能二选一，渲染一次Dom的时机(GUI渲染)是，当前宏任务和小尾巴微任务执行完，下一个宏任务开始前</strong></p><p><code>vue</code>的方法，则是使用<code>HTML5</code>的<code>Api</code>—<code>MutationObserver</code>，监听浏览器将<code>Dom</code>渲染完成的时机。</p><p>上面也说了，浏览器渲染一次Dom，是下一个宏任务开始前，这样使用了<code>setTimeout</code>，保证了Dom确实渲染完成。</p><p>这里也需要稍作提醒，<code>javascript</code>操作Dom是同步的，但操作Dom，毕竟超出了<code>javascript</code>本身语言的<code>Api</code>，每操作一次Dom，都需要消耗一定的性能，所以，在适合的情况下，最好先把要修改的Dom的内容，以字符串或者虚拟Dom的形式拼接好，然后操作一次Dom，把组装好的Dom字符串或虚拟Dom，一次性的塞进HTML页面的真实Dom中。</p><h4 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="built_in">Date</span>.now());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.random());</span><br><span class="line">    <span class="keyword">let</span> now = <span class="keyword">await</span> A();</span><br><span class="line">    <span class="built_in">console</span>.log(now);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">B();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>其实，<code>async/await</code> 只是 <code>Promise+generator</code> 的一种语法糖而已。上面的代码我们改写为这样，可以更加清晰一点：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.random());</span><br><span class="line">    A().then(<span class="function"><span class="keyword">function</span>(<span class="params">now</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(now);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">B();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>这样我们就能明白输出的先后顺序了： 1, 0.4793526730678652(随机数), 2, 1557830834679(时间戳);</p><h4 id="requestAnimationFrame"><a href="#requestAnimationFrame" class="headerlink" title="requestAnimationFrame"></a>requestAnimationFrame</h4><p><code>requestAnimationFrame</code>也属于异步执行的方法，但该方法既不属于宏任务，也不属于微任务。按照<code>MDN</code>中的定义：</p><blockquote><p><code>window.requestAnimationFrame()</code> 告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行</p></blockquote><p><code>requestAnimationFrame</code>是<code>GUI</code>渲染之前执行，但在微服务之后，不过<code>requestAnimationFrame</code>不一定会在当前帧必须执行，由浏览器根据当前的策略自行决定在哪一帧执行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://thinkerhope.github.io/2020/01/04/setTimeout%E5%92%8CPromise%E7%9C%8Beventloop/eloop.png&quot; alt=&quot;eloop&quot;&gt;&lt;/p&gt;
&lt;p&gt;大家都知道&lt;code
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2019总结</title>
    <link href="http://yoursite.com/2019/12/31/2019%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/12/31/2019总结/</id>
    <published>2019-12-31T14:14:31.000Z</published>
    <updated>2019-12-31T23:08:47.417Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://thinkerhope.github.io/2019/12/31/2019%E6%80%BB%E7%BB%93/timg.jpeg" alt="timg"></p><p>​    2019是我人生中很重要很重要的一年，特地在最后一天写这篇日志记录下来，旨在总结19年的经历和成果，以及20年的展望和期待。</p><p>​    第一件事算是祛除我的黑眼圈了吧，其实从高考结束后我就意识到这个问题了，只是条件不允许，就先忍下来了。大学后，意识到自己重重的黑眼圈已经影响到自己的生活了（大部分原因是自己过于敏感脆弱吧，呵呵），我终于决定想通过医美的方式来除掉黑眼圈了，想得跟简单，不就做个手术割掉嘛…当我去了江西省人民医院，我想算是我们那最好的三甲医院了吧。医生说黑眼圈不好办，不能手术…于是建议做射频…3次一点效果都没有，最后还忍受了两次激光的折磨，也是一点效果都没有，因为这个时间正好是寒假，在南昌和赣州往返了不下五趟吧，而且还有2趟是站票，别提多难受了，关键到最后一点效果都没有，还坑了家里面的钱。大二下吧，临近暑假的时候，我鼓起勇气去了秦皇岛市第一医院，咨询了医美科的主任医生，医生说黑眼圈是无法通过手术的方式来治疗的，而且我还发现原来我还有眼袋以及上睑下垂，哭了，我命苦啊。我通过医生了解到上睑下垂是可以通过手术方式来治疗的，就和做双眼皮一样…我没多想决定做了，我妈带我去了广州的一家私人医美整形机构…所谓的整形顾问给我出了一套方案，我啥没想，只想快点见到改变后的自己…好吧，到现在还觉得那个所谓的顾问很是浮夸。手术持续了2个小时吧，就当自己做了个很贵的双眼皮手术吧，不想被其他人知道，就一直藏在心里吧，这个秘密。</p><p>​    第二件事应该是我加入了工作室吧。不洗碗工作室从大二下学期，也就是4月份的时候开始招我们这一批的，主要面向大二（快大二）的学弟学妹，我算是个唯一一个大三（快大三）去工作室的，也就是跟着一个pdf上的文件跟着学而已，其实感觉到快要面试的时候，依然感觉没怎么学…哈哈，可能是其他人比我还菜吧。总之，之间的每一次任务都有很认真地完成，虽然学习效率和学习方法上面还有很大的问题，但是…我只能尽我目前有的最大能力，是吧。好在到7月份工作室负责人雷鹏飞面试了我，在9月份的时候有把我拉进了4.0的群，我很开心，能加入工作室，早就听闻工作室有个去小米实习的吴东很厉害，也终于意味着我不用一直一个人了。工作室的氛围很好，人才济济。虽然项目不多，也能自己和学弟一起完成或者尝试开发一些demo性质的项目吧。</p><p>   第三件事，大二时心理健康课同一组的一个女生邀请我信息经济学和她一组，我还有点小惊喜，平时不爱说话，没啥人缘的我，竟然被人主动邀请了。没多想就答应了，没曾想这是我噩梦的开始…呵呵，原本就没打算在这个无聊的学校，无聊的教室会和一群无聊的同学有什么交集，而且这个学期我的目标算是很明确了，找个前端的实习工作，完成几个项目，眼前的人本来就与我无关。后座同组的女生和我打招呼，问我问题，说了几次话后，我并没有在意，也没有记住她的样子，更不知道，也没有兴趣问名字，可能是穿着黑色的外套吧…emmm，感觉品味很差，就这样吧，哈哈。之后上课，我坐在她后面，每次她转过头来，我都刚好望向她那边，次数多了发现她…她侧脸好好看啊，而且她侧着脸，噘着嘴望向我好可爱啊…我开始想了解她，我翻了她的qq资料，对她的qq签名印象很深刻，凡心所向，素履以往…从此就成了我最喜欢的一句。虽然之后再上了两节课，才记住她长什么样。好几次在路上遇到 她，觉得她走路的气质很好，虽然个子不高，颜值也高不到哪里去，在大部分人的眼中应该是没有很特别的那种女生吧，但是我好像真的有点喜欢上她了，有一点点。我开始期待每一节课，每一节能和她坐一起的课，每一节能看见她的课，我开始期待…这也是我坠入深渊的开始，脑袋里不间断地出现同一个人，声音和模样，我开始变得贪婪，我不再满足于只是她简单地回头找我说几句话，开始主动找她，我喜欢拽她的帽子和衣角，时不时会抓她的头发，喜欢趁她回头对我笑的时候用笔戳她的肩膀，我真的真的好喜欢她在我身边带给我的那种的温度，有点暖暖的，也有一点凉凉的那种感觉，我开始抱怨信息经济学课怎么这么少…周二过去，就开始煎熬地等待周四…我也不知道为什么，其它课都不敢坐她旁边，即使坐一起了，又能怎样，话也说不上几句，我这该死的怂货，也不知道怎么找话题…，就这样很难受地一直期待她来找我说话。但是她的每一次回头都能让我精神百倍，虽然可能不是看向我，哈哈。好吧…国庆快结束的时候，我终于下定决心约她出来玩啦，那天的我真的觉得自己就是世界上最勇敢的人了。在国庆临近的时候，别人都是特别开心的，我却开心不起来…1个星期都看不到她，要我怎么过呢。其实，国庆第一天，我就给她发了一个txt文件，到现在还在，哈哈。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6211</span> <span class="number">559</span>c <span class="number">6</span>b22 <span class="number">4</span>f60<span class="number">-115</span><span class="number">-106</span><span class="number">-121</span></span><br></pre></td></tr></table></figure><p>我当时发的就是一个解析这个16进制的程序，log的是”宋俊谕，我喜欢你”。告诉了她把代码复制到chrome console按回车就可以了，按道理她挺聪明的，应该能猜到什么意思了…就忐忑地等了一天没有任何消息了，我想我是不是被讨厌了啊…哈哈，第二天，因为之前答应了她把那个登录的代码发她，虽然她可能也没有怎么在意，不过我还是很认真地…又担心她不会用，就重写了一份发给她。好吧，约会那天由于各种原因，晚上一起在东操场散了几圈步，也不算特别尴尬吧，我挺喜欢和她聊天的，虽然我不会和不熟悉的人聊天，但是还是很开心，而且那天晚上她披着头发，不过我喜欢她扎着头发的样子，干净整洁。虽然最后因为各种原因，各奔东西了，哈哈，以后也不会有交集了吧。释怀了，几天后我终于从这种无尽的痛苦中解脱了，我认识到及时止损的重要性…不然越陷越深，到最后只有自己傻傻地受伤。自动多情真的很卑微。好吧，就我一个人知道为什么之后有段时间，眼睛一直带血丝，嘻嘻，我去医院割了眼袋，虽然效果不是很好，不过算是一种麻痹自己吧，想快点忘记。</p><p>​    最大的一件事，就是我拿到北京小米科技的实习offer啦，真的很开心，这是我人生中的第一份工作。这段时间面试了今日头条、快手、小米，头条是我的第一次尝试吧，当时也不知道自己哪来的勇气和冲劲，就想着去尝试一下。还要感谢一下头条的一面和二面面试官吧，人很nice，很可惜吧，在我拿入职小米后，头条又给我发了面试邀请，我答应了…但是我把面试官给鸽了，没有在约定的时间面试，也没有提前和HR联系取消面试…到现在还自责。小米面试是现场面的，第一次来到西二旗小米科技园，哇!好华丽的现代建筑，在这里工作的人肯定很幸福吧，我很喜欢自己的一面和二面面试官，leader也很nice。真的很开心，加入了MIAI-FE，和小爱同学一起…开始一段难忘的人生经历…</p><p>   <img src="https://thinkerhope.github.io/2019/12/31/2019%E6%80%BB%E7%BB%93/IMG_20200101_064702.jpg" alt="IMG_20200101_064702"></p><p>   故事依然在继续…跟着自己的内心，就这样一直走下去吧。</p><p>​    展望2020，考研、2020东京奥运会、秋招…总之会是充满奇迹的一年吧。给自己立一波flag，系统学习JS(《Javascript权威指南》)，我大前端不能丢(HTML5的两本高效指南)为秋招做准备，基于React的项目不少于2个，开始学习Vue，Github开源项目学习不低于5个，顺利地完成学业，还有达成那个创新创业学分的指标。别忘了，自己说的，除了指上的代码，还有眼里的星辰呢，希望20年可以找到中意的女生吧，总得在学校留下点什么回忆啥的，是吧…希望自己喜欢的人也能喜欢自己吧，还有就是把自己过于在人多的地方会慌张的毛病矫正过来。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://thinkerhope.github.io/2019/12/31/2019%E6%80%BB%E7%BB%93/timg.jpeg&quot; alt=&quot;timg&quot;&gt;&lt;/p&gt;
&lt;p&gt;​    2019是我人生中很重要很重要的一年，特地在最后一天写这
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>使用hooks来优化性能</title>
    <link href="http://yoursite.com/2019/12/05/%E4%BD%BF%E7%94%A8hooks%E6%9D%A5%E4%BC%98%E5%8C%96%E6%80%A7%E8%83%BD/"/>
    <id>http://yoursite.com/2019/12/05/使用hooks来优化性能/</id>
    <published>2019-12-05T03:38:43.000Z</published>
    <updated>2019-12-05T03:53:56.042Z</updated>
    
    <content type="html"><![CDATA[<ol><li>调用setState，就会触发组件的重新渲染，无论前后的state是否不同</li><li>父组件更新，子组件也会自动的更新</li></ol><p>基于上面的两点，我们通常的解决方案是：使用immutable进行比较，在不相等的时候调用setState；在shouldComponentUpdate中判断前后的props和state，如果没有变化，则返回false来阻止更新。</p><h4 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h4><p>糟糕的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">WithoutMemo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [count, setCount] = useState(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">const</span> [val, setValue] = useState(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">expensive</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'compute'</span>);</span><br><span class="line">        <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count * <span class="number">100</span>; i++) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &lt;div&gt;</span><br><span class="line">        &lt;h4&gt;&#123;count&#125;-&#123;val&#125;-&#123;expensive()&#125;&lt;/h4&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;+c1&lt;/button&gt;</span><br><span class="line">            &lt;input value=&#123;val&#125; onChange=&#123;event =&gt; setValue(event.target.value)&#125;/&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次<code>count</code>或者<code>val</code>变化都会触发组件的重新渲染，<code>expensive()</code>函数就会重新执行。</p><p>使用useMemo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">WithMemo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [count, setCount] = useState(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">const</span> [val, setValue] = useState(<span class="string">''</span>);</span><br><span class="line">    <span class="keyword">const</span> expensive = useMemo(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'compute'</span>);</span><br><span class="line">        <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count * <span class="number">100</span>; i++) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;, [count]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &lt;div&gt;</span><br><span class="line">        &lt;h4&gt;&#123;count&#125;-&#123;expensive&#125;&lt;/h4&gt;</span><br><span class="line">        &#123;val&#125;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;+c1&lt;/button&gt;</span><br><span class="line">            &lt;input value=&#123;val&#125; onChange=&#123;event =&gt; setValue(event.target.value)&#125;/&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，只会在<code>count</code>值改变的时候执行函数，并且由于缓存了上一次的<code>sum</code>值，因此可以放心地获取到最新的<code>sum</code>值。</p><h4 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h4><p><strong>使用场景</strong>是：有一个父组件，其中包含子组件，子组件接收一个函数作为props；通常而言，如果父组件更新了，子组件也会执行更新；但是大多数场景下，更新是没有必要的，我们可以借助useCallback来返回函数，然后把这个函数作为props传递给子组件；这样，子组件就能避免不必要的更新。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useCallback, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [count, setCount] = useState(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">const</span> [val, setVal] = useState(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> callback = useCallback(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;, [count]);</span><br><span class="line">    <span class="keyword">return</span> &lt;div&gt;</span><br><span class="line">        &lt;h4&gt;&#123;count&#125;&lt;/h4&gt;</span><br><span class="line">        &lt;Child callback=&#123;callback&#125;/&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;+&lt;/button&gt;</span><br><span class="line">            &lt;input value=&#123;val&#125; onChange=&#123;event =&gt; setVal(event.target.value)&#125;/&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Child(&#123; callback &#125;) &#123;</span><br><span class="line">    const [count, setCount] = useState(() =&gt; callback());</span><br><span class="line">    useEffect(() =&gt; &#123;</span><br><span class="line">        setCount(callback());</span><br><span class="line">    &#125;, [callback]);</span><br><span class="line">    return &lt;div&gt;</span><br><span class="line">        &#123;count&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>可以发现和useEffect很像，最大的不同是，useEffect可以处理副作用，但是useMemo和useCallback不可以</li><li>useCallback返回的是缓存的函数，我们可以借助ES6的set数据结构来判断这个函数是否发生改变</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;调用setState，就会触发组件的重新渲染，无论前后的state是否不同&lt;/li&gt;
&lt;li&gt;父组件更新，子组件也会自动的更新&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基于上面的两点，我们通常的解决方案是：使用immutable进行比较，在不相等的时候调用setState；
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>通过HOC实现分层权限的路由</title>
    <link href="http://yoursite.com/2019/12/05/%E9%80%9A%E8%BF%87HOC%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B1%82%E6%9D%83%E9%99%90%E7%9A%84%E8%B7%AF%E7%94%B1/"/>
    <id>http://yoursite.com/2019/12/05/通过HOC实现分层权限的路由/</id>
    <published>2019-12-04T23:47:35.000Z</published>
    <updated>2019-12-04T23:59:52.287Z</updated>
    
    <content type="html"><![CDATA[<p>假设某应用中有以下三个页面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">登陆页----Home.jsx</span><br><span class="line">页面A----PageA.jsx</span><br><span class="line">页面B----PageB.jsx</span><br></pre></td></tr></table></figure><p>有以下三种用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">游客（未登录）---只能访问登陆页</span><br><span class="line">普通用户（已登陆）---能访问登陆页及页面A</span><br><span class="line">管理员（已登陆）---能访问所有页面</span><br></pre></td></tr></table></figure><p>具体需求如下：</p><ul><li>游客访问除登陆页以外的页面时自动跳到登陆页。</li><li>普通用户访问页面B时页面显示无权限访问</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// withUserPermission.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Redirect &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getUser &#125; <span class="keyword">from</span> <span class="string">'@/user.js'</span>;    <span class="comment">//  判断是否已登陆用户</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Wrapper =&gt; <span class="function"><span class="params">hocProps</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">component</span>: Component, ...rest &#125; = hocProps;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> user = getUser();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;Wrapper &#123;...rest&#125; component=&#123; props =&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> user</span><br><span class="line">                ? &lt;Component &#123;...props&#125; /&gt;</span><br><span class="line">                : &lt;Redirect to="/login" /&gt;  //  跳转到登陆页</span><br><span class="line">        &#125; &#125; /&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// withAdminPermission</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getRole &#125; <span class="keyword">from</span> <span class="string">'@/user.js'</span>;    <span class="comment">//  获取用户角色</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Wrapper =&gt; <span class="function"><span class="params">hocProps</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">component</span>: Component, ...rest &#125; = hocProps;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> hasPermission = (getRole() === <span class="string">'admin'</span>) ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;Wrapper &#123;...rest&#125; component=&#123; props =&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> hasPermission</span><br><span class="line">                ? &lt;Component &#123;...props&#125; /&gt;</span><br><span class="line">                : &lt;h1&gt;无权限访问&lt;/h1&gt;</span><br><span class="line">        &#125; &#125; /&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>封装<code>Route</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PrivateRoutes.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; Route &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> withUserPermission <span class="keyword">from</span> <span class="string">'./withUserPermission'</span>;</span><br><span class="line"><span class="keyword">import</span> withAdminPermission <span class="keyword">from</span> <span class="string">'./withAdminPermission'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> UserRoute = withUserPermission(Route);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> AdminRoute = withUserPermission(withAdminPermission(Route));</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router, Route &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; UserRoute, AdminRoute &#125; <span class="keyword">from</span> <span class="string">'./PrivateRoutes'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> PageLogin <span class="keyword">from</span> <span class="string">'views/PageLogin'</span>;</span><br><span class="line"><span class="keyword">import</span> PageA <span class="keyword">from</span> <span class="string">'views/PageA'</span>;</span><br><span class="line"><span class="keyword">import</span> PageB <span class="keyword">from</span> <span class="string">'views/PageB'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">    &lt;Router&gt;</span><br><span class="line">        &lt;Route path=<span class="string">'/login'</span> component=&#123;PageLogin&#125; /&gt;</span><br><span class="line">        &lt;UserRoute path=<span class="string">'/pageA'</span> component=&#123;PageA&#125; /&gt;</span><br><span class="line">        &lt;AdminRoute path=<span class="string">'/pageB'</span> component=&#123;PageB&#125; /&gt;</span><br><span class="line">    &lt;<span class="regexp">/Router&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;假设某应用中有以下三个页面：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>深入理解js中的浮点数</title>
    <link href="http://yoursite.com/2019/11/24/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3js%E4%B8%AD%E7%9A%84%E6%B5%AE%E7%82%B9%E6%95%B0/"/>
    <id>http://yoursite.com/2019/11/24/深入理解js中的浮点数/</id>
    <published>2019-11-24T13:51:46.000Z</published>
    <updated>2019-11-27T11:12:51.781Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ES标准中的比较算法</title>
    <link href="http://yoursite.com/2019/11/24/ES%E6%A0%87%E5%87%86%E4%B8%AD%E7%9A%84%E6%AF%94%E8%BE%83%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2019/11/24/ES标准中的比较算法/</id>
    <published>2019-11-24T13:20:40.000Z</published>
    <updated>2019-11-24T13:48:52.448Z</updated>
    
    <content type="html"><![CDATA[<p><code>ES</code>中的 <code>==</code> 和 <code>===</code> 都很熟悉了。</p><p>两者的区别：</p><ul><li><p>== 在类型相同时，使用 === 判断，=== 在类型不同时直接<code>false</code></p></li><li><p>== 会在类型不同时，发生隐式转换</p><p>规则如下：</p><p>（1）一个 <code>null</code>，一个 <code>undefied</code>，那么<code>true</code></p><p>（2）一个字符串，一个数值，会把字符串转成数值之后再进行比较</p></li></ul><p>熟悉<code>ES6</code>不会对<code>Object.is()</code>陌生</p><p><code>NaN</code>独白：懂我的人终于出现<del>(≧▽≦)/</del>啦</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="number">0</span>, <span class="number">-0</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>在<code>js</code>中我们一般认为正负0是不相等的，然而<code>===</code>情况下<code>NaN</code>不等于<code>NaN</code>，<code>+0</code>等于<code>-0</code></p><p>简单实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">Object</span>.is) &#123;</span><br><span class="line">  <span class="built_in">Object</span>.is = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x === y) &#123; </span><br><span class="line">      <span class="comment">// 针对 +0不等于-0</span></span><br><span class="line">      <span class="comment">// 1 / -0 &lt; 0</span></span><br><span class="line">      <span class="comment">// 1 / +0 &gt; 0</span></span><br><span class="line">      <span class="keyword">return</span> x !== <span class="number">0</span> || <span class="number">1</span> / x === <span class="number">1</span> / y;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 针对 NaN等于NaN</span></span><br><span class="line">      <span class="keyword">return</span> x !== x &amp;&amp; y !== y;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里重点提到ES标准中的 <strong>SameValueZero</strong> 算法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">s.add(<span class="number">0</span>)</span><br><span class="line">s.add(<span class="literal">NaN</span>)</span><br><span class="line">s.has(<span class="number">-0</span>) <span class="comment">// true</span></span><br><span class="line">s.has(<span class="literal">NaN</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>和<code>Object.is()</code>比较算法的区别就在 +0 和 -0是一样的。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="number">0</span>, <span class="literal">NaN</span>]</span><br><span class="line">a.includes(<span class="number">-0</span>) <span class="comment">// true</span></span><br><span class="line">a.includes(<span class="literal">NaN</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>可以看出<code>includes</code>也是基于 <code>SameValueZero</code> 来比较的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;ES&lt;/code&gt;中的 &lt;code&gt;==&lt;/code&gt; 和 &lt;code&gt;===&lt;/code&gt; 都很熟悉了。&lt;/p&gt;
&lt;p&gt;两者的区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;== 在类型相同时，使用 === 判断，=== 在类型不同时直接&lt;code&gt;false&lt;/co
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>移位运算符</title>
    <link href="http://yoursite.com/2019/11/23/%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>http://yoursite.com/2019/11/23/移位运算符/</id>
    <published>2019-11-23T02:20:12.000Z</published>
    <updated>2019-11-24T13:31:07.795Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS移位运算符（-lt-lt-、-gt-gt-和-gt-gt-gt-）"><a href="#JS移位运算符（-lt-lt-、-gt-gt-和-gt-gt-gt-）" class="headerlink" title="JS移位运算符（&lt;&lt;、&gt;&gt;和&gt;&gt;&gt;）"></a>JS移位运算符（&lt;&lt;、&gt;&gt;和&gt;&gt;&gt;）</h1><p>了解一下移位运算符以及在算法中的应用</p><h2 id="“-lt-lt-”运算符"><a href="#“-lt-lt-”运算符" class="headerlink" title="“&lt;&lt;”运算符"></a>“&lt;&lt;”运算符</h2><blockquote><p>左移位运算</p></blockquote><p>在移位运算过程中，符号位始终保持不变。如果右侧空出位置，则自动填充为 0；超出 32 位的值，则自动丢弃。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span> &lt;&lt; <span class="number">2</span>);  <span class="comment">//返回值20</span></span><br></pre></td></tr></table></figure><p><img src="/home/boygreen/MyBlog/source/_posts/%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6/6-1ZRGG61JU.gif" alt></p><h2 id="“-gt-gt-”运算符"><a href="#“-gt-gt-”运算符" class="headerlink" title="“&gt;&gt;”运算符"></a>“&gt;&gt;”运算符</h2><blockquote><p>右移位运算</p></blockquote><p>与左移运算操作相反，它把 32 位数字中的所有有效位整体右移，再使用符号位的值填充空位。移动过程中超出的值将被丢弃。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1000</span> &gt;&gt; <span class="number">8</span>);  <span class="comment">//返回值3</span></span><br></pre></td></tr></table></figure><p><img src="/home/boygreen/MyBlog/source/_posts/%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6/6-1ZRGH0003W.gif" alt></p><p>把数值 -1000 向右移 8 位，则返回值为 -4。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(-1000  &gt;&gt; 8);  //返回值 -4</span><br></pre></td></tr></table></figure><p>用算式进行演示，如图所示。当符号位值为 1 时，则有效位左侧的空位全部使用 1 进行填充。</p><p><img src="/home/boygreen/MyBlog/source/_posts/%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6/6-1ZRGH214508.gif" alt></p><h2 id="“-gt-gt-gt-”运算符"><a href="#“-gt-gt-gt-”运算符" class="headerlink" title="“&gt;&gt;&gt;”运算符"></a>“&gt;&gt;&gt;”运算符</h2><blockquote><p>无符号右移位运算</p></blockquote><p>它把无符号的 32 位整数所有数位整体右移。对于无符号数或正数右移运算，无符号右移与有符号右移运算的结果是相同的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1000</span> &gt;&gt;&gt; <span class="number">8</span>);  <span class="comment">//返回值3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1000</span> &gt;&gt; <span class="number">8</span>);  <span class="comment">//返回值3</span></span><br></pre></td></tr></table></figure><p>对于负数来说，无符号右移将使用 0 来填充所有的空位，同时会把负数作为正数来处理，所得结果会非常大所以，使用无符号右移运算符时要特别小心，避免意外错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">-1000</span> &gt;&gt; <span class="number">8</span>);  <span class="comment">//返回值 -4</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">-1000</span> &gt;&gt;&gt; <span class="number">8</span>);  <span class="comment">//返回值 16777212</span></span><br></pre></td></tr></table></figure><p><img src="/home/boygreen/MyBlog/source/_posts/%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6/6-1ZRGHZ0200.gif" alt></p><h1 id="算法应用"><a href="#算法应用" class="headerlink" title="算法应用"></a>算法应用</h1><p>计算2进制中1的个数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NumberOf1</span>(<span class="params">n</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n===<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((n &gt;&gt;&gt; i &amp; <span class="number">1</span>) === <span class="number">1</span>)&#123;  <span class="comment">// 右移并与1进行&amp;运算</span></span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里补充一下 &amp; (位与运算)</p><p> &amp;为位与运算，将两边转为二进制<br>  进行比较的时候，如果两边数字的长度不够，就从右到左对齐，前面没有的部分补零就好</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 0bxxx表示一个数为二进制</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0b100010</span>&amp;<span class="number">0b000111</span>) <span class="comment">// 000010 - 2</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JS移位运算符（-lt-lt-、-gt-gt-和-gt-gt-gt-）&quot;&gt;&lt;a href=&quot;#JS移位运算符（-lt-lt-、-gt-gt-和-gt-gt-gt-）&quot; class=&quot;headerlink&quot; title=&quot;JS移位运算符（&amp;lt;&amp;lt;、&amp;gt;&amp;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>css百分比总结</title>
    <link href="http://yoursite.com/2019/11/21/css%E7%99%BE%E5%88%86%E6%AF%94%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/11/21/css百分比总结/</id>
    <published>2019-11-21T15:50:42.000Z</published>
    <updated>2019-11-21T15:50:42.948Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>函数toString的妙用(字节跳动二面)</title>
    <link href="http://yoursite.com/2019/11/21/%E5%87%BD%E6%95%B0toString%E7%9A%84%E5%A6%99%E7%94%A8/"/>
    <id>http://yoursite.com/2019/11/21/函数toString的妙用/</id>
    <published>2019-11-21T11:34:21.000Z</published>
    <updated>2019-11-21T12:19:31.941Z</updated>
    
    <content type="html"><![CDATA[<p>字节跳动（今日头条）二面出的一道题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">sum(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>)(<span class="number">5</span>)</span><br><span class="line"><span class="comment">// 要求输出一致</span></span><br></pre></td></tr></table></figure><p>我感觉就是问一个闭包而已</p><p>我的答案(…好吧，不是现场给的)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> arg1 = <span class="built_in">Number</span>(<span class="built_in">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">  <span class="comment">// if (!arg1) return 0;</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [].slice.call(<span class="built_in">arguments</span>).reduce(<span class="function">(<span class="params">prev, next</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> prev + next;</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> arg1 + sum(<span class="built_in">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尼玛…毫无疑问，二面懵逼的挂了。</p><p>这什么鬼逻辑才想出这样…递归的后面返回是个函数，还用加法…白给</p><p>把代码改成下面这样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> sum = <span class="built_in">arguments</span>[<span class="number">0</span>] ? <span class="built_in">Number</span>(<span class="built_in">arguments</span>[<span class="number">0</span>]) : <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> tempFunc = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    sum += num;</span><br><span class="line">    <span class="built_in">console</span>.log(sum)</span><br><span class="line">    <span class="keyword">return</span> tempFunc;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [].slice.call(<span class="built_in">arguments</span>).reduce(<span class="function">(<span class="params">prev, next</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> prev + next;</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> a = tempFunc(<span class="built_in">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">      <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>)(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><p>会发现最后输出了一个函数，这时候<code>toString()</code>就派上用场了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重写tempFunc的toString</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> sum = <span class="built_in">arguments</span>[<span class="number">0</span>] ? <span class="built_in">Number</span>(<span class="built_in">arguments</span>[<span class="number">0</span>]) : <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> tempFunc = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    sum += num;</span><br><span class="line">    <span class="built_in">console</span>.log(sum)</span><br><span class="line">    <span class="keyword">return</span> tempFunc;</span><br><span class="line">  &#125;</span><br><span class="line">  tempFunc.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [].slice.call(<span class="built_in">arguments</span>).reduce(<span class="function">(<span class="params">prev, next</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> prev + next;</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 注意这里的一个小细节，卡了我好久</span></span><br><span class="line">      <span class="comment">// 我直接写成tempFunc(arguments[0])了，要return a，不然add(1)(2)是undefined</span></span><br><span class="line">      <span class="keyword">const</span> a = tempFunc(<span class="built_in">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">      <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把最后结果返回就可以了，不过这也是为了应付面试而已…肯定有更优解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;字节跳动（今日头条）二面出的一道题&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2
      
    
    </summary>
    
    
    
      <category term="-面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>观察者模式和Promise原理</title>
    <link href="http://yoursite.com/2019/11/18/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E5%92%8CPromise%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2019/11/18/观察者模式和Promise原理/</id>
    <published>2019-11-18T15:33:17.000Z</published>
    <updated>2019-11-18T15:33:17.707Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>前端性能优化</title>
    <link href="http://yoursite.com/2019/11/12/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2019/11/12/前端性能优化/</id>
    <published>2019-11-12T13:27:52.000Z</published>
    <updated>2019-11-12T13:27:52.378Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>实现将emoji表情插入到textarea指定位置</title>
    <link href="http://yoursite.com/2019/11/11/%E5%AE%9E%E7%8E%B0%E5%B0%86emoji%E8%A1%A8%E6%83%85%E6%8F%92%E5%85%A5%E5%88%B0textarea%E6%8C%87%E5%AE%9A%E4%BD%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2019/11/11/实现将emoji表情插入到textarea指定位置/</id>
    <published>2019-11-11T04:49:18.000Z</published>
    <updated>2019-11-11T04:49:18.957Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>你真的理解call和apply吗</title>
    <link href="http://yoursite.com/2019/11/08/%E4%BD%A0%E7%9C%9F%E7%9A%84%E7%90%86%E8%A7%A3call%E5%92%8Capply%E5%90%97/"/>
    <id>http://yoursite.com/2019/11/08/你真的理解call和apply吗/</id>
    <published>2019-11-08T11:37:37.000Z</published>
    <updated>2019-11-18T06:57:35.354Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>重新认识了一下函数</p></blockquote><h2 id="函数的三种角色"><a href="#函数的三种角色" class="headerlink" title="函数的三种角色"></a>函数的三种角色</h2><p><strong>一些函数作为对象的属性</strong></p><ul><li><code>length</code>：形参的个数；</li><li><code>name</code>：函数名；</li><li><code>prototype</code>：类的原型，在原型上定义的方法都是当前这个类的实例的公有方法；</li><li><code>__proto__</code>：把函数当做一个普通对象，指向Function这个类的原型</li></ul><p><strong>函数的角色</strong></p><ul><li><strong>普通函数</strong>。它本身是一个普通的函数，执行的时候会形成私有的作用域，然后进行形参赋值、预解析、代码执行、执行完成后内存销毁；</li><li><strong>类</strong>。有自己的实例，也有一个叫做<code>prototype</code>的属性是自己的原型，它的实例都可以指向自己的原型；</li><li><strong>普通对象</strong>。它作为对象可以有一些自己的私有属性，也可以通过<code>__proto__</code>找到<code>Function.prototype</code>；</li></ul><p><img src="https://thinkerhope.github.io/2019/11/08/%E4%BD%A0%E7%9C%9F%E7%9A%84%E7%90%86%E8%A7%A3call%E5%92%8Capply%E5%90%97/2555024-95309047f0e9f13d.png" alt></p><h2 id="call方法原理"><a href="#call方法原理" class="headerlink" title="call方法原理"></a><code>call</code>方法原理</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 允许传null</span></span><br><span class="line">    <span class="keyword">let</span> context = context || <span class="built_in">window</span>;</span><br><span class="line">    context.fn = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">// 重新执行这个函数</span></span><br><span class="line">    <span class="keyword">let</span> args = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">        args.push(<span class="string">"arguments["</span> + i + <span class="string">"]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 函数是可以有返回值的</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">""</span>,  <span class="string">`<span class="subst">$&#123; <span class="string">"context.fn("</span> + args + <span class="string">")"</span> &#125;</span>`</span>)();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">delete</span> context.fn;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line">fn.myCall(obj); <span class="comment">// fn作为普通对象, 所以myCall中的this为fn函数本身</span></span><br><span class="line">sum.myCall(obj);</span><br></pre></td></tr></table></figure><p>一个经典栗子（需要深入理解<code>call</code>原理和原型链）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn1.call(fn2); <span class="comment">// 1</span></span><br><span class="line">fn1.call.call(fn2); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>第二个输出有了前面的基础就很好理解了。前面了解到函数可以作为普通对象，然后有原型链搜索这一过程。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fn2 &#123;</span><br><span class="line">fn: fn1.call</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二次的<code>call</code>将<code>fn1.call</code>这个函数的<code>this</code>绑定到<code>fn2</code>上(将<code>fn2</code>作为普通对象)，再将<code>fn1.call</code>重新执行，此时，<code>fn1.call</code>函数里面的this就指向了<code>fn2</code>这个对象了，所以不是重新执行<code>fn1()</code>，而是重新执行<code>fn2()</code>。</p><p><strong>思考</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>) || [].slice.call(<span class="built_in">arguments</span>)</span><br></pre></td></tr></table></figure><p>这个方法用于将类数组对象转化为数组。</p><p><strong>call、apply、bind的区别</strong></p><p><code>call</code>和<code>apply</code>基本一样，就是传递参数形式不一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num1 + num2);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn.call(obj , <span class="number">100</span> , <span class="number">200</span>);</span><br><span class="line">fn.apply(obj , [<span class="number">100</span>, <span class="number">200</span>]);</span><br></pre></td></tr></table></figure><p><code>bind</code>有点不一样，它会返回函数，而不是立即执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var tempFn = fn.bind(obj, 1, 2);</span><br><span class="line">tempFn();</span><br></pre></td></tr></table></figure><p>补充一下<code>ES5</code>的严格模式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span> -- 严格模式</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn.call(); <span class="comment">// 普通模式下this是window，在严格模式下this是undefined</span></span><br><span class="line">fn.call(<span class="literal">null</span>); <span class="comment">// 普通模式下this是window，在严格模式下this是null</span></span><br><span class="line">fn.call(<span class="literal">undefined</span>); <span class="comment">// 普通模式下this是window，在严格模式下this是undefined</span></span><br></pre></td></tr></table></figure><p><code>apply</code>和<code>call</code>的实现基本一样，就是处理arguments不一样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">arguments</span>[<span class="number">1</span>]) &#123;</span><br><span class="line">    result = context.fn(...arguments[<span class="number">1</span>])</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    result = context.fn()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自己实现一个bind"><a href="#自己实现一个bind" class="headerlink" title="自己实现一个bind"></a>自己实现一个bind</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myBind</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">let</span> self=<span class="keyword">this</span>;<span class="comment">//保存原函数</span></span><br><span class="line">    <span class="comment">// 有了前面的基础，就可以理解为什么要[].shift.call(arguments)了</span></span><br><span class="line">    <span class="keyword">let</span> context=[].shift.call(<span class="built_in">arguments</span>);<span class="comment">//保存需要绑定的this上下文</span></span><br><span class="line">    <span class="keyword">let</span> args=[].slice.call(<span class="built_in">arguments</span>);<span class="comment">//将剩余参数转化为数组</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    self.apply(context,[].concat.call(args, [].slice.call(<span class="built_in">arguments</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Function-apply-bind"><a href="#Function-apply-bind" class="headerlink" title="Function.apply.bind"></a><code>Function.apply.bind</code></h2><p>看一个<code>js</code>的高级技巧</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve([<span class="number">10</span>,<span class="number">20</span>]).then(<span class="built_in">Function</span>.apply.bind(<span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(x, y);</span><br><span class="line">&#125;, <span class="literal">null</span>));     <span class="comment">// 10,20</span></span><br></pre></td></tr></table></figure><p>先不管Promise</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(x, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo = <span class="built_in">Function</span>.apply.bind(sum, <span class="literal">null</span>);</span><br><span class="line">foo([<span class="number">10</span>, <span class="number">20</span>]);   <span class="comment">// 10, 20</span></span><br></pre></td></tr></table></figure><p><code>sum.apply(null, [10, 20])</code>很好理解，<code>bind(sum)</code>使<code>Function.apply</code>这个函数里面的this指向了<code>sum</code>这个函数对象，所以<code>Function.apply.bind(sum, null)</code>等价于<code>sum.apply.bind(sum, null)</code>，<code>bind</code>的使命已经完成了。所以就等价于<code>sum.apply</code>。</p><p><strong>Function.bind.apply</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.bind.apply(sum, <span class="literal">null</span>)</span><br></pre></td></tr></table></figure><p>原理一样的。等价于<code>sum.bind(sum, null)</code>，就等价于<code>sum</code></p><p>看起来很简单，其实还是有很多东西的，哈哈，是不是感觉收获颇丰啊，不用谢了啦。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;重新认识了一下函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;函数的三种角色&quot;&gt;&lt;a href=&quot;#函数的三种角色&quot; class=&quot;headerlink&quot; title=&quot;函数的三种角色&quot;&gt;&lt;/a&gt;函数的三种角色&lt;/h2&gt;&lt;p&gt;&lt;stron
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>es6异步编程篇</title>
    <link href="http://yoursite.com/2019/11/06/es6%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E7%AF%87/"/>
    <id>http://yoursite.com/2019/11/06/es6异步编程篇/</id>
    <published>2019-11-06T10:44:26.000Z</published>
    <updated>2019-11-07T15:47:22.648Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Genretor篇"><a href="#Genretor篇" class="headerlink" title="Genretor篇"></a>Genretor篇</h1><h4 id="运用场景"><a href="#运用场景" class="headerlink" title="运用场景"></a>运用场景</h4><p><strong>(1) 一个抽奖的小栗子</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params">count</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 执行一段抽奖逻辑</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`剩余<span class="subst">$&#123;count&#125;</span>次`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行抽奖的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">remain</span>(<span class="params">count</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    count--</span><br><span class="line">    <span class="keyword">yield</span> draw(count)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> startDrawing = remain(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> btn = <span class="built_in">document</span>.createElement(<span class="string">'button'</span>)</span><br><span class="line">btn.id = <span class="string">'start'</span></span><br><span class="line">btn.textContent = <span class="string">'开始抽奖'</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(btn)</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'start'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  startDrawing.next()</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p><strong>(2)长轮询</strong></p><blockquote><p>实现实时把服务器数据更新到客户端</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟一个请求</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">ajax</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 此处用一个定时器来模拟请求数据的耗时，并约定当返回的json中code为0表示有新数据更新</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(&#123;<span class="attr">code</span>: <span class="number">0</span>&#125;)</span><br><span class="line">    &#125;, <span class="number">200</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> promise = ajax().next().value;</span><br><span class="line">  promise.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(res.code !== <span class="number">0</span>) &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"2秒后继续查询..."</span>)</span><br><span class="line">        update();</span><br><span class="line">      &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">update();</span><br></pre></td></tr></table></figure><p><strong>(3) 部署<code>ajax</code>, 实现同步</strong></p><blockquote><p>异步函数的同步表达</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">yield</span> request(<span class="string">"http://some.url"</span>);</span><br><span class="line">  <span class="keyword">let</span> resp = <span class="built_in">JSON</span>.parse(result);</span><br><span class="line">  <span class="built_in">console</span>.log(resp.value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> it = main();</span><br><span class="line">it.next();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  axio(&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    it.next(res.data);    </span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>(4) 部署iterator接口</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o1 = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="number">2</span>,</span><br><span class="line">  c: <span class="number">3</span>,</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]: <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</span><br><span class="line">      <span class="keyword">yield</span> <span class="keyword">this</span>[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自动执行"><a href="#自动执行" class="headerlink" title="自动执行"></a>自动执行</h4><p><strong><code>Thunk</code>函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编译器实现"传名调用"</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">m</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> m * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(x + <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> thunk = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + <span class="number">5</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">thunk</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> thunk() * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>JavaScript</code>的 <code>Thunk</code> 函数</p><blockquote><p>JavaScript采取的是传值调用, thunk函数含义有所不同</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单实现</span></span><br><span class="line"><span class="keyword">const</span> Thunk = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> fn.call(<span class="keyword">this</span>, ...args, callback);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">var</span> readFileThunk = Thunk(fs.readFile);</span><br><span class="line">readFileThunk(fileA)(callback);</span><br></pre></td></tr></table></figure><p>生产环境的Thunk转换器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 安装</span><br><span class="line">$ cnpm install thunkify</span><br></pre></td></tr></table></figure><p><strong>用<code>Thunk</code>实现自动执行</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 栗子</span><br><span class="line">var g = function* ()&#123;</span><br><span class="line">  var f1 = yield readFileThunk(&apos;fileA&apos;);</span><br><span class="line">  var f2 = yield readFileThunk(&apos;fileB&apos;);</span><br><span class="line">  // ...</span><br><span class="line">  var fn = yield readFileThunk(&apos;fileN&apos;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">run(g);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> gen = fn();</span><br><span class="line">  <span class="comment">// next就是异步任务的回调</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = gen.next(data);</span><br><span class="line">    <span class="keyword">if</span> (result.done) <span class="keyword">return</span>;</span><br><span class="line">    result.value(next);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  next();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">g</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run(g);</span><br></pre></td></tr></table></figure><p>初看上面代码会懵逼的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先理解手动执行</span></span><br><span class="line"><span class="keyword">var</span> g = gen();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r1 = g.next();</span><br><span class="line">r1.value(<span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="keyword">var</span> r2 = g.next(data);</span><br><span class="line">  r2.value(<span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    g.next(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="async篇"><a href="#async篇" class="headerlink" title="async篇"></a>async篇</h1><blockquote><p>ES2017标准，Generator 函数的语法糖，自带执行器</p></blockquote><h4 id="运用场景-1"><a href="#运用场景-1" class="headerlink" title="运用场景"></a>运用场景</h4><p>（1）  <strong>一个请求接着一个请求</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 后一个请求依赖前一个请求</span></span><br><span class="line"><span class="comment">// 图片处理完成然后保存在本地</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> base64Data = <span class="keyword">await</span> download(<span class="string">'http://1.jpg'</span>);</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> saveToLocal(base64Data); </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>（2） 并发任务, 但是同步处理结果(处理任务是异步)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> promise1 = convertToBase64Data(<span class="string">"url1"</span>);</span><br><span class="line">  <span class="keyword">const</span> promise2 = convertToBase64Data(<span class="string">"url2"</span>);</span><br><span class="line">  <span class="keyword">const</span> [data1, data2] = <span class="keyword">await</span> <span class="built_in">Promise</span>.all([promise1, promise2]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> saveToLocal(data1);</span><br><span class="line">  <span class="keyword">const</span> result2 = <span class="keyword">await</span> saveToLocal(data2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>（3）多张图片，处理一张保存一张，然后才能处理下一张</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无await, 就自己瞎写</span></span><br><span class="line"><span class="keyword">const</span> imgUrls = [<span class="string">'http://1.jpg'</span>, <span class="string">'http://2.jpg'</span>, <span class="string">'http://3.jpg'</span>, <span class="string">'http://4.jpg'</span>, <span class="string">'http://5.jpg'</span>];</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (result) &#123;</span><br><span class="line">    saveToLocal(result).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(result)    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (i &lt; imgUrls.length) &#123;</span><br><span class="line">    convertToBase64Data(imgUrls[i++]).then(next);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">next();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还是await舒服...</span></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; imgUrls.length; i++) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">await</span> convertToBase64Data(imgUrls[i]);</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> saveToLocal(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>（4）<strong>错误处理</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无await</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn6</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    convertToBase64(<span class="string">'http://1.jpg'</span>).then( <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  </span><br><span class="line">      saveToLocal(data).then( <span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(result);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// .catch(err =&gt; &#123; console.log(err)&#125;); // 只能在.catch中处理</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123; </span><br><span class="line">    <span class="comment">// 这里捕获不了saveToLocal的错误</span></span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// await处理错误</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn6</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> convertToBase64(<span class="string">'http://1.jpg'</span>);</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> saveToLocal(data);</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（5）<strong>超时处理</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params">delay</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      rej(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"不用等了, 别傻了"</span>));</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">imageCrawler</span>(<span class="params">url, delay</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> img = <span class="keyword">await</span> <span class="built_in">Promise</span>.race([getImage(url), timeout(delay)]);</span><br><span class="line">    <span class="keyword">return</span> img;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（6）<strong>并发限制</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getImages</span>(<span class="params">urls, limit</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> running = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> r;</span><br><span class="line">  <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    r = resolve</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (running &lt; limit &amp;&amp; urls.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      running++;</span><br><span class="line">      <span class="keyword">let</span> url = urls.shift();</span><br><span class="line">      <span class="comment">// 这里要注意, async是异步</span></span><br><span class="line">      (<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> img = <span class="keyword">await</span> getImage(url);</span><br><span class="line">        running--;</span><br><span class="line">        <span class="built_in">console</span>.log(img)</span><br><span class="line">        <span class="keyword">if</span> (urls.length === <span class="number">0</span> &amp;&amp; running === <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"done"</span>)</span><br><span class="line">          <span class="keyword">return</span> r(<span class="string">"done"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          run();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)();</span><br><span class="line">      <span class="comment">// 立即到并发上限</span></span><br><span class="line">      run();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  run();</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里补充一下基础知识</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"wochhh"</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"wochhh"</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"wochhh"</span>)</span><br><span class="line">  <span class="keyword">let</span> img = <span class="keyword">await</span> convertToBase64Data(<span class="string">"..."</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(img)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"?2"</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"?2"</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"?2"</span>)</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"asdgfasgd"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"asdgfasgd"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"asdgfasgd"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">wochhh</span><br><span class="line">wochhh</span><br><span class="line">wochhh</span><br><span class="line">asdgfasgd</span><br><span class="line">asdgfasgd</span><br><span class="line">asdgfasgd</span><br><span class="line">?<span class="number">2</span></span><br><span class="line">?<span class="number">2</span></span><br><span class="line">?<span class="number">2</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Genretor篇&quot;&gt;&lt;a href=&quot;#Genretor篇&quot; class=&quot;headerlink&quot; title=&quot;Genretor篇&quot;&gt;&lt;/a&gt;Genretor篇&lt;/h1&gt;&lt;h4 id=&quot;运用场景&quot;&gt;&lt;a href=&quot;#运用场景&quot; class=&quot;headerli
      
    
    </summary>
    
    
    
      <category term="es6" scheme="http://yoursite.com/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>es6高级特性</title>
    <link href="http://yoursite.com/2019/11/05/es6%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/"/>
    <id>http://yoursite.com/2019/11/05/es6高级特性/</id>
    <published>2019-11-05T15:51:40.000Z</published>
    <updated>2019-11-06T02:10:22.039Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Reflect、Proxy、Symbol"><a href="#Reflect、Proxy、Symbol" class="headerlink" title="Reflect、Proxy、Symbol"></a>Reflect、Proxy、Symbol</h1><h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>引入：从根本上防止对象名属性名的冲突的机制。</p><p><code>Symbol</code>是<code>javascript</code>的第七种语言</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="built_in">Symbol</span>(<span class="string">"foo"</span>)</span><br><span class="line"><span class="comment">// symbol</span></span><br></pre></td></tr></table></figure><p><strong>参数为字符串</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>(<span class="string">'foo'</span>);</span><br><span class="line">s1.toString() <span class="comment">// "Symbol(foo)"</span></span><br><span class="line"></span><br><span class="line">s1.description <span class="comment">// "foo"</span></span><br></pre></td></tr></table></figure><p><strong>参数是对象</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用对象的toString()</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'abc'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> sym = <span class="built_in">Symbol</span>(obj);</span><br><span class="line">sym <span class="comment">// Symbol(abc)</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没有参数的情况</span></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>();</span><br><span class="line"></span><br><span class="line">s1 === s2 <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 有参数的情况</span></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>(<span class="string">'foo'</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>(<span class="string">'foo'</span>);</span><br><span class="line"></span><br><span class="line">s1 === s2 <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>可以转化为Boolean值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="built_in">Boolean</span>(sym) <span class="comment">// true</span></span><br><span class="line">!sym  <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sym) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="作为属性名"><a href="#作为属性名" class="headerlink" title="作为属性名"></a>作为属性名</h4><p>每一个 Symbol 值都是不相等的，保证不同名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySymbol = <span class="built_in">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一种写法</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;&#125;;</span><br><span class="line">a[mySymbol] = <span class="string">'Hello!'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种写法</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  [mySymbol]: <span class="string">'Hello!'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三种写法</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(a, mySymbol, &#123; <span class="attr">value</span>: <span class="string">'Hello!'</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上写法都得到同样结果</span></span><br><span class="line">a[mySymbol] <span class="comment">// "Hello!"</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为对象属性名时，不能用点运算符</span></span><br><span class="line"><span class="keyword">const</span> mySymbol = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span> a = &#123;&#125;;</span><br><span class="line"><span class="comment">// 点运算符后面总解析为字符串, 实际上读取的是字符串"mySymbol"</span></span><br><span class="line">a.mySymbol = <span class="string">'Hello!'</span>;</span><br><span class="line">a[mySymbol] <span class="comment">// undefined</span></span><br><span class="line">a[<span class="string">'mySymbol'</span>] <span class="comment">// "Hello!"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 同理</span></span><br><span class="line"><span class="comment">// 在对象的内部，使用 Symbol 值定义属性时，Symbol 值必须放在方括号之中。</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="built_in">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [s](arg) &#123;...&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj[s](<span class="number">123</span>);</span><br></pre></td></tr></table></figure><h4 id="定义一组常量"><a href="#定义一组常量" class="headerlink" title="定义一组常量"></a>定义一组常量</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> log = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">log.levels = &#123;</span><br><span class="line">  DEBUG: <span class="built_in">Symbol</span>(<span class="string">'debug'</span>),</span><br><span class="line">  INFO: <span class="built_in">Symbol</span>(<span class="string">'info'</span>),</span><br><span class="line">  WARN: <span class="built_in">Symbol</span>(<span class="string">'warn'</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p><strong>属性名的遍历</strong></p><p>Symbol 作为属性名，该属性不会出现在<code>for...in</code>、<code>for...of</code>循环中，也不会被<code>Object.keys()</code>、<code>Object.getOwnPropertyNames()</code>、<code>JSON.stringify()</code>返回。</p><p><strong>Object.getOwnPropertySymbols</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回值为数组</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> a = <span class="built_in">Symbol</span>(<span class="string">'a'</span>);</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">Symbol</span>(<span class="string">'b'</span>);</span><br><span class="line"></span><br><span class="line">obj[a] = <span class="string">'Hello'</span>;</span><br><span class="line">obj[b] = <span class="string">'World'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> objectSymbols = <span class="built_in">Object</span>.getOwnPropertySymbols(obj);</span><br><span class="line"></span><br><span class="line">objectSymbols</span><br><span class="line"><span class="comment">// [Symbol(a), Symbol(b)]</span></span><br></pre></td></tr></table></figure><p><strong>Reflect.ownKeys</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>(<span class="string">'my_key'</span>)]: <span class="number">1</span>,</span><br><span class="line">  enum: <span class="number">2</span>,</span><br><span class="line">  nonEnum: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Reflect</span>.ownKeys(obj)</span><br><span class="line"><span class="comment">//  ["enum", "nonEnum", Symbol(my_key)]</span></span><br></pre></td></tr></table></figure><h4 id="Symbol-for"><a href="#Symbol-for" class="headerlink" title="Symbol.for()"></a>Symbol.for()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>.for(<span class="string">'foo'</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>.for(<span class="string">'foo'</span>);</span><br><span class="line"></span><br><span class="line">s1 === s2 <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>和<code>Symbol()</code>的区别</strong></p><p>都会生成新的 Symbol。</p><p>区别：前者有全局登记特性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Symbol.keyFor()方法返回一个已登记的 Symbol 类型值的key</span></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>.for(<span class="string">"foo"</span>);</span><br><span class="line"><span class="built_in">Symbol</span>.keyFor(s1) <span class="comment">// "foo"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>(<span class="string">"foo"</span>);</span><br><span class="line"><span class="built_in">Symbol</span>.keyFor(s2) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>即使<code>for()</code>不在全局环境</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Symbol</span>.for(<span class="string">'bar'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> x = foo();</span><br><span class="line"><span class="keyword">const</span> y = <span class="built_in">Symbol</span>.for(<span class="string">'bar'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(x === y); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p><strong>消除魔术字符串</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArea</span>(<span class="params">shape, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> area = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (shape) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'Triangle'</span>: <span class="comment">// 魔术字符串</span></span><br><span class="line">      area = <span class="number">.5</span> * options.width * options.height;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">/* ... more code ... */</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getArea(<span class="string">'Triangle'</span>, &#123; <span class="attr">width</span>: <span class="number">100</span>, <span class="attr">height</span>: <span class="number">100</span> &#125;); <span class="comment">// 魔术字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 消除强耦合</span></span><br><span class="line"><span class="keyword">const</span> shapeType = &#123;</span><br><span class="line">  triangle: <span class="string">'Triangle'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 仔细发现shapeType.triangle等于哪个值并不重要，只要确保不会跟其他shapeType属性的值冲突即可</span></span><br><span class="line"><span class="keyword">const</span> shapeType = &#123;</span><br><span class="line">  triangle: <span class="built_in">Symbol</span>()</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>模块的 Singleton 模式</strong></p><blockquote><p>Singleton 模式指的是调用一个类，任何时候返回的都是同一个实例。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// global顶层对象实现</span></span><br><span class="line"><span class="comment">// mod.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.foo = <span class="string">'hello'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!global._foo) &#123;</span><br><span class="line">  global._foo = <span class="keyword">new</span> A();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = global._foo;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="built_in">require</span>(<span class="string">"./mod.js"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a.foo);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 问题 global._foo是可写的 如何模块都可一修改</span></span><br><span class="line"><span class="comment">// 脚本mod.js就会失真</span></span><br><span class="line">global._foo = &#123; <span class="attr">foo</span>: <span class="string">'world'</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="built_in">require</span>(<span class="string">'./mod.js'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a.foo);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Symbol</span></span><br><span class="line"><span class="comment">// mod.js</span></span><br><span class="line"><span class="keyword">const</span> FOO_KEY = <span class="built_in">Symbol</span>(<span class="string">'foo'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.foo = <span class="string">'hello'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!global[FOO_KEY]) &#123;</span><br><span class="line">  global[FOO_KEY] = <span class="keyword">new</span> A();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = global[FOO_KEY];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 外部文件无法通过键名来改写了(无for())</span></span><br><span class="line"><span class="comment">// 注意：虽然 Node 会将脚本的执行结果缓存，一般情况下，不会多次执行同一个脚本，但是用户可以手动清除缓存，所以也不是绝对可靠。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Reflect、Proxy、Symbol&quot;&gt;&lt;a href=&quot;#Reflect、Proxy、Symbol&quot; class=&quot;headerlink&quot; title=&quot;Reflect、Proxy、Symbol&quot;&gt;&lt;/a&gt;Reflect、Proxy、Symbol&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
</feed>
