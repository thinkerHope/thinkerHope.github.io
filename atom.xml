<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>记录我的点滴</title>
  
  <subtitle>Yu Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-30T12:27:25.072Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>boygreen_Yu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于性能优化的文章</title>
    <link href="http://yoursite.com/2020/03/30/%E5%85%B3%E4%BA%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E6%96%87%E7%AB%A0/"/>
    <id>http://yoursite.com/2020/03/30/关于性能优化的文章/</id>
    <published>2020-03-30T12:13:16.000Z</published>
    <updated>2020-03-30T12:27:25.072Z</updated>
    
    <content type="html"><![CDATA[<p>前端性能优化知识点又杂又多，用于系统了解前端性能优化，在开发中结合实际总结积累，最终形成相对完善的知识体系。</p><p>（1）前端性能优化的七大手段：</p><p><a href="https://www.cnblogs.com/xiaohuochai/p/9178390.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaohuochai/p/9178390.html</a></p><p>（2）浅谈React性能优化的方向</p><p><a href="https://juejin.im/post/5d045350f265da1b695d5bf2#comment" target="_blank" rel="noopener">https://juejin.im/post/5d045350f265da1b695d5bf2#comment</a></p><p>（3）CSS性能优化的8个技巧</p><p><a href="https://juejin.im/post/5b6133a351882519d346853f?utm_source=gold_browser_extension#comment" target="_blank" rel="noopener">https://juejin.im/post/5b6133a351882519d346853f?utm_source=gold_browser_extension#comment</a></p><p>（4）嗨，送你一张Web性能优化地图</p><p><a href="https://mp.weixin.qq.com/s/C2Zx3KPNPkgj-aHnOY43Iw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/C2Zx3KPNPkgj-aHnOY43Iw</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前端性能优化知识点又杂又多，用于系统了解前端性能优化，在开发中结合实际总结积累，最终形成相对完善的知识体系。&lt;/p&gt;
&lt;p&gt;（1）前端性能优化的七大手段：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/xiaohuochai/p/91783
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>css优化和编码优化</title>
    <link href="http://yoursite.com/2020/03/30/css%E4%BC%98%E5%8C%96%E5%92%8C%E7%BC%96%E7%A0%81%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2020/03/30/css优化和编码优化/</id>
    <published>2020-03-30T12:02:42.000Z</published>
    <updated>2020-03-30T12:02:42.223Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>异步加载css文件</title>
    <link href="http://yoursite.com/2020/03/26/%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BDcss%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2020/03/26/异步加载css文件/</id>
    <published>2020-03-26T01:24:11.000Z</published>
    <updated>2020-03-26T02:42:04.717Z</updated>
    
    <content type="html"><![CDATA[<h4 id="preload"><a href="#preload" class="headerlink" title="preload"></a><code>preload</code></h4><p>都知道，<code>stylesheets</code>的加载会阻塞渲染，延迟页面展示，为了提高首屏渲染的加载速度，可以将非关键CSS延迟异步加载，&lt;link rel=”preload”&gt;提供了支持。其次，<code>loadCSS</code>(<a href="https://github.com/filamentgroup/loadCSS)提供`JavaScript" target="_blank" rel="noopener">https://github.com/filamentgroup/loadCSS)提供`JavaScript</a> Polyfill`以支持跨浏览器兼容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preload"</span> <span class="attr">href</span>=<span class="string">"path/to/mystylesheet.css"</span> <span class="attr">as</span>=<span class="string">"style"</span> <span class="attr">onload</span>=<span class="string">"this.onload=null;this.rel='stylesheet'"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"path/to/mystylesheet.css"</span>&gt;</span><span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">/*! loadCSS rel=preload polyfill. [c]2017 Filament Group, Inc. MIT License */</span><br><span class="line">(function()&#123; ... &#125;());</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>rel=preload</code>，会让浏览器的主渲染机制介入前就进行预加载，但它载入后并不会被解析。load可以处理这个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"preload"</span> href=<span class="string">"path/to/mystylesheet.css"</span> <span class="keyword">as</span>=<span class="string">"style"</span> onload=<span class="string">"this.rel='stylesheet'"</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="loadCSS-Funtion-API"><a href="#loadCSS-Funtion-API" class="headerlink" title="loadCSS Funtion API"></a><code>loadCSS Funtion API</code></h4><ul><li><p><strong>before</strong></p><p>默认，loadCSS把stylesheet插入到页面所有的CSS和JS资源后面，使用before精确插入点</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">"loadcss"</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// load a CSS file just before the script element containing this code</span></span></span><br><span class="line"><span class="javascript">  loadCSS( <span class="string">"path/to/mystylesheet.css"</span>, <span class="built_in">document</span>.getElementById(<span class="string">"loadcss"</span>) );</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>*<em>media *</em>  默认值是all</p></li><li><p><strong>attributes</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">loadCSS( </span><br><span class="line">  <span class="string">"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"</span>,</span><br><span class="line">  <span class="literal">null</span>,</span><br><span class="line">  <span class="literal">null</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"crossorigin"</span>: <span class="string">"anonymous"</span>,</span><br><span class="line">    <span class="string">"integrity"</span>: <span class="string">"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm"</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p><strong>Using with <code>onload</code></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stylesheet = loadCSS( <span class="string">"path/to/mystylesheet.css"</span> );</span><br><span class="line">onloadCSS( stylesheet, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"Stylesheet has loaded."</span> );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;preload&quot;&gt;&lt;a href=&quot;#preload&quot; class=&quot;headerlink&quot; title=&quot;preload&quot;&gt;&lt;/a&gt;&lt;code&gt;preload&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;都知道，&lt;code&gt;stylesheets&lt;/code&gt;的加载会阻塞渲染，
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>移动端点击返回强制刷新页面方案</title>
    <link href="http://yoursite.com/2020/03/25/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%82%B9%E5%87%BB%E8%BF%94%E5%9B%9E%E5%BC%BA%E5%88%B6%E5%88%B7%E6%96%B0%E9%A1%B5%E9%9D%A2%E6%96%B9%E6%A1%88/"/>
    <id>http://yoursite.com/2020/03/25/移动端点击返回强制刷新页面方案/</id>
    <published>2020-03-25T15:53:28.000Z</published>
    <updated>2020-03-25T15:53:28.137Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>HTTP缓存相关的精彩文章</title>
    <link href="http://yoursite.com/2020/03/25/HTTP%E7%BC%93%E5%AD%98%E7%9B%B8%E5%85%B3%E7%9A%84%E7%B2%BE%E5%BD%A9%E6%96%87%E7%AB%A0/"/>
    <id>http://yoursite.com/2020/03/25/HTTP缓存相关的精彩文章/</id>
    <published>2020-03-25T09:28:39.000Z</published>
    <updated>2020-03-25T09:46:32.844Z</updated>
    
    <content type="html"><![CDATA[<p>掘金学习链接:</p><p><a href="https://juejin.im/post/5a673af06fb9a01c927ed880" target="_blank" rel="noopener">https://juejin.im/post/5a673af06fb9a01c927ed880</a></p><p><a href="https://juejin.im/post/5c136bd16fb9a049d37efc47" target="_blank" rel="noopener">https://juejin.im/post/5c136bd16fb9a049d37efc47</a></p><p>强缓存相关字段:</p><ul><li><p><code>Pragma</code>: 仅作为<code>HTTP/1.0</code>向后兼容, 为通用请求头首部字段，<code>RFC</code>中该字段只有<code>no-cache</code>一个可选值</p></li><li><p><code>Cache-Control</code></p></li><li><p><code>Expires</code></p></li></ul><p><code>Cache-Control</code>为非0的max-age或者设置了大于请求日期的Expires才有可能命中强缓存(同时时设置了Expires和max-age,则Expires会被忽略)</p><p>当满足这个条件,同时响应报文首部中Cache-Control不存在no-cache、no-store且请求报文首部不存在Pragma字段,才会真正命中强缓存</p><p>协商缓存相关字段:</p><ul><li><p><code>Last-Modified</code>(Response Header)/<code>If-Modified-Since</code>(Rquest Header)</p><p> <code>If-Modified-Since</code>是一个请求首部字段，并且只能用在<strong>GET</strong>或者<strong>HEAD</strong>请求中。</p><p><code>Last-Modified</code>是一个响应首部字段，包含服务器认定的资源作出修改的日期及时间。当带着<code>If-Modified-Since</code>头访问服务器请求资源时，服务器会检查<code>Last-Modified</code>，如果<code>Last-Modified</code>的时间早于或等于<code>If-Modified-Since</code>则会返回一个不带主体的<code>304</code>响应，否则将重新返回资源</p></li><li><p><code>ETag</code>(Response Header)/<code>If-None-Match</code>(Rquest Header)</p><p><code>ETag</code>是一个响应首部字段，它是根据实体内容生成的一段<code>hash</code>字符串，<strong>标识资源的状态</strong>，由服务端产生。<code>If-None-Match</code>是一个条件式的请求首部。如果请求资源时在请求首部加上这个字段，值为之前服务器端返回的资源上的<code>ETag</code>，则当且仅当服务器上没有任何资源的<code>ETag</code>属性值与这个首部中列出的时候，服务器才会返回带有所请求资源实体的200响应，否则服务器会返回不带实体的<code>304</code>响应。<code>ETag</code>优先级比<code>Last-Modified</code>高，同时存在时会以<code>ETag</code>为准。</p><blockquote><p>ETag属性之间的比较采用的是<strong>弱比较算法</strong>，即两个文件除了每个比特都相同外，内容一致也可以认为是相同的。例如，如果两个页面仅仅在页脚的生成时间有所不同，就可以认为二者是相同的。</p></blockquote></li></ul><p><strong>因为<code>ETag</code>的特性，所以相较于<code>Last-Modified</code>有一些优势：</strong></p><ul><li><p>某些情况下服务器无法获取资源的最后修改时间</p></li><li><p>资源的最后修改时间变了但是内容没变，使用<code>ETag</code>可以正确缓存</p></li><li><p>如果资源修改非常频繁，在秒以下的时间进行修改，<code>Last-Modified</code>只能精确到秒</p></li></ul><p><img src="/home/boygreen/MyBlog/source/_posts/HTTP%E7%BC%93%E5%AD%98%E7%9B%B8%E5%85%B3%E7%9A%84%E7%B2%BE%E5%BD%A9%E6%96%87%E7%AB%A0/etag.png" alt></p><p><img src="/home/boygreen/MyBlog/source/_posts/HTTP%E7%BC%93%E5%AD%98%E7%9B%B8%E5%85%B3%E7%9A%84%E7%B2%BE%E5%BD%A9%E6%96%87%E7%AB%A0/cache01.png" alt></p><p><img src="/home/boygreen/MyBlog/source/_posts/HTTP%E7%BC%93%E5%AD%98%E7%9B%B8%E5%85%B3%E7%9A%84%E7%B2%BE%E5%BD%A9%E6%96%87%E7%AB%A0/cache02.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;掘金学习链接:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://juejin.im/post/5a673af06fb9a01c927ed880&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://juejin.im/post/5a673af06f
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>使用postcss来做移动端适配</title>
    <link href="http://yoursite.com/2020/03/24/%E4%BD%BF%E7%94%A8postcss%E6%9D%A5%E5%81%9A%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/"/>
    <id>http://yoursite.com/2020/03/24/使用postcss来做移动端适配/</id>
    <published>2020-03-24T10:01:08.000Z</published>
    <updated>2020-03-24T10:11:27.785Z</updated>
    
    <content type="html"><![CDATA[<p><code>miui课程表</code>移动端适配插件，在项目里只要按照设计稿给的<code>px</code>填上去就行了，插件会根据机型比例将<code>px</code>自动转换为<code>vw</code></p><p><code>postcss.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: &#123;</span><br><span class="line">    <span class="string">'postcss-px-to-viewport'</span>: &#123;</span><br><span class="line">      unitToConvert: <span class="string">'px'</span>,<span class="comment">// 将要转化的单位</span></span><br><span class="line">      viewportWidth: <span class="number">1080</span>,<span class="comment">// (Number)视图的宽度</span></span><br><span class="line">      unitPrecision: <span class="number">5</span>,<span class="comment">// (Number)指定`px`转换为视窗单位值的小数位数，默认是5</span></span><br><span class="line">      propList: [<span class="string">'*'</span>],<span class="comment">// (Array)指定可以转换的css属性，默认是['*']，代表全部属性进行转换</span></span><br><span class="line">      viewportUnit: <span class="string">'vw'</span>,<span class="comment">// (String)指定需要转换成的视窗单位，默认vw</span></span><br><span class="line">      fontViewportUnit: <span class="string">'vw'</span>,<span class="comment">// (String)指定字体需要转换成的视窗单位，默认vw</span></span><br><span class="line">      selectorBlackList: [],<span class="comment">// (Array) 指定不转换为视窗单位的类，保留px，值为string或正则regexp，建议定义一至两个通用的类名</span></span><br><span class="line">      minPixelValue: <span class="number">1</span>,<span class="comment">// (Number) 默认值1，小于或等于`1px`不转换为视窗单位,</span></span><br><span class="line">      mediaQuery: <span class="literal">false</span>,<span class="comment">// (Boolean) 是否在媒体查询时也转换px，默认false</span></span><br><span class="line">      replace: <span class="literal">true</span>,<span class="comment">// 替换包含vw的规则，而不是添加回退。</span></span><br><span class="line">      exclude: [],<span class="comment">// (Array or Regexp) 设置忽略文件，如node_modules</span></span><br><span class="line">      landscape: <span class="literal">false</span>,</span><br><span class="line">      landscapeUnit: <span class="string">'vw'</span>,</span><br><span class="line">      landscapeWidth: <span class="number">568</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你的样式需要做根据视口大小来调整宽度，这个脚本可以将你<code>CSS</code>中的<code>px</code>单位转化为<code>vw</code>，<code>1vw</code>等于<code>1/100</code>视口宽度。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;miui课程表&lt;/code&gt;移动端适配插件，在项目里只要按照设计稿给的&lt;code&gt;px&lt;/code&gt;填上去就行了，插件会根据机型比例将&lt;code&gt;px&lt;/code&gt;自动转换为&lt;code&gt;vw&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;postcss.config.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>webpack之ExtractTextPlugin插件</title>
    <link href="http://yoursite.com/2020/03/23/webpack%E4%B9%8BExtractTextPlugin%E6%8F%92%E4%BB%B6/"/>
    <id>http://yoursite.com/2020/03/23/webpack之ExtractTextPlugin插件/</id>
    <published>2020-03-23T15:03:54.000Z</published>
    <updated>2020-03-23T15:32:48.419Z</updated>
    
    <content type="html"><![CDATA[<p>为什么要使用<code>ExtractTextPlugin</code>？不用行不行？</p><p>如果不用的话，会产生一些css和js混乱的问题，让我们一起将在不用<code>ExtractTextPlugin</code>的情景重现一下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        <span class="string">'index'</span>: [<span class="string">'./src/index.js'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    ouput: &#123;</span><br><span class="line">        path: path.join(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123; <span class="attr">loader</span>: <span class="string">"style-loader"</span> &#125;,</span><br><span class="line">                    &#123; <span class="attr">loader</span>: <span class="string">"css-loader"</span> &#125;,</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后查看打包结果<code>index.bundle.js</code>，可以发现，<code>css</code>被打包到了<code>js</code>文件中，以字符串的形式存在，并且整个<code>index.bundle.js</code>比平常大了不少。就像这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exports.push([<span class="built_in">module</span>.i, <span class="string">"p&#123;\n, color: red;\n&#125;"</span>, <span class="string">""</span>]);</span><br></pre></td></tr></table></figure><p>此时如果有<code>html</code>引用该<code>JS</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./../dist/index.bundle.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器打开<code>index.html</code>，就会发现<code>css</code>以<code>style</code>的形式被插到了<code>head</code>：</p><p><img src="/home/boygreen/MyBlog/source/_posts/webpack%E4%B9%8BExtractTextPlugin%E6%8F%92%E4%BB%B6/webpack.png" alt></p><p>如果使用<code>ExtractTextPlugin</code>插件，修改一下配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        <span class="string">'index'</span>: [<span class="string">'./src/index.js'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    ouput: &#123;</span><br><span class="line">        path: path.join(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                <span class="comment">// use: [</span></span><br><span class="line">                <span class="comment">//     &#123; loader: "style-loader" &#125;,</span></span><br><span class="line">                <span class="comment">//     &#123; loader: "css-loader" &#125;,</span></span><br><span class="line">                <span class="comment">// ]</span></span><br><span class="line">                use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">                    fallback: <span class="string">"style-loader"</span>,</span><br><span class="line">                    use: <span class="string">"css-loader"</span>,</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"styles.css"</span>),</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打包并查看dist，可以发现，<code>index.bundle.js</code>文件恢复了正常，并多出来一个<code>styles.css</code>文件。如果配合<code>HtmlWebpackPlugin</code>插件则自动插入<code>index.html</code>中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"styles.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./../dist/index.bundle.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><code>ExtractTextPlugin</code>插件属性</strong></p><ul><li><p><strong>new ExtractTextPlugin(options:filename|object) :</strong></p><ul><li>id:此为插件的唯一标识，默认为自动生成。</li><li>filename:定义文件的名称。如果有多个入口文件时，应该定义为：[name].css。</li><li>allChunks:当使用 <code>CommonsChunkPlugin</code> 并且在公共 chunk 中有提取的 chunk（来自<code>ExtractTextPlugin.extract</code>）时，<code>allChunks</code> **必须设置为 <code>true</code>。</li><li>ignoreOrder:禁用顺序检查 (这对 CSS 模块很有用！)，默认 <code>false</code>。</li><li>disable:禁用插件</li></ul></li><li><p><strong>ExtractTextPlugin.extract(options:loader|object) :</strong></p><ul><li>options.use:指需要什么样的loader去编译文件</li><li>options.fallback:编译后用什么loader来提取css文件</li><li>options.publicfile:用来覆盖项目路径,生成该css文件的文件路径</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为什么要使用&lt;code&gt;ExtractTextPlugin&lt;/code&gt;？不用行不行？&lt;/p&gt;
&lt;p&gt;如果不用的话，会产生一些css和js混乱的问题，让我们一起将在不用&lt;code&gt;ExtractTextPlugin&lt;/code&gt;的情景重现一下。&lt;/p&gt;
&lt;figure cl
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>彻底理解正则表达式的^$符</title>
    <link href="http://yoursite.com/2020/03/19/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84-%E7%AC%A6/"/>
    <id>http://yoursite.com/2020/03/19/彻底理解正则表达式的-符/</id>
    <published>2020-03-19T10:08:26.000Z</published>
    <updated>2020-03-20T03:20:07.938Z</updated>
    
    <content type="html"><![CDATA[<h4 id="JS-正则表达式-详解"><a href="#JS-正则表达式-详解" class="headerlink" title="JS 正则表达式^$详解"></a>JS 正则表达式^$详解</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp" target="_blank" rel="noopener">MDN</a>描述</p><p><img src="/home/boygreen/MyBlog/source/_posts/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84-%E7%AC%A6/asd.png" alt></p><p>我们知道正则是一种匹配模式，要么匹配字符，要么匹配位置。这里我们得从这两种匹配情况分别解释这两个字符。</p><p><strong>从匹配字符角度</strong></p><p>当用于匹配字符时，^与$更多是作为匹配出精准结果的辅助条件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'123'</span>.match(<span class="regexp">/^\d/g</span>);<span class="comment">//[1]</span></span><br><span class="line"><span class="string">'123'</span>.match(<span class="regexp">/\d$/g</span>);<span class="comment">//[3]</span></span><br></pre></td></tr></table></figure><p><strong>从匹配位置角度</strong></p><p><img src="/home/boygreen/MyBlog/source/_posts/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84-%E7%AC%A6/%5E$.png" alt></p><p>所以当我们在匹配位置时，<code>^$</code>也成为了我们需要匹配的结果，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'1234'</span>.replace(<span class="regexp">/^|$/g</span>, <span class="string">'❀'</span>);<span class="comment">// "❀1234❀"</span></span><br></pre></td></tr></table></figure><p>当然，在匹配位置时<code>^</code>与<code>$</code>也是帮助我们精确位置的辅助条件，比如常用的千位分隔符正则：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'12345678'</span>.replace(<span class="regexp">/''(?!^)''(?=(\d&#123;3&#125;)+$)/g</span>, <span class="string">','</span>);<span class="comment">// "12,345,678"</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'12345678'</span>.match(<span class="regexp">/(?!^)(?=(\d&#123;3&#125;)+$)/g</span>)</span><br><span class="line"><span class="comment">// 输出['', '']</span></span><br></pre></td></tr></table></figure><p>刚学正则的时候，很难理解^$同时存在是怎么匹配的，现在想想其实同时写时只是限制字符的起点与终点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 栗子</span></span><br><span class="line">/<span class="number">123</span>/.test(<span class="string">'   123   '</span>) <span class="comment">//true</span></span><br><span class="line">/^<span class="number">123</span>$/.test(<span class="string">'   123   '</span>) <span class="comment">//false</span></span><br><span class="line">/^<span class="number">123</span>$/.test(<span class="number">153</span>) <span class="comment">//false</span></span><br><span class="line">/^<span class="number">123</span>$/.test(<span class="number">123</span>) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>注意</p><p>^除了作为脱字符表示从头匹配，开头位置两个含义外，还能作为反义字符使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/[^<span class="number">123</span>]/.test(<span class="number">3</span>) <span class="comment">//false</span></span><br><span class="line">/[^<span class="number">123</span>]/.test(<span class="number">4</span>) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>多行模式</p><p><code>[^]</code>可以匹配任何字符，包括<code>/n</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">"Please yes\nmake my day!"</span>;</span><br><span class="line">s.match(<span class="regexp">/yes.*day/</span>)</span><br><span class="line"><span class="comment">// Returns null</span></span><br><span class="line">s.match(<span class="regexp">/yes[^]*day/</span>)</span><br><span class="line"><span class="comment">// Returns 'yes\nmake my day'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;JS-正则表达式-详解&quot;&gt;&lt;a href=&quot;#JS-正则表达式-详解&quot; class=&quot;headerlink&quot; title=&quot;JS 正则表达式^$详解&quot;&gt;&lt;/a&gt;JS 正则表达式^$详解&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://developer.mozil
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>浏览器渲染原理及过程</title>
    <link href="http://yoursite.com/2020/03/10/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86%E5%8F%8A%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/03/10/浏览器渲染原理及过程/</id>
    <published>2020-03-10T15:01:16.000Z</published>
    <updated>2020-03-23T13:13:18.036Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/home/boygreen/MyBlog/source/_posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86%E5%8F%8A%E8%BF%87%E7%A8%8B/%E6%B8%B2%E6%9F%93.png" alt></p><p>浏览器渲染过程如下：</p><ol><li>解析HTML，生成DOM树，解析CSS，生成CSSOM树</li><li>将DOM树和CSSOM树结合，生成渲染树(Render Tree)</li><li>Layout(回流):根据生成的渲染树，进行回流(Layout)，得到节点的几何信息（位置，大小）</li><li>Painting(重绘):根据渲染树以及回流得到的几何信息，得到节点的绝对像素</li><li>Display:将像素发送给GPU，展示在页面上。（这一步其实还有很多内容，比如会在GPU将多个合成层合并为同一个层，并展示在页面中。而css3硬件加速的原理则是新建合成层）</li></ol><h2 id="解析DOM树和CSSOM树"><a href="#解析DOM树和CSSOM树" class="headerlink" title="解析DOM树和CSSOM树"></a>解析DOM树和CSSOM树</h2><h4 id="HTML标记进行Dom树解析"><a href="#HTML标记进行Dom树解析" class="headerlink" title="HTML标记进行Dom树解析"></a>HTML标记进行Dom树解析</h4><p>浏览器接收到html代码，可能是一份完整的文档，也可能是一个chunk，即开始解析。解析过程是先构建dom树，再根据dom树构建渲染树，最后浏览器将渲染树绘制到页面上。<br>构建dom树的过程即根据html代码自上而下进行构建，当遇到script文件加载／执行会阻塞后面dom树的构建（javascript可能会改变dom树），而遇到css文件则会阻塞Render Tree的构建，即dom树依然继续构建（除非遇到script标签并且css文件依旧未加载完成），但不会渲染绘制到页面上。而无论哪个阻塞，该加载的文件还是会加载，例如html文档中的其他css／js／图片文件。<br>另外javascript被加载后就会被执行，执行的过程也阻塞DOM树的构建。是执行完了才解析其他内容，而不是执行完了才加载其他内容。</p><p><code>img</code>的加载不会阻塞html的解析，但img加载后并不渲染，它需要等待Render Tree</p><p>生成完后才和Render Tree一起渲染出来。未下载完的图片需等下载完后才渲染。</p><h4 id="CSS标记进行CSSOM树解析"><a href="#CSS标记进行CSSOM树解析" class="headerlink" title="CSS标记进行CSSOM树解析"></a>CSS标记进行CSSOM树解析</h4><p><strong>注意</strong></p><p>render tree不是等到CSSOM树和DOM树构建完成才构建的，边解析CSS和DOM就会渲染了。</p><h4 id="JS异步脚本"><a href="#JS异步脚本" class="headerlink" title="JS异步脚本"></a>JS异步脚本</h4><h2 id="CSS和JS阻塞问题总结"><a href="#CSS和JS阻塞问题总结" class="headerlink" title="CSS和JS阻塞问题总结"></a>CSS和JS阻塞问题总结</h2><p><strong>总结：</strong></p><ul><li>CSS<ul><li>css加载不会阻塞DOM树的解析，但会阻塞Render Tree的构建 (即DOM树的渲染)</li><li><strong>css加载和解析会阻塞后面js语句的执行</strong></li></ul></li><li>JS<ul><li>JS的加载和执行都会阻塞页面的渲染</li><li>JS不阻塞资源的加载(这有赖于chrome的<code>预加载机制</code>)</li><li>JS顺序执行，阻塞后续JS逻辑的执行</li></ul></li></ul><p><strong>提高css加载速度:</strong></p><ul><li>使用CDN(因为CDN会根据你的网络状况，替你挑选最近的一个具有缓存内容的节点为你提供资源，因此可以减少加载时间)</li><li>对css进行压缩(可以用很多打包工具，比如webpack,gulp等，也可以通过开启gzip压缩)</li><li>合理的使用缓存(设置cache-control,expires,以及E-tag都是不错的，不过要注意一个问题，就是文件更新后，你要避免缓存而带来的影响。其中一个解决防范是在文件名字后面加一个版本号)</li><li>减少http请求数，将多个css文件合并，或者是干脆直接写成内联样式(内联样式的一个缺点就是不能缓存)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/home/boygreen/MyBlog/source/_posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86%E5%8F%8A%E8%BF%87%E7%A8%8B/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>前端图片优化</title>
    <link href="http://yoursite.com/2020/03/10/%E5%89%8D%E7%AB%AF%E5%9B%BE%E7%89%87%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2020/03/10/前端图片优化/</id>
    <published>2020-03-10T08:55:25.000Z</published>
    <updated>2020-03-10T12:17:59.179Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图片类型和使用场景"><a href="#图片类型和使用场景" class="headerlink" title="图片类型和使用场景"></a>图片类型和使用场景</h2><p>常用的<code>web</code>图片格式有：<code>JPEG/JPG</code>、<code>PNG</code>、<code>WebP</code>、<code>Base64</code>、<code>SVG</code></p><p><strong>JPEG/JPG</strong><br>特点：有损压缩、体积小、加载快、不支持透明<br><strong>适用场景</strong>：适用于呈现色彩丰富的图片，在我们日常开发中，JPG 图片经常作为大的背景图、轮播图或 Banner 图出现。</p><p><strong>PNG</strong><br>特点：无损压缩、质量高、体积大、支持透明<br><strong>适用场景</strong>：PNG 在处理线条和颜色对比度方面有优势，主要用它来呈现小的 Logo、颜色简单且对比强烈的图片或背景等。</p><p><strong>SVG</strong><br>特点：文本文件、体积小、不失真、兼容性好<br><strong>适用场景</strong>：将 SVG 写入独立文件后引入 HTML</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;文件名.svg&quot; alt=&quot;&quot;&gt;</span><br></pre></td></tr></table></figure><p><strong>Base64</strong><br>特点：文本文件、依赖编码、小图标解决方案<br>适用场景：小图标，更新频率非常低，作为雪碧图的补充</p><p><strong>WebP</strong></p><blockquote><p>WebP 是 Google 专为 Web 开发的一种旨在加快图片加载速度的图片格式，它支持有损压缩和无损压缩。</p></blockquote><p>特点：全能但存在兼容性问题<br><strong>使用场景</strong>：限制我们使用 <code>WebP</code> 的最大问题不是“这个图片是否适合用 <code>WebP</code> 呈现”，而是“浏览器是否允许 <code>WebP</code>”</p><h2 id="图片优化方案"><a href="#图片优化方案" class="headerlink" title="图片优化方案"></a>图片优化方案</h2><h4 id="减少图片体积"><a href="#减少图片体积" class="headerlink" title="减少图片体积"></a>减少图片体积</h4><ul><li><strong>采用<code>WebP</code>格式的图片，能够在不降低图片质量的前提下减小图片的体积。</strong></li></ul><blockquote><p>WebP 的优势是它具有更优的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量；同时具备了无损和有损的压缩模式、Alpha 透明以及动画的特性，在 JPEG 和 PNG 上的转化效果都相当优秀、稳定和统一。</p></blockquote><p>如何判断当前浏览器是否支持<code>WebP</code>？</p><p>参考谷歌网站做法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// check_webp_feature:</span></span><br><span class="line"><span class="comment">//   'feature' can be one of 'lossy', 'lossless', 'alpha' or 'animation'.</span></span><br><span class="line"><span class="comment">//   'callback(feature, result)' will be passed back the detection result (in an asynchronous way!)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_webp_feature</span>(<span class="params">feature, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> kTestImages = &#123;</span><br><span class="line">        lossy: <span class="string">"UklGRiIAAABXRUJQVlA4IBYAAAAwAQCdASoBAAEADsD+JaQAA3AAAAAA"</span>,</span><br><span class="line">        lossless: <span class="string">"UklGRhoAAABXRUJQVlA4TA0AAAAvAAAAEAcQERGIiP4HAA=="</span>,</span><br><span class="line">        alpha: <span class="string">"UklGRkoAAABXRUJQVlA4WAoAAAAQAAAAAAAAAAAAQUxQSAwAAAARBxAR/Q9ERP8DAABWUDggGAAAABQBAJ0BKgEAAQAAAP4AAA3AAP7mtQAAAA=="</span>,</span><br><span class="line">        animation: <span class="string">"UklGRlIAAABXRUJQVlA4WAoAAAASAAAAAAAAAAAAQU5JTQYAAAD/////AABBTk1GJgAAAAAAAAAAAAAAAAAAAGQAAABWUDhMDQAAAC8AAAAQBxAREYiI/gcA"</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">    img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> result = (img.width &gt; <span class="number">0</span>) &amp;&amp; (img.height &gt; <span class="number">0</span>);</span><br><span class="line">        callback(feature, result);</span><br><span class="line">    &#125;;</span><br><span class="line">    img.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        callback(feature, <span class="literal">false</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    img.src = <span class="string">"data:image/webp;base64,"</span> + kTestImages[feature];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理：对每一种格式的webp(有损，无损，alpha通道，动态)生成一个很小像素的图片，在浏览器中渲染，如果没有问题，就代表支持webp。</p><p>也可以让服务器端来判断返回什么格式的图片，服务器根据 HTTP 请求头部的 Accept 字段来决定返回什么格式的图片。当 Accept 字段包含 image/webp 时，就返回 WebP 格式的图片，否则返回原图。</p><ul><li><strong>SVGO</strong></li></ul><p>利用<code>SVGO</code>压缩<code>svg</code>文件的大小</p><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>采用HTTP缓存</p><p>谷歌最佳实践中指出：</p><blockquote><p>对于静态素材资源或不常变化的素材资源，我们建议至少缓存 1 周，至多缓存 1 年。</p></blockquote><h2 id="图片懒加载（LazyLoad）"><a href="#图片懒加载（LazyLoad）" class="headerlink" title="图片懒加载（LazyLoad）"></a>图片懒加载（LazyLoad）</h2><p><strong>原理</strong></p><p>将页面中的<code>img</code>标签<code>src</code>指向一张小图片或者<code>src</code>为空，然后定义<code>data-src</code>属性指向真实的图片。<code>src</code>指向一张默认的图片，否则当<code>src</code>为空时也会向服务器发送一次请求。可以指向<code>loading</code>的地址。</p><blockquote><p>注：图片要指定宽高，才能正确获取<code>img.offsetTop</code></p></blockquote><p><strong>具体实现</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        img &#123;</span><br><span class="line">            display: block;</span><br><span class="line">            margin-bottom: 50px;</span><br><span class="line">            width: 400px;</span><br><span class="line">            height: 400px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"default.jpg"</span> <span class="attr">data-src</span>=<span class="string">"http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"default.jpg"</span> <span class="attr">data-src</span>=<span class="string">"http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"default.jpg"</span> <span class="attr">data-src</span>=<span class="string">"http://ww1.sinaimg.cn/large/006y8mN6gw1fa7kaed2hpj30sg0l9q54.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"default.jpg"</span> <span class="attr">data-src</span>=<span class="string">"http://ww1.sinaimg.cn/large/006y8mN6gw1fa7kaed2hpj30sg0l9q54.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"default.jpg"</span> <span class="attr">data-src</span>=<span class="string">"http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"default.jpg"</span> <span class="attr">data-src</span>=<span class="string">"http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"default.jpg"</span> <span class="attr">data-src</span>=<span class="string">"http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"default.jpg"</span> <span class="attr">data-src</span>=<span class="string">"http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"default.jpg"</span> <span class="attr">data-src</span>=<span class="string">"http://ww1.sinaimg.cn/large/006y8mN6gw1fa7kaed2hpj30sg0l9q54.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"default.jpg"</span> <span class="attr">data-src</span>=<span class="string">"http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"default.jpg"</span> <span class="attr">data-src</span>=<span class="string">"http://ww4.sinaimg.cn/large/006y8mN6gw1fa5obmqrmvj305k05k3yh.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'img'</span>).length;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"img"</span>);</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">0</span>; <span class="comment">// 存储图片加载到的位置，避免每次都从第一张图片开始遍历</span></span><br><span class="line"></span><br><span class="line">    lazyload(); <span class="comment">// 页面载入完毕加载可视区域内的图片</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.onscroll = lazyload;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">lazyload</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">var</span> seeHeight = <span class="built_in">document</span>.documentElement.clientHeight; </span><br><span class="line">        <span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop; </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = n; i &lt; num; i++) &#123;</span><br><span class="line">            <span class="comment">// img从页面底部开始进入可视区域</span></span><br><span class="line">            <span class="keyword">if</span> (img[i].offsetTop &lt; seeHeight + scrollTop) &#123;</span><br><span class="line">                <span class="keyword">if</span> (img[i].getAttribute(<span class="string">"src"</span>) == <span class="string">"default.jpg"</span>) &#123;</span><br><span class="line">                    img[i].src = img[i].getAttribute(<span class="string">"data-src"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                n = i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>使用节流函数进行性能优化</strong></p><p>如果直接将函数绑定在<code>scroll</code>事件上，当页面滚动时，函数会被高频触发，这非常影响浏览器的性能。</p><p>我想实现限制触发频率，来优化性能。</p><p>节流函数：只允许一个函数在N秒内执行一次。下面是一个简单的节流函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// throttle函数省略</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>,throttle(lazyload, <span class="number">500</span>, <span class="number">1000</span>));</span><br></pre></td></tr></table></figure><p><code>IntersectionObserver</code>来实现图片可视区域的懒加载</p><p>即使使用了函数节流，也会造成页面回流</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>利用雪碧图减少http请求</li><li>base64编码内联小图片</li><li>CDN加速</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>性能优化需要了解其背后的原理，然后在项目中去实践，才能真正掌握。</p><p><strong>文章摘自它出，初识前端性能优化，仅处于学习记录的目的，不做它用，自己再根据实践积累做修改和补充。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;图片类型和使用场景&quot;&gt;&lt;a href=&quot;#图片类型和使用场景&quot; class=&quot;headerlink&quot; title=&quot;图片类型和使用场景&quot;&gt;&lt;/a&gt;图片类型和使用场景&lt;/h2&gt;&lt;p&gt;常用的&lt;code&gt;web&lt;/code&gt;图片格式有：&lt;code&gt;JPEG/JPG&lt;/c
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>HTTP压缩</title>
    <link href="http://yoursite.com/2020/03/10/HTTP%E5%8E%8B%E7%BC%A9/"/>
    <id>http://yoursite.com/2020/03/10/HTTP压缩/</id>
    <published>2020-03-10T07:23:45.000Z</published>
    <updated>2020-03-10T08:50:24.146Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是HTTP压缩"><a href="#什么是HTTP压缩" class="headerlink" title="什么是HTTP压缩"></a><strong>什么是HTTP压缩</strong></h4><p>HTTP压缩是指: Web服务器和浏览器之间压缩传输”文本内容“的方法。 HTTP采用通用的压缩算法，比如gzip来压缩HTML,Javascript, CSS文件。 能大大减少网络传输的数据量，提高了用户显示网页的速度。当然，同时会增加一点点服务器的开销。 本文从HTTP协议的角度，来理解HTTP压缩这个概念。</p><h4 id="HTTP内容编码和HTTP压缩的区别"><a href="#HTTP内容编码和HTTP压缩的区别" class="headerlink" title="HTTP内容编码和HTTP压缩的区别"></a><strong>HTTP内容编码和HTTP压缩的区别</strong></h4><p>HTTP压缩，在HTTP协议中，其实是内容编码的一种。</p><p>在http协议中，可以对内容（也就是body部分）进行编码， 可以采用Gzip这样的编码。 从而达到压缩的目的。 也可以使用其他的编码把内容搅乱或加密，以此来防止未授权的第三方看到文档的内容。所以我们说HTTP压缩，其实就是HTTP内容编码的一种。 所以大家不要把HTTP压缩和HTTP内容编码两个概念混淆了。</p><h4 id="内容编码类型"><a href="#内容编码类型" class="headerlink" title="内容编码类型"></a><strong>内容编码类型</strong></h4><p>HTTP定义了一些标准的内容编码类型，并允许用扩展的形式添加更多的编码。</p><p>Content-Encoding header 就用这些标准化的代号来说明编码时使用的算法</p><p>Content-Encoding值</p><p>　　gzip　　表明实体采用GNU zip编码</p><p>　　compress 表明实体采用Unix的文件压缩程序</p><p>　　deflate　　表明实体是用zlib的格式压缩的</p><p>　　identity　　表明没有对实体进行编码。当没有Content-Encoding header时， 就默认为这种情况</p><p>　　Gzip, compress, 以及deflate编码都是<code>无损压缩算法</code>，用于减少传输报文的大小，不会导致信息损失。 其中<code>Gzip</code>通常<strong>效率最高</strong>， 使用最为广泛。</p><h4 id="Gzip的缺点"><a href="#Gzip的缺点" class="headerlink" title="Gzip的缺点"></a><strong>Gzip的缺点</strong></h4><p> <code>jpeg</code>这类文件用<code>gzip</code>压缩的不够好。</p><p>对HTTP传输内容进行压缩是改良前端响应性能的可用方法之一，大型网站都在用。但是也有缺点，就是压缩过程占用cpu的资源，客户端浏览器解析也占据了一部分时间。但是随着硬件性能不断的提高，这些问题正在不断的弱化。</p><h4 id="Gzip压缩原理"><a href="#Gzip压缩原理" class="headerlink" title="Gzip压缩原理"></a><strong>Gzip压缩原理</strong></h4><p>简单来说， Gzip压缩是在一个文本文件中找出类似的字符串， 并临时替换他们，使整个文件变小。这种形式的压缩对Web来说非常适合， 因为<code>HTML</code>、<code>CSS</code>、<code>js</code>文件通常包含大量的重复的字符串，例如空格，标签。</p><h4 id="http协议如何支持压缩文件的传输"><a href="#http协议如何支持压缩文件的传输" class="headerlink" title="http协议如何支持压缩文件的传输"></a>http协议如何支持压缩文件的传输</h4><p>1、浏览器请求数据时，通过<code>Accept-Encoding</code>（<code>Request Header</code>）说明自己可以接受的压缩方法</p><p>2、服务端接收到请求后，选取Accept-Encoding中的一种对响应数据进行压缩</p><p>3、服务端返回响应数据时，在<code>Content-Encoding</code>（<code>Response Header</code>）字段中说明数据的压缩方式</p><p>4、浏览器接收到响应数据后根据Content-Encoding对结果进行解压</p><p>注：如果服务器没有对响应数据进行压缩，则不返回Content-Encoding，浏览器也不进行解压</p><h4 id="什么时候压缩"><a href="#什么时候压缩" class="headerlink" title="什么时候压缩"></a>什么时候压缩</h4><p><img src="https://thinkerhope.github.io/2020/03/10/HTTP%E5%8E%8B%E7%BC%A9/571311-20180831155733264-1153384828.png" alt></p><h4 id="构建时压缩（webpack）"><a href="#构建时压缩（webpack）" class="headerlink" title="构建时压缩（webpack）"></a>构建时压缩（webpack）</h4><p><code>webpack</code>的<code>compression-webpack-plugin</code>插件用于支持构建项目时压缩文件，Vue项目为例，具体配置如下：</p><p>1、首先安装插件，命令：npm install –save-dev compression-webpack-plugin</p><p>2、在config/index.js文件中打开Gzip开关，配置需要压缩的文件扩展名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">productionGzip: <span class="literal">true</span>,</span><br><span class="line">productionGzipExtensions: [<span class="string">'js'</span>, <span class="string">'css'</span>],</span><br></pre></td></tr></table></figure><p>3、webpack.prod.conf.js中设置具体压缩配置项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (config.build.productionGzip) &#123;</span><br><span class="line">  <span class="keyword">const</span> CompressionWebpackPlugin = <span class="built_in">require</span>(<span class="string">'compression-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line">  webpackConfig.plugins.push(</span><br><span class="line">    <span class="keyword">new</span> CompressionWebpackPlugin(&#123;</span><br><span class="line">      asset: <span class="string">'[path].gz[query]'</span>,</span><br><span class="line">      algorithm: <span class="string">'gzip'</span>,</span><br><span class="line">      test: <span class="keyword">new</span> <span class="built_in">RegExp</span>(</span><br><span class="line">        <span class="string">'\\.('</span> + </span><br><span class="line">        config.build.productionGzipExtensions.join(<span class="string">'|'</span>) +</span><br><span class="line">        <span class="string">')$'</span></span><br><span class="line">      ),</span><br><span class="line">      threshold: <span class="number">10240</span>,</span><br><span class="line">      minRatio: <span class="number">0.8</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、打包后会同时保留原文件和压缩后的文件，存储等条件允许的情况下，原文件也建议发布到服务器以支持不兼容gzip的浏览器</p><p>5、服务端<code>nginx</code>启动<code>gzip_static</code></p><p>gzip_static是nginx对于静态文件的处理模块，该模块可以读取预先压缩的gz文件，这样可以减少每次请求进行gzip压缩的CPU资源消耗。该模块启用后，nginx首先检查是否存在请求静态文件的gz结尾的文件，如果有则直接返回该gz文件内容。</p><p>为了要兼容不支持gzip的浏览器，启用gzip_static模块就必须同时保留原始静态文件和gz文件。这样的话，在有大量静态文件的情况下，将会大大增加磁盘空间。我们可以利用nginx的反向代理功能实现只保留gz文件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;什么是HTTP压缩&quot;&gt;&lt;a href=&quot;#什么是HTTP压缩&quot; class=&quot;headerlink&quot; title=&quot;什么是HTTP压缩&quot;&gt;&lt;/a&gt;&lt;strong&gt;什么是HTTP压缩&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;HTTP压缩是指: Web服务器和浏览器之间压缩传
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>必备的chrome插件</title>
    <link href="http://yoursite.com/2020/03/06/%E5%BF%85%E5%A4%87%E7%9A%84chrome%E6%8F%92%E4%BB%B6/"/>
    <id>http://yoursite.com/2020/03/06/必备的chrome插件/</id>
    <published>2020-03-06T07:40:20.000Z</published>
    <updated>2020-03-06T08:42:29.573Z</updated>
    
    <content type="html"><![CDATA[<p><strong>插件都在<a href="https://chrome.zzzmh.cn/index" target="_blank" rel="noopener">极简插件</a>搜索下载即可</strong></p><h3 id="第一部分-日常使用"><a href="#第一部分-日常使用" class="headerlink" title="第一部分 (日常使用)"></a>第一部分 (日常使用)</h3><h4 id="沙拉查词"><a href="#沙拉查词" class="headerlink" title="沙拉查词"></a>沙拉查词</h4><p><img src="https://thinkerhope.github.io/2020/03/06/%E5%BF%85%E5%A4%87%E7%9A%84chrome%E6%8F%92%E4%BB%B6/saladict.gif" alt></p><h4 id="Infinity-新标签页"><a href="#Infinity-新标签页" class="headerlink" title="Infinity 新标签页"></a>Infinity 新标签页</h4><p><img src="https://thinkerhope.github.io/2020/03/06/%E5%BF%85%E5%A4%87%E7%9A%84chrome%E6%8F%92%E4%BB%B6/infinity-home.png" alt></p><blockquote><p>替换 chrome 原有首页的一个选择, 功能完善, 可以方便的管理和查找书签, 每天更换一个壁纸, 点击下边的小风车, 可以随机切换壁纸</p><p>不仅如此, 点击右上角的 + 号, 可进行登录, 常规, 外观, 壁纸设置, 还可以对标签页的图标进行整理替换</p></blockquote><h4 id="Momentum"><a href="#Momentum" class="headerlink" title="Momentum"></a>Momentum</h4><p><img src="https://thinkerhope.github.io/2020/03/06/%E5%BF%85%E5%A4%87%E7%9A%84chrome%E6%8F%92%E4%BB%B6/640.png" alt></p><blockquote><p>替换 chrome 原有首页的插件, 简介大气, 左上角可以搜索, 右上角展示天气, 中间展示时间, 下方默认有个 todo 的功能, 左下角可以对标签页进行设置, 新增一些功能</p></blockquote><h4 id="Vimium-The-Hacker’s-Browser"><a href="#Vimium-The-Hacker’s-Browser" class="headerlink" title="Vimium - The Hacker’s Browser"></a>Vimium - The Hacker’s Browser</h4><p><code>vimium</code> = vim + chromium, vim 是 <code>linux</code> 自带的文本编辑器, 通过各种快捷键, 完全脱离鼠标操作, 而 <code>vimium</code> 则继承了 vim 的常用快捷键, 让你脱离鼠标操作 <code>chrome</code></p><p>f 的效果如下</p><p><img src="https://thinkerhope.github.io/2020/03/06/%E5%BF%85%E5%A4%87%E7%9A%84chrome%E6%8F%92%E4%BB%B6/vimium-f.png" alt></p><h4 id="crxMouse-Chrome™-手势"><a href="#crxMouse-Chrome™-手势" class="headerlink" title="crxMouse Chrome™ 手势"></a>crxMouse Chrome™ 手势</h4><p>这个插件与 <code>vimium</code> 相反, 增强了鼠标的功能</p><p>如果要在新标签页打开一个链接, 在链接上方, 按住鼠标向左拖动即可</p><p><img src="https://thinkerhope.github.io/2020/03/06/%E5%BF%85%E5%A4%87%E7%9A%84chrome%E6%8F%92%E4%BB%B6/crxMouse-openLinkInNewTab.png" alt></p><h3 id="第二部分-协助开发"><a href="#第二部分-协助开发" class="headerlink" title="第二部分 (协助开发)"></a>第二部分 (协助开发)</h3><h4 id="FeHelper"><a href="#FeHelper" class="headerlink" title="FeHelper"></a>FeHelper</h4><p><code>FeHelper</code> 由 <code>Alien</code> 开源, 是一款前端工具集大成的插件, 前端开发必备:</p><p>先祭出官网介绍的功能菜单感受一下:</p><p><img src="https://thinkerhope.github.io/2020/03/06/%E5%BF%85%E5%A4%87%E7%9A%84chrome%E6%8F%92%E4%BB%B6/fe-helper-0.png" alt="fe-helper-0"></p><p>挑几个功能介绍一下</p><ul><li>字符串加解密</li></ul><p><img src="https://thinkerhope.github.io/2020/03/06/%E5%BF%85%E5%A4%87%E7%9A%84chrome%E6%8F%92%E4%BB%B6/fe-helper-1.png" alt></p><ul><li><code>JSON</code> 格式化</li></ul><p><img src="https://thinkerhope.github.io/2020/03/06/%E5%BF%85%E5%A4%87%E7%9A%84chrome%E6%8F%92%E4%BB%B6/fe-helper-2.png" alt></p><ul><li>二维码生成工具</li></ul><p>右键打开菜单, 点击 <code>FeHelper</code> 的二维码生成器, 即可生成当前页面的二维码, 可以配置自定义图标, 另外还可以改动 <code>url</code> 进行实时编辑, 调试页面的时候在 <code>pc</code> 打开, 生成二维码后, 就不用手动在手机输入 <code>url</code> 了~</p><p><img src="https://thinkerhope.github.io/2020/03/06/%E5%BF%85%E5%A4%87%E7%9A%84chrome%E6%8F%92%E4%BB%B6/fe-helper-3.png" alt></p><ul><li>正则表达式工具</li></ul><p>可以帮助生成常用的正则表达式, 可以看表达式是否匹配, 在正则调试过程中可以起到较好地辅助作用</p><h4 id="SwitchyOmega"><a href="#SwitchyOmega" class="headerlink" title="SwitchyOmega"></a>SwitchyOmega</h4><p>强大的浏览器代理工具</p><p><img src="https://thinkerhope.github.io/2020/03/06/%E5%BF%85%E5%A4%87%E7%9A%84chrome%E6%8F%92%E4%BB%B6/switchyomega-0.png" alt></p><h4 id="React-Developer-Tools"><a href="#React-Developer-Tools" class="headerlink" title="React Developer Tools"></a>React Developer Tools</h4><h4 id="Redux-DevTools"><a href="#Redux-DevTools" class="headerlink" title="Redux DevTools"></a>Redux DevTools</h4><h4 id="Vue-js-devtools"><a href="#Vue-js-devtools" class="headerlink" title="Vue.js devtools"></a>Vue.js devtools</h4><h4 id="Octotree"><a href="#Octotree" class="headerlink" title="Octotree"></a>Octotree</h4><p>让浏览 <code>github</code> 代码变得像本地编辑器一样轻松, 可以搜索文件, 点击代码目录跳转等, 方便地在文件之间切换</p><p><img src="https://thinkerhope.github.io/2020/03/06/%E5%BF%85%E5%A4%87%E7%9A%84chrome%E6%8F%92%E4%BB%B6/octotree.gif" alt></p><h3 id="第三部分-插件管理"><a href="#第三部分-插件管理" class="headerlink" title="第三部分 (插件管理)"></a>第三部分 (插件管理)</h3><h4 id="SimpleExtManager-插件管理"><a href="#SimpleExtManager-插件管理" class="headerlink" title="SimpleExtManager (插件管理)"></a>SimpleExtManager (插件管理)</h4><p>这是一款可以管理插件的插件, 让你方便地禁用, 启用和删除插件, 当插件多起来的时候, 会影响 chrome 的速度, 为了在需要某个插件时, 能快速的启动某个插件, SimpleExtManager 就必不可少了</p><p><img src="https://thinkerhope.github.io/2020/03/06/%E5%BF%85%E5%A4%87%E7%9A%84chrome%E6%8F%92%E4%BB%B6/simpleext.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;插件都在&lt;a href=&quot;https://chrome.zzzmh.cn/index&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;极简插件&lt;/a&gt;搜索下载即可&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;第一部分-日常使用&quot;&gt;&lt;a href
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>EventLoop遇上Promise</title>
    <link href="http://yoursite.com/2020/03/05/EventLoop%E9%81%87%E4%B8%8APromise/"/>
    <id>http://yoursite.com/2020/03/05/EventLoop遇上Promise/</id>
    <published>2020-03-05T13:42:11.000Z</published>
    <updated>2020-03-09T04:06:32.224Z</updated>
    
    <content type="html"><![CDATA[<p>面试时的<code>EventLoop/Promise</code>难度进阶</p><h4 id="版本一：得心应手版"><a href="#版本一：得心应手版" class="headerlink" title="版本一：得心应手版"></a>版本一：得心应手版</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="number">1</span>) </span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="number">2</span>) </span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><strong>考察点</strong>：了解宏任务(<code>marcotask</code>)微任务</p><h4 id="版本二：游刃有余版"><a href="#版本二：游刃有余版" class="headerlink" title="版本二：游刃有余版"></a>版本二：游刃有余版</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="number">1</span>) </span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"><span class="keyword">let</span> a=<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="number">3</span>) </span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="number">4</span>) </span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p><strong>考察点</strong>：Promise的理解程度</p><h4 id="版本三：炉火纯青版"><a href="#版本三：炉火纯青版" class="headerlink" title="版本三：炉火纯青版"></a>版本三：炉火纯青版</h4><p>首先理解一下以下执行（这个更好理解）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 题１</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"promise1"</span>)</span><br><span class="line">  resolve()</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"then11"</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"then12"</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123; </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"then13"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"promise2"</span>)</span><br><span class="line">  resolve()</span><br><span class="line">&#125;).then(()= &gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"then21"</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"then23"</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123; </span><br><span class="line">　<span class="built_in">console</span>.log(<span class="string">"then24"</span>) </span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123; </span><br><span class="line">　<span class="built_in">console</span>.log(<span class="string">"then25"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出</span></span><br><span class="line">promise1</span><br><span class="line">promise2</span><br><span class="line">then11</span><br><span class="line">then21</span><br><span class="line">then12</span><br><span class="line">then23</span><br><span class="line">then24</span><br><span class="line">then25</span><br></pre></td></tr></table></figure><p><code>then</code>返回的<code>promise</code>要等该<code>then</code>注册的回调执行完才<code>resolve</code></p><p>按我能现在接受的理解是：<code>new Promise(fn)</code>，<code>fn</code>毫无疑问是立即执行的，（<code>resolve</code>是异步），之后所有<code>then</code>同步执行完，返回<code>Promise{&lt;pending&gt;}</code>，（期间注册回调，注意不是放到<code>microqueue</code>中，只是放到<code>promise</code>的<code>callback</code>属性中）每个<code>promise</code>都在等待<code>resolve</code>后变为<code>fulfilled</code>才把注册的回调<code>microtask(fn)</code>，立刻放到微任务队列中，如此循环。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 题２</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"promise1"</span>)</span><br><span class="line">  resolve()</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"then11"</span>)</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"promise2"</span>)</span><br><span class="line">      resolve()</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"then21"</span>)</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"then23"</span>)</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123; </span><br><span class="line">    　<span class="built_in">console</span>.log(<span class="string">"then24"</span>) </span><br><span class="line">  &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123; </span><br><span class="line">    　<span class="built_in">console</span>.log(<span class="string">"then25"</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  　<span class="built_in">console</span>.log(<span class="string">"then12"</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123; </span><br><span class="line">  　<span class="built_in">console</span>.log(<span class="string">"then13"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 抛开同步执行的`promise1`和`promise2`，结果和题２是一致的</span></span><br><span class="line"><span class="comment">// new Promise resolve后then回调会立即入队，遇到new promise理解执行函数中如果resolve效果感觉是同步的，会让then回调立即入队。</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出</span></span><br><span class="line">promise1</span><br><span class="line">then11</span><br><span class="line">promise2</span><br><span class="line">then21</span><br><span class="line">then12</span><br><span class="line">then23</span><br><span class="line">then24</span><br><span class="line">then25</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 题３ - 检验上面的理解</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"promise1"</span>,<span class="number">1</span>) </span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"then11"</span>,<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"promise2"</span>,<span class="number">3</span>)</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"then21"</span>,<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"promise3"</span>,<span class="number">5</span>)</span><br><span class="line">            resolve();</span><br><span class="line">        &#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"then31"</span>,<span class="number">7</span>)</span><br><span class="line">        &#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"then32"</span>,<span class="number">9</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"then22"</span>,<span class="number">8</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"then12"</span>,<span class="number">6</span>)</span><br><span class="line">&#125;)  </span><br><span class="line"><span class="comment">// 按照上面的理解是可以解释这一题的</span></span><br><span class="line"><span class="comment">// 即入队顺序：then11 -&gt; then21 -&gt; then12 -&gt; then31 -&gt; then22 -&gt; then32</span></span><br></pre></td></tr></table></figure><p>做到心中有队列（current stack 和 micro stack一直在）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 题４</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"promise1"</span>)</span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"then11"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"promise2"</span>)</span><br><span class="line">        resolve()</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"then21"</span>)</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"then23"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"then12"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出</span></span><br><span class="line">promise1</span><br><span class="line">then11</span><br><span class="line">promise2</span><br><span class="line">then21</span><br><span class="line">then23</span><br><span class="line">then12</span><br></pre></td></tr></table></figure><h4 id="版本四：登峰造极版"><a href="#版本四：登峰造极版" class="headerlink" title="版本四：登峰造极版"></a>版本四：登峰造极版</h4><blockquote><p>考点：在<code>async/await</code>之下，对<code>Eventloop</code>的影响</p></blockquote><blockquote><p>槽点：别被<code>async/await</code>给骗了，这题不难。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"async1 start"</span>)</span><br><span class="line">    <span class="keyword">await</span> async2();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"async1 end"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span>  <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">'async2'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"script start"</span>)</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"settimeout"</span>)</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">async1()</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"promise1"</span>)</span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"promise2"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script end'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出</span></span><br><span class="line">script start</span><br><span class="line">async1 start</span><br><span class="line">async2</span><br><span class="line">promise1</span><br><span class="line">script end</span><br><span class="line">async1 end</span><br><span class="line">promise2</span><br><span class="line">settimeout</span><br></pre></td></tr></table></figure><p>这里该题作者给的解释：</p><p><code>await async2()</code>相当于一个<code>Promise</code>，<code>console.log(&quot;async1 end&quot;);</code>相当于前方<code>Promise</code>的<code>then</code>之后执行的函数</p><p><strong>此处唯一有争议的就是<code>async</code>的<code>then</code>和<code>promise</code>的<code>then</code>的优先级的问题</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"async1 start"</span>)</span><br><span class="line">    <span class="keyword">await</span> async2()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"async1 end"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'async2'</span>)</span><br><span class="line">&#125;</span><br><span class="line">async1()</span><br><span class="line"><span class="comment">// 用于test的promise，看看await究竟在何时执行</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"promise1"</span>)</span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"promise2"</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"promise3"</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"promise4"</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"promise5"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出</span></span><br><span class="line">async1 start</span><br><span class="line">async2</span><br><span class="line">promise1</span><br><span class="line">async1 end</span><br><span class="line">promise2</span><br><span class="line">promise3</span><br><span class="line">promise4</span><br><span class="line">promise5</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;面试时的&lt;code&gt;EventLoop/Promise&lt;/code&gt;难度进阶&lt;/p&gt;
&lt;h4 id=&quot;版本一：得心应手版&quot;&gt;&lt;a href=&quot;#版本一：得心应手版&quot; class=&quot;headerlink&quot; title=&quot;版本一：得心应手版&quot;&gt;&lt;/a&gt;版本一：得心应手版&lt;/h4
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>时间锁</title>
    <link href="http://yoursite.com/2020/03/03/%E6%97%B6%E9%97%B4%E9%94%81/"/>
    <id>http://yoursite.com/2020/03/03/时间锁/</id>
    <published>2020-03-03T14:47:30.000Z</published>
    <updated>2020-03-03T15:07:45.114Z</updated>
    
    <content type="html"><![CDATA[<h2 id="时间锁修复bug"><a href="#时间锁修复bug" class="headerlink" title="时间锁修复bug"></a>时间锁修复bug</h2><blockquote><p>有时候2行代码能简单处理的问题就不用大费周章地瞎搞了</p></blockquote><h4 id="点击穿透"><a href="#点击穿透" class="headerlink" title="点击穿透"></a>点击穿透</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下方法在 IOS 下无效，而且不建议用异步的定时器</span></span><br><span class="line"><span class="keyword">const</span> handleAddClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> handleTouchStart = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> handleTouchEnd = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> btnAddRef.current.addEventListener(<span class="string">'click'</span>, handleAddClick), <span class="number">300</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span>  btnAddRef.current.removeEventListener(<span class="string">'click'</span>, handleAddClick)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;div onTouchStart=&#123;handleTouchStart&#125; onTouchEnd=&#123;handleTouchEnd&#125;&gt;</span><br><span class="line">  &lt;div</span><br><span class="line">    ref=&#123;btnRef&#125;</span><br><span class="line">    onClick=&#123;e =&gt; handleClick(e)&#125;   </span><br><span class="line">  &gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间锁的解决方案</span></span><br><span class="line"><span class="keyword">const</span> [lockTime, setLockTime] = useState(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleAddClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> now = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">  <span class="keyword">if</span> (now - lockTime &lt; <span class="number">300</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleTouchStart = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  setLockTime(+<span class="keyword">new</span> <span class="built_in">Date</span>())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多指触屏"><a href="#多指触屏" class="headerlink" title="多指触屏"></a>多指触屏</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;时间锁修复bug&quot;&gt;&lt;a href=&quot;#时间锁修复bug&quot; class=&quot;headerlink&quot; title=&quot;时间锁修复bug&quot;&gt;&lt;/a&gt;时间锁修复bug&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;有时候2行代码能简单处理的问题就不用大费周章地瞎搞了&lt;/p&gt;
&lt;/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>hammerJS</title>
    <link href="http://yoursite.com/2020/03/01/hammerJS/"/>
    <id>http://yoursite.com/2020/03/01/hammerJS/</id>
    <published>2020-03-01T03:03:40.000Z</published>
    <updated>2020-03-01T09:15:35.912Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS手势框架-——-Hammer-js"><a href="#JS手势框架-——-Hammer-js" class="headerlink" title="JS手势框架 —— Hammer.js"></a>JS手势框架 —— Hammer.js</h2><p><img src="https://thinkerhope.github.io/2020/03/01/hammerJS/hammer.jpg" alt></p><h4 id="hammer-js简介"><a href="#hammer-js简介" class="headerlink" title="hammer.js简介"></a>hammer.js简介</h4><p><code>hammerJS</code>是一个开源的，轻量级的触屏设备<code>javascript</code>手势库，它可以在不需要依赖其他东西的情况下识别触摸，鼠标事件。允许同时监听多个手势、自定义识别器，也可以识别滑动方向。</p><h4 id="事件介绍"><a href="#事件介绍" class="headerlink" title="事件介绍"></a>事件介绍</h4><p><img src="https://thinkerhope.github.io/2020/03/01/hammerJS/hammerEvent.png" alt></p><p>1、<code>Rotate</code>事件：在指定的<code>dom</code>区域内，当两个手指或更多手指成圆型旋转时触发（就像两个手指拧螺丝一样）。该事件分别对以下事件进行监听并处理：</p><p><code>Rotatestart</code>：旋转开始；</p><p><code>Rotatemove</code>：旋转过程；</p><p><code>Rotateend</code>：旋转结束；</p><p>Rotatecancel：旋转取消</p><p>2、<code>Pinch</code>事件：在指定的dom区域内，两个手指（默认为两个手指，多指触控需要单独设置）或多个手指相对（越来越近）移动或相向（越来越远）移动时事件。该事件事以分别对以下事件进行监听并处理：</p><p><code>Pinchstart</code>：多点触控开始；</p><p><code>Pinchmove</code>：多点触控过程；</p><p><code>Pinchend</code>：多点触控结束；</p><p><code>Pinchcancel</code>：多点触控取消；</p><p><code>Pinchin</code>：多点触控时两手指距离越来越近；</p><p><code>Pinchout</code>：多点触控时两手指距离越来越远</p><p>3、<code>Press</code>事件：在指定的dom区域内触屏版本的点击事件，这个事件相当于PC端的<code>Click</code>事件，该不能包含任何的移动，最小按压时间为500毫秒，常用于我们在手机上用的“复制、粘贴”等功能。</p><p><code>Pressup</code>：点击事件离开时触发</p><p>4、<code>Pan</code>事件：在指定的dom区域内，一个手指放下并移动事件，即触屏中的拖动事件。这个事件在屏触开发中比较常用，如：左拖动、右拖动等，如手要上使用QQ时向右滑动出现功能菜单的效果。该事件还可以分别对以下事件进行监听并处理：</p><p><code>Panstart</code>：拖动开始；</p><p><code>Panmove</code>：拖动过程；</p><p><code>Panend</code>：拖动结束；</p><p><code>Pancancel</code>：拖动取消；</p><p><code>Panleft</code>：向左拖动；</p><p><code>Panright</code>：向右拖动；</p><p><code>Panup</code>：向上拖动；</p><p><code>Pandown</code>：向下拖动 </p><p>5、<code>Tap</code>事件：在指定的dom区域内，一个手指轻拍或点击时触发该事件(类似PC端的click)。该事件最大点击时间为250毫秒，如果超过250毫秒则按Press事件进行处理。</p><p>6、<code>Swipe</code>事件：在指定的dom区域内，一个手指快速的在触屏上滑动。即我们平时用到最多的滑动事件。</p><p><code>Swipeleft</code>：向左滑动；</p><p><code>Swiperight</code>：向右滑动；</p><p><code>Swipeup</code>：向上滑动；</p><p><code>Swipedown</code>：向下滑动</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><blockquote><p>安装</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hammerjs</span><br></pre></td></tr></table></figure><blockquote><p>基本使用</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> square = <span class="built_in">document</span>.querySelector(<span class="string">'.square'</span>);</span><br><span class="line"><span class="keyword">var</span> hammer = <span class="keyword">new</span> Hammer(square);</span><br><span class="line"><span class="comment">// 若要允许识别器识别垂直方位的 pan 和 swipe</span></span><br><span class="line"><span class="comment">// hammertime.get('pan').set(&#123; direction: Hammer.DIRECTION_VERTICAL &#125;)</span></span><br><span class="line">mc.get(<span class="string">"pan"</span>).set(&#123; <span class="attr">direction</span>: Hammer.DIRECTION_ALL &#125;);</span><br><span class="line">hammer.on(<span class="string">'pan'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.target.classList.toggle(<span class="string">'expand'</span>, i &lt; <span class="number">10</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另建议加上如下meta标签，防止doubletap 或 pinch 缩放了viewport：</span></span><br><span class="line"><span class="comment">// &lt;meta name="viewport" content="user-scalable=no, width=device-width, initial-scale=1, maximum-scale=1"&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JS手势框架-——-Hammer-js&quot;&gt;&lt;a href=&quot;#JS手势框架-——-Hammer-js&quot; class=&quot;headerlink&quot; title=&quot;JS手势框架 —— Hammer.js&quot;&gt;&lt;/a&gt;JS手势框架 —— Hammer.js&lt;/h2&gt;&lt;p&gt;&lt;i
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>EventEmitter</title>
    <link href="http://yoursite.com/2020/01/20/EventEmitter%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    <id>http://yoursite.com/2020/01/20/EventEmitter组件通信/</id>
    <published>2020-01-20T09:47:51.000Z</published>
    <updated>2020-03-03T14:45:29.078Z</updated>
    
    <content type="html"><![CDATA[<h2 id="EventEmitter"><a href="#EventEmitter" class="headerlink" title="EventEmitter"></a>EventEmitter</h2><h4 id="非嵌套关系的组件实现通信"><a href="#非嵌套关系的组件实现通信" class="headerlink" title="非嵌套关系的组件实现通信"></a>非嵌套关系的组件实现通信</h4><blockquote><p>在<code>componentDidMount</code>事件中,如果组件挂载完成,再订阅事件;在组件卸载的时候,在<code>componentWillUnmount</code>事件中取消事件的订阅; 以常用的发布/订阅模式举例,借用<code>Node.js Events</code>模块的浏览器版实现</p></blockquote><p>实现这样一个功能: 点击<code>List2</code>中的一个按钮,改变<code>List1</code>中的信息显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install events --save</span><br></pre></td></tr></table></figure><p>在<code>src</code>下新建一个<code>util</code>目录里面建一个<code>events.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; EventEmitter &#125; <span class="keyword">from</span> <span class="string">'events'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> EventEmitter();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// list1.jsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> emitter <span class="keyword">from</span> <span class="string">'../util/events'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            message: <span class="string">'List1'</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        <span class="comment">// 组件装载完成以后声明一个自定义事件</span></span><br><span class="line">        <span class="keyword">this</span>.eventEmitter = emitter.addListener(<span class="string">'changeMessage'</span>, (message) =&gt; &#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                message,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    componentWillUnmount() &#123;</span><br><span class="line">        emitter.removeListener(<span class="keyword">this</span>.eventEmitter);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &#123;<span class="keyword">this</span>.state.message&#125;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default List;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List2.jsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> emitter <span class="keyword">from</span> <span class="string">'../util/events'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List2</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    handleClick = <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">        emitter.emit(<span class="string">'changeMessage'</span>, message);</span><br><span class="line">    &#125;;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;button onClick=&#123;<span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>, <span class="string">'List2'</span>)&#125;&gt;点击我改变List1组件中显示信息&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// APP.jsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> List1 <span class="keyword">from</span> <span class="string">'./components/List1'</span>;</span><br><span class="line"><span class="keyword">import</span> List2 <span class="keyword">from</span> <span class="string">'./components/List2'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;List1 /&gt;</span><br><span class="line">                &lt;List2 /&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>自定义事件是典型的发布订阅模式,通过向事件对象上添加监听器和触发事件来实现组件之间的通信</p><p>（2）辅助 <code>toolbox</code> 实现 <code>create</code> 和 <code>destory</code></p><p>需求是一个长按弹出的 <code>toolbox</code> 框框，要实现点击其它非 toolbox 区域框框消失的功能</p><p>之前的方式: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// utils/toolbox.js</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ToolboxCtrl</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">  create(args) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    render(</span><br><span class="line">      &lt;<span class="keyword">this</span>.tb </span><br><span class="line">        &#123;...props&#125;</span><br><span class="line">        handleClickAway=&#123;() =&gt; <span class="keyword">this</span>.destory()&#125; </span><br><span class="line">      /&gt;, </span><br><span class="line">      div</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  destory() &#123;&#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// com/toolbox.js</span></span><br><span class="line"><span class="keyword">const</span> ToolBox = <span class="function">(<span class="params">&#123; handleClickAway &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> ref = useClickAway(<span class="function"><span class="params">()</span> =&gt;</span> handleClickAway())</span><br><span class="line">  <span class="keyword">const</span> handleItemClick = <span class="function"><span class="params">e</span> =&gt;</span> handleClickAway()</span><br><span class="line">  <span class="keyword">return</span> (&lt;div ref=&#123;ref&#125; onClick=&#123;e =&gt; handleItemClick(e)&#125;&gt;...&lt;/div&gt;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>useClickAway</code> 是自定义的 <code>Hooks</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">useClickAway</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    onClickAway, </span></span></span><br><span class="line"><span class="function"><span class="params">    dom, </span></span></span><br><span class="line"><span class="function"><span class="params">    eventName = <span class="string">'click'</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">const</span> element = useRef()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> handler = useCallback(</span><br><span class="line">        event =&gt; &#123;</span><br><span class="line">          <span class="keyword">const</span> targetElement = <span class="keyword">typeof</span> dom === <span class="string">'function'</span> ? dom() : dom</span><br><span class="line">          <span class="keyword">const</span> el = targetElement || element.current</span><br><span class="line">          <span class="keyword">if</span> (!el || el.contains(event.target)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          onClickAway(event)</span><br><span class="line">        &#125;,</span><br><span class="line">        [element.current, onClickAway, dom],</span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">      useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">document</span>.addEventListener(eventName, handler)</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">document</span>.removeEventListener(eventName, handler)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, [eventName, handler])</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> element</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般情况下没有问题…但是中间遇到很奇怪的bug…原因没有研究出来</p><p>最后还是用 <code>eventEmitter</code> 解决的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// com/toolbox.js</span></span><br><span class="line"><span class="keyword">const</span> ToolBox = <span class="function">(<span class="params">&#123; handleClickAway &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    emitter.on(<span class="string">'toolbox.destory'</span>, handleClickAway)</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> emitter.off(<span class="string">'toolbox.destory'</span>, handleClickAway)</span><br><span class="line">  &#125;, [])</span><br><span class="line">  <span class="keyword">const</span> ref = useClickAway(<span class="function"><span class="params">()</span> =&gt;</span> handleClickAway())</span><br><span class="line">  <span class="keyword">const</span> handleItemClick = <span class="function"><span class="params">e</span> =&gt;</span> handleClickAway()</span><br><span class="line">  <span class="keyword">return</span> (&lt;div ref=&#123;ref&#125; onClick=&#123;e =&gt; handleItemClick(e)&#125;&gt;...&lt;/div&gt;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在点击某个元素的时候, 以实现 useClickAway 的效果</span></span><br><span class="line">emitter.emit(<span class="string">'toolbox.destory'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;EventEmitter&quot;&gt;&lt;a href=&quot;#EventEmitter&quot; class=&quot;headerlink&quot; title=&quot;EventEmitter&quot;&gt;&lt;/a&gt;EventEmitter&lt;/h2&gt;&lt;h4 id=&quot;非嵌套关系的组件实现通信&quot;&gt;&lt;a href=&quot;#非
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>useEffect深入学习</title>
    <link href="http://yoursite.com/2020/01/14/useEffect%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2020/01/14/useEffect深入学习/</id>
    <published>2020-01-13T16:17:38.000Z</published>
    <updated>2020-01-13T16:17:38.984Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>setTimeout和Promise看eventloop</title>
    <link href="http://yoursite.com/2020/01/04/setTimeout%E5%92%8CPromise%E7%9C%8Beventloop/"/>
    <id>http://yoursite.com/2020/01/04/setTimeout和Promise看eventloop/</id>
    <published>2020-01-04T03:05:57.000Z</published>
    <updated>2020-01-04T04:51:07.454Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://thinkerhope.github.io/2020/01/04/setTimeout%E5%92%8CPromise%E7%9C%8Beventloop/eloop.png" alt="eloop"></p><p>大家都知道<code>JS</code>是单线程的。设计的原因就是因为简单…</p><p>举了个栗子说，两个线程，有一个线程在添加一个<code>dom</code>元素 <code>a</code>，还有一个线程在删除一个<code>dom</code>元素<code>a</code>，那么浏览器就需要决策该听谁的，这样的话就增加了语言设计的复杂性。</p><h4 id="JS并非只有一个线程，而只是主线程是单线程的"><a href="#JS并非只有一个线程，而只是主线程是单线程的" class="headerlink" title="JS并非只有一个线程，而只是主线程是单线程的"></a><strong>JS并非只有一个线程，而只是主线程是单线程的</strong></h4><p>HTML5有一个api，webworker，利用它，能帮助我们创建<strong>子线程</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.html</span></span><br><span class="line"><span class="keyword">let</span> worker = <span class="keyword">new</span> Worker(<span class="string">'./worker.js'</span>);</span><br><span class="line"><span class="comment">//把内容发给 工作线程，工作线程可以把结果丢回来</span></span><br><span class="line"></span><br><span class="line">worker.postMessage(<span class="string">'向你雇佣的工人发送指令'</span>);</span><br><span class="line"></span><br><span class="line">worker.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.data); <span class="comment">//数据在data属性下</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//worker.js</span></span><br><span class="line"><span class="built_in">window</span>.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(e);</span><br><span class="line">  <span class="keyword">this</span>.postMessage(<span class="string">'你的工人告诉你他收到命令开始干活了!'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：他和<code>js</code>主线程不是平级的，主线程可以控制<code>webworker</code>，<code>webworker</code>不能操作<code>dom</code>，不能获取<code>document</code>以及<code>window</code>。</p><p>既然是单线程，那<code>Js</code>是怎么处理异步任务呢？停下来等待的话，CPU资源利用率得有多低啊…</p><h4 id="异步任务以及事件循环"><a href="#异步任务以及事件循环" class="headerlink" title="异步任务以及事件循环"></a><strong>异步任务以及事件循环</strong></h4><p>为了解决这个问题，<code>Javascript</code>将任务的执行方式分为两种：<code>同步/synchronous</code> 和 <code>异步/asynchronous</code></p><p>在浏览器内核中，除了<code>JS线程</code>和<code>用户界面后端/UI Backend线程</code>，还有一些其它的线程，比如说<code>浏览器事件触发线程(对应上图的events)</code>、<code>定时器触发线程(timing，我的理解：在stack中如果遇到setTimeout的异步任务，就交给WebAPIs，定时到了，该线程就触发，把回调返回，推入到宏任务队列)</code>、<code>异步HTTP请求线程(ajax)</code>，而异步任务就是分发给这些线程来处理的。</p><h4 id="EventLoop-事件的循环检测机制"><a href="#EventLoop-事件的循环检测机制" class="headerlink" title="*EventLoop *- 事件的循环检测机制"></a>*<em>EventLoop *</em>- 事件的循环检测机制</h4><p>事件环就是<code>Javascript</code>主线程从<code>callback queue</code>中不断读取事件到执行栈(<code>stack</code>)的这种循环的过程。</p><h4 id="从setTimeout和Promise出发深入了解一下同步异步的微任务宏任务"><a href="#从setTimeout和Promise出发深入了解一下同步异步的微任务宏任务" class="headerlink" title="从setTimeout和Promise出发深入了解一下同步异步的微任务宏任务"></a><strong>从<code>setTimeout</code>和<code>Promise</code>出发深入了解一下同步异步的微任务宏任务</strong></h4><p><strong>单独使用的执行模式</strong></p><p>1.最初的试探</p><p>执行代码，<code>Promise</code>的基本使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    resolve(<span class="number">3</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行</span></span><br><span class="line">fn().then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data))</span><br></pre></td></tr></table></figure><p>以上代码，输出结果为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="comment">// 同步</span></span><br><span class="line"><span class="number">2</span> <span class="comment">// 同步</span></span><br><span class="line"><span class="number">4</span> <span class="comment">// 同步</span></span><br><span class="line"><span class="number">3</span> <span class="comment">// 异步</span></span><br></pre></td></tr></table></figure><p>注意 <code>new Promise()</code>是同步方法，<code>resolve</code>才是异步方法。<br>此外，上面的方法，可以有下面这种写法，效果等同，主要是把<code>Promise</code>精简了一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">let</span> a = <span class="built_in">Promise</span>.resolve(<span class="number">3</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行</span></span><br><span class="line">fn().then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data))</span><br></pre></td></tr></table></figure><p>因为现在讨论的是<code>Promise</code>的异步功能，所以下面均使用第二种写法的<code>Promise</code></p><p>2.多个同级<code>Promise</code></p><p>编辑器中，输入以下代码，多个同级的单层的<code>Promise</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'同步-0.1'</span>)</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'P-1.1'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'P-1.2'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'P-1.3'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'同步-0.2'</span>)</span><br></pre></td></tr></table></figure><p>则会依次输出以下打印，毫无疑问的结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">同步<span class="number">-0.1</span></span><br><span class="line">同步<span class="number">-0.2</span></span><br><span class="line">P<span class="number">-1.1</span></span><br><span class="line">P<span class="number">-1.2</span></span><br><span class="line">P<span class="number">-1.3</span></span><br></pre></td></tr></table></figure><p>3.<code>Promise</code>套<code>Promise</code></p><p>复杂一点的栗子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'同步-0.1'</span>)</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'P-1.1'</span>)</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 新加行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'P-2.1'</span>) <span class="comment">// 新加行</span></span><br><span class="line">  &#125;) <span class="comment">// 新加行</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'P-1.2'</span>)</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 新加行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'P-2.2'</span>) <span class="comment">// 新加行</span></span><br><span class="line">  &#125;) <span class="comment">// 新加行</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'P-1.3'</span>)</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 新加行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'P-2.3'</span>) <span class="comment">// 新加行</span></span><br><span class="line">  &#125;) <span class="comment">// 新加行</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'同步-0.2'</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">同步<span class="number">-0.1</span></span><br><span class="line">同步<span class="number">-0.2</span></span><br><span class="line">P<span class="number">-1.1</span></span><br><span class="line">P<span class="number">-1.2</span></span><br><span class="line">P<span class="number">-1.3</span></span><br><span class="line">P<span class="number">-2.1</span></span><br><span class="line">P<span class="number">-2.2</span></span><br><span class="line">P<span class="number">-2.3</span></span><br></pre></td></tr></table></figure><p>可见，多层<code>Promise</code>是一层一层执行的。</p><p>4.为了最终确认，进行最后一次验证，在第一个<code>Promise</code>里面多加一层：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'同步-0.1'</span>)</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'P-1.1'</span>)</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'P-2.1'</span>)</span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 新加行</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'P-3.1'</span>) <span class="comment">// 新加行</span></span><br><span class="line">    &#125;) <span class="comment">// 新加行</span></span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 新加行</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'P-3.2'</span>) <span class="comment">// 新加行</span></span><br><span class="line">    &#125;) <span class="comment">// 新加行</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'P-1.2'</span>)</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'P-2.2'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'P-1.3'</span>)</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'P-2.3'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'同步-0.2'</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">同步<span class="number">-0.1</span></span><br><span class="line">同步<span class="number">-0.2</span></span><br><span class="line">P<span class="number">-1.1</span></span><br><span class="line">P<span class="number">-1.2</span></span><br><span class="line">P<span class="number">-1.3</span></span><br><span class="line">P<span class="number">-2.1</span></span><br><span class="line">P<span class="number">-2.2</span></span><br><span class="line">P<span class="number">-2.3</span></span><br><span class="line">P<span class="number">-3.1</span></span><br><span class="line">P<span class="number">-3.2</span></span><br></pre></td></tr></table></figure><p><code>js</code>确认完毕，的确是一层一层的执行。</p><p>而且这里可以告诉大家，<code>setTimeout</code>和<code>setInterval</code>在单独使用的时候，和<code>Promise</code>是一样的，同样是分层执行，这里不再贴代码了（友情提醒：<code>setInterval</code>的话，需要第一次执行就把这个定时器清掉，否则就无限执行，卡死页面秒秒钟的事儿）</p><p><strong>混合使用的执行模式</strong></p><p>将<code>setTimeout</code>和<code>Promise</code>进行混合操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'同步-0.1'</span>)</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'P-1.1'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'S-1.1'</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'P-1.2'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'S-1.2'</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'同步-0.2'</span>)</span><br></pre></td></tr></table></figure><p>执行结果如下。。。问题暴露出来了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">同步<span class="number">-0.1</span></span><br><span class="line">同步<span class="number">-0.2</span></span><br><span class="line">P<span class="number">-1.1</span></span><br><span class="line">P<span class="number">-1.2</span></span><br><span class="line">S<span class="number">-1.1</span></span><br><span class="line">S<span class="number">-1.2</span></span><br></pre></td></tr></table></figure><p>在同级情况下，是<code>Promise</code>执行完了<code>setTimeout</code>才会执行</p><p>这就要涉及到<code>宏任务(macro task)</code>和<code>微任务(micro task)</code>了</p><p><code>JS</code>开始执行的时候，就开启一个宏任务(<code>script</code>)，然后执行一条条的指令。</p><p><code>JS</code>每次执行完当前的<code>stack</code>之后，都会从<code>callback queue</code>中的宏任务队列取出头部的一个宏任务加入到<code>stack</code>中（执行过程中遇到<code>setTimeout()</code>、<code>resolve()</code>和<code>ajax.then()</code>这种异步任务则给<code>WebAPIs</code>，异步任务完成后（如<code>setTimeout</code>定时到了、<code>ajax</code>返回了结果），就会触发相应的线程，将它们的回调推入到<code>callback queue</code>中，<code>setTimeout</code>的回调推入到宏任务队列，<code>resolve</code>和<code>ajax.then</code>的回调会被推入到微任务队列），每一个宏任务后面都跟着一个微任务队列，每次宏任务执行完，主线程就会去查微任务队列，如果不为空，则清空微任务队列，之后重复该循环。</p><p>现在如果执行下面的代码，结果也显而易见吧：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'同步-0.1'</span>)</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'P-1.1'</span>)</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 新加行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'P-2.1'</span>) <span class="comment">// 新加行</span></span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 新加行</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'P-3.1'</span>) <span class="comment">// 新加行</span></span><br><span class="line">    &#125;) <span class="comment">// 新加行</span></span><br><span class="line">  &#125;) <span class="comment">// 新加行</span></span><br><span class="line">&#125;)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'S-1.1'</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'P-1.2'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'S-1.2'</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'同步-0.2'</span>)</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">同步<span class="number">-0.1</span></span><br><span class="line">同步<span class="number">-0.2</span></span><br><span class="line">P<span class="number">-1.1</span></span><br><span class="line">P<span class="number">-1.2</span></span><br><span class="line">P<span class="number">-2.1</span></span><br><span class="line">P<span class="number">-3.1</span></span><br><span class="line">S<span class="number">-1.1</span></span><br><span class="line">S<span class="number">-1.2</span></span><br></pre></td></tr></table></figure><p>无论<code>Promise</code>套用多少层，都会在下一个<code>setTimeout</code>之前执行。</p><h4 id="Dom操作到底是同步，还是异步"><a href="#Dom操作到底是同步，还是异步" class="headerlink" title="Dom操作到底是同步，还是异步"></a><code>Dom</code>操作到底是同步，还是异步</h4><p><strong>这里直接说明：js里面的Dom操作代码，是同步执行，但浏览器进行的Dom渲染，是异步操作。</strong></p><p><strong>浏览器渲染Dom和执行js，同时只能二选一，渲染一次Dom的时机(GUI渲染)是，当前宏任务和小尾巴微任务执行完，下一个宏任务开始前</strong></p><p><code>vue</code>的方法，则是使用<code>HTML5</code>的<code>Api</code>—<code>MutationObserver</code>，监听浏览器将<code>Dom</code>渲染完成的时机。</p><p>上面也说了，浏览器渲染一次Dom，是下一个宏任务开始前，这样使用了<code>setTimeout</code>，保证了Dom确实渲染完成。</p><p>这里也需要稍作提醒，<code>javascript</code>操作Dom是同步的，但操作Dom，毕竟超出了<code>javascript</code>本身语言的<code>Api</code>，每操作一次Dom，都需要消耗一定的性能，所以，在适合的情况下，最好先把要修改的Dom的内容，以字符串或者虚拟Dom的形式拼接好，然后操作一次Dom，把组装好的Dom字符串或虚拟Dom，一次性的塞进HTML页面的真实Dom中。</p><h4 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="built_in">Date</span>.now());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.random());</span><br><span class="line">    <span class="keyword">let</span> now = <span class="keyword">await</span> A();</span><br><span class="line">    <span class="built_in">console</span>.log(now);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">B();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>其实，<code>async/await</code> 只是 <code>Promise+generator</code> 的一种语法糖而已。上面的代码我们改写为这样，可以更加清晰一点：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.random());</span><br><span class="line">    A().then(<span class="function"><span class="keyword">function</span>(<span class="params">now</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(now);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">B();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>这样我们就能明白输出的先后顺序了： 1, 0.4793526730678652(随机数), 2, 1557830834679(时间戳);</p><h4 id="requestAnimationFrame"><a href="#requestAnimationFrame" class="headerlink" title="requestAnimationFrame"></a>requestAnimationFrame</h4><p><code>requestAnimationFrame</code>也属于异步执行的方法，但该方法既不属于宏任务，也不属于微任务。按照<code>MDN</code>中的定义：</p><blockquote><p><code>window.requestAnimationFrame()</code> 告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行</p></blockquote><p><code>requestAnimationFrame</code>是<code>GUI</code>渲染之前执行，但在微服务之后，不过<code>requestAnimationFrame</code>不一定会在当前帧必须执行，由浏览器根据当前的策略自行决定在哪一帧执行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://thinkerhope.github.io/2020/01/04/setTimeout%E5%92%8CPromise%E7%9C%8Beventloop/eloop.png&quot; alt=&quot;eloop&quot;&gt;&lt;/p&gt;
&lt;p&gt;大家都知道&lt;code
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2019总结</title>
    <link href="http://yoursite.com/2019/12/31/2019%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/12/31/2019总结/</id>
    <published>2019-12-31T14:14:31.000Z</published>
    <updated>2019-12-31T23:08:47.417Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://thinkerhope.github.io/2019/12/31/2019%E6%80%BB%E7%BB%93/timg.jpeg" alt="timg"></p><p>​    2019是我人生中很重要很重要的一年，特地在最后一天写这篇日志记录下来，旨在总结19年的经历和成果，以及20年的展望和期待。</p><p>​    第一件事算是祛除我的黑眼圈了吧，其实从高考结束后我就意识到这个问题了，只是条件不允许，就先忍下来了。大学后，意识到自己重重的黑眼圈已经影响到自己的生活了（大部分原因是自己过于敏感脆弱吧，呵呵），我终于决定想通过医美的方式来除掉黑眼圈了，想得跟简单，不就做个手术割掉嘛…当我去了江西省人民医院，我想算是我们那最好的三甲医院了吧。医生说黑眼圈不好办，不能手术…于是建议做射频…3次一点效果都没有，最后还忍受了两次激光的折磨，也是一点效果都没有，因为这个时间正好是寒假，在南昌和赣州往返了不下五趟吧，而且还有2趟是站票，别提多难受了，关键到最后一点效果都没有，还坑了家里面的钱。大二下吧，临近暑假的时候，我鼓起勇气去了秦皇岛市第一医院，咨询了医美科的主任医生，医生说黑眼圈是无法通过手术的方式来治疗的，而且我还发现原来我还有眼袋以及上睑下垂，哭了，我命苦啊。我通过医生了解到上睑下垂是可以通过手术方式来治疗的，就和做双眼皮一样…我没多想决定做了，我妈带我去了广州的一家私人医美整形机构…所谓的整形顾问给我出了一套方案，我啥没想，只想快点见到改变后的自己…好吧，到现在还觉得那个所谓的顾问很是浮夸。手术持续了2个小时吧，就当自己做了个很贵的双眼皮手术吧，不想被其他人知道，就一直藏在心里吧，这个秘密。</p><p>​    第二件事应该是我加入了工作室吧。不洗碗工作室从大二下学期，也就是4月份的时候开始招我们这一批的，主要面向大二（快大二）的学弟学妹，我算是个唯一一个大三（快大三）去工作室的，也就是跟着一个pdf上的文件跟着学而已，其实感觉到快要面试的时候，依然感觉没怎么学…哈哈，可能是其他人比我还菜吧。总之，之间的每一次任务都有很认真地完成，虽然学习效率和学习方法上面还有很大的问题，但是…我只能尽我目前有的最大能力，是吧。好在到7月份工作室负责人雷鹏飞面试了我，在9月份的时候有把我拉进了4.0的群，我很开心，能加入工作室，早就听闻工作室有个去小米实习的吴东很厉害，也终于意味着我不用一直一个人了。工作室的氛围很好，人才济济。虽然项目不多，也能自己和学弟一起完成或者尝试开发一些demo性质的项目吧。</p><p>   第三件事，大二时心理健康课同一组的一个女生邀请我信息经济学和她一组，我还有点小惊喜，平时不爱说话，没啥人缘的我，竟然被人主动邀请了。没多想就答应了，没曾想这是我噩梦的开始…呵呵，原本就没打算在这个无聊的学校，无聊的教室会和一群无聊的同学有什么交集，而且这个学期我的目标算是很明确了，找个前端的实习工作，完成几个项目，眼前的人本来就与我无关。后座同组的女生和我打招呼，问我问题，说了几次话后，我并没有在意，也没有记住她的样子，更不知道，也没有兴趣问名字，可能是穿着黑色的外套吧…emmm，感觉品味很差，就这样吧，哈哈。之后上课，我坐在她后面，每次她转过头来，我都刚好望向她那边，次数多了发现她…她侧脸好好看啊，而且她侧着脸，噘着嘴望向我好可爱啊…我开始想了解她，我翻了她的qq资料，对她的qq签名印象很深刻，凡心所向，素履以往…从此就成了我最喜欢的一句。虽然之后再上了两节课，才记住她长什么样。好几次在路上遇到 她，觉得她走路的气质很好，虽然个子不高，颜值也高不到哪里去，在大部分人的眼中应该是没有很特别的那种女生吧，但是我好像真的有点喜欢上她了，有一点点。我开始期待每一节课，每一节能和她坐一起的课，每一节能看见她的课，我开始期待…这也是我坠入深渊的开始，脑袋里不间断地出现同一个人，声音和模样，我开始变得贪婪，我不再满足于只是她简单地回头找我说几句话，开始主动找她，我喜欢拽她的帽子和衣角，时不时会抓她的头发，喜欢趁她回头对我笑的时候用笔戳她的肩膀，我真的真的好喜欢她在我身边带给我的那种的温度，有点暖暖的，也有一点凉凉的那种感觉，我开始抱怨信息经济学课怎么这么少…周二过去，就开始煎熬地等待周四…我也不知道为什么，其它课都不敢坐她旁边，即使坐一起了，又能怎样，话也说不上几句，我这该死的怂货，也不知道怎么找话题…，就这样很难受地一直期待她来找我说话。但是她的每一次回头都能让我精神百倍，虽然可能不是看向我，哈哈。好吧…国庆快结束的时候，我终于下定决心约她出来玩啦，那天的我真的觉得自己就是世界上最勇敢的人了。在国庆临近的时候，别人都是特别开心的，我却开心不起来…1个星期都看不到她，要我怎么过呢。其实，国庆第一天，我就给她发了一个txt文件，到现在还在，哈哈。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6211</span> <span class="number">559</span>c <span class="number">6</span>b22 <span class="number">4</span>f60<span class="number">-115</span><span class="number">-106</span><span class="number">-121</span></span><br></pre></td></tr></table></figure><p>我当时发的就是一个解析这个16进制的程序，log的是”宋俊谕，我喜欢你”。告诉了她把代码复制到chrome console按回车就可以了，按道理她挺聪明的，应该能猜到什么意思了…就忐忑地等了一天没有任何消息了，我想我是不是被讨厌了啊…哈哈，第二天，因为之前答应了她把那个登录的代码发她，虽然她可能也没有怎么在意，不过我还是很认真地…又担心她不会用，就重写了一份发给她。好吧，约会那天由于各种原因，晚上一起在东操场散了几圈步，也不算特别尴尬吧，我挺喜欢和她聊天的，虽然我不会和不熟悉的人聊天，但是还是很开心，而且那天晚上她披着头发，不过我喜欢她扎着头发的样子，干净整洁。虽然最后因为各种原因，各奔东西了，哈哈，以后也不会有交集了吧。释怀了，几天后我终于从这种无尽的痛苦中解脱了，我认识到及时止损的重要性…不然越陷越深，到最后只有自己傻傻地受伤。自动多情真的很卑微。好吧，就我一个人知道为什么之后有段时间，眼睛一直带血丝，嘻嘻，我去医院割了眼袋，虽然效果不是很好，不过算是一种麻痹自己吧，想快点忘记。</p><p>​    最大的一件事，就是我拿到北京小米科技的实习offer啦，真的很开心，这是我人生中的第一份工作。这段时间面试了今日头条、快手、小米，头条是我的第一次尝试吧，当时也不知道自己哪来的勇气和冲劲，就想着去尝试一下。还要感谢一下头条的一面和二面面试官吧，人很nice，很可惜吧，在我拿入职小米后，头条又给我发了面试邀请，我答应了…但是我把面试官给鸽了，没有在约定的时间面试，也没有提前和HR联系取消面试…到现在还自责。小米面试是现场面的，第一次来到西二旗小米科技园，哇!好华丽的现代建筑，在这里工作的人肯定很幸福吧，我很喜欢自己的一面和二面面试官，leader也很nice。真的很开心，加入了MIAI-FE，和小爱同学一起…开始一段难忘的人生经历…</p><p>   <img src="https://thinkerhope.github.io/2019/12/31/2019%E6%80%BB%E7%BB%93/IMG_20200101_064702.jpg" alt="IMG_20200101_064702"></p><p>   故事依然在继续…跟着自己的内心，就这样一直走下去吧。</p><p>​    展望2020，考研、2020东京奥运会、秋招…总之会是充满奇迹的一年吧。给自己立一波flag，系统学习JS(《Javascript权威指南》)，我大前端不能丢(HTML5的两本高效指南)为秋招做准备，基于React的项目不少于2个，开始学习Vue，Github开源项目学习不低于5个，顺利地完成学业，还有达成那个创新创业学分的指标。别忘了，自己说的，除了指上的代码，还有眼里的星辰呢，希望20年可以找到中意的女生吧，总得在学校留下点什么回忆啥的，是吧…希望自己喜欢的人也能喜欢自己吧，还有就是把自己过于在人多的地方会慌张的毛病矫正过来。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://thinkerhope.github.io/2019/12/31/2019%E6%80%BB%E7%BB%93/timg.jpeg&quot; alt=&quot;timg&quot;&gt;&lt;/p&gt;
&lt;p&gt;​    2019是我人生中很重要很重要的一年，特地在最后一天写这
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>使用hooks来优化性能</title>
    <link href="http://yoursite.com/2019/12/05/%E4%BD%BF%E7%94%A8hooks%E6%9D%A5%E4%BC%98%E5%8C%96%E6%80%A7%E8%83%BD/"/>
    <id>http://yoursite.com/2019/12/05/使用hooks来优化性能/</id>
    <published>2019-12-05T03:38:43.000Z</published>
    <updated>2019-12-05T03:53:56.042Z</updated>
    
    <content type="html"><![CDATA[<ol><li>调用setState，就会触发组件的重新渲染，无论前后的state是否不同</li><li>父组件更新，子组件也会自动的更新</li></ol><p>基于上面的两点，我们通常的解决方案是：使用immutable进行比较，在不相等的时候调用setState；在shouldComponentUpdate中判断前后的props和state，如果没有变化，则返回false来阻止更新。</p><h4 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h4><p>糟糕的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">WithoutMemo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [count, setCount] = useState(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">const</span> [val, setValue] = useState(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">expensive</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'compute'</span>);</span><br><span class="line">        <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count * <span class="number">100</span>; i++) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;count&#125;-&#123;val&#125;-&#123;expensive()&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;+c1&lt;/button&gt;</span><br><span class="line">            &lt;input value=&#123;val&#125; onChange=&#123;event =&gt; setValue(event.target.value)&#125;/&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>每次<code>count</code>或者<code>val</code>变化都会触发组件的重新渲染，<code>expensive()</code>函数就会重新执行。</p><p>使用useMemo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">WithMemo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [count, setCount] = useState(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">const</span> [val, setValue] = useState(<span class="string">''</span>);</span><br><span class="line">    <span class="keyword">const</span> expensive = useMemo(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'compute'</span>);</span><br><span class="line">        <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count * <span class="number">100</span>; i++) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;, [count]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;count&#125;-&#123;expensive&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;val&#125;</span></span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;+c1&lt;/button&gt;</span><br><span class="line">            &lt;input value=&#123;val&#125; onChange=&#123;event =&gt; setValue(event.target.value)&#125;/&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>这样，只会在<code>count</code>值改变的时候执行函数，并且由于缓存了上一次的<code>sum</code>值，因此可以放心地获取到最新的<code>sum</code>值。</p><h4 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h4><p><strong>使用场景</strong>是：有一个父组件，其中包含子组件，子组件接收一个函数作为props；通常而言，如果父组件更新了，子组件也会执行更新；但是大多数场景下，更新是没有必要的，我们可以借助useCallback来返回函数，然后把这个函数作为props传递给子组件；这样，子组件就能避免不必要的更新。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useCallback, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [count, setCount] = useState(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">const</span> [val, setVal] = useState(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> callback = useCallback(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;, [count]);</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line">        &lt;Child callback=&#123;callback&#125;/&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;+&lt;/button&gt;</span><br><span class="line">            &lt;input value=&#123;val&#125; onChange=&#123;event =&gt; setVal(event.target.value)&#125;/&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Child(&#123; callback &#125;) &#123;</span><br><span class="line">    const [count, setCount] = useState(() =&gt; callback());</span><br><span class="line">    useEffect(() =&gt; &#123;</span><br><span class="line">        setCount(callback());</span><br><span class="line">    &#125;, [callback]);</span><br><span class="line">    return &lt;div&gt;</span><br><span class="line">        &#123;count&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>可以发现和useEffect很像，最大的不同是，useEffect可以处理副作用，但是useMemo和useCallback不可以</li><li>useCallback返回的是缓存的函数，我们可以借助ES6的set数据结构来判断这个函数是否发生改变</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;调用setState，就会触发组件的重新渲染，无论前后的state是否不同&lt;/li&gt;
&lt;li&gt;父组件更新，子组件也会自动的更新&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基于上面的两点，我们通常的解决方案是：使用immutable进行比较，在不相等的时候调用setState；
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
