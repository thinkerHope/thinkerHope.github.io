<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>记录我的点滴</title>
  
  <subtitle>Yu Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-26T12:22:22.817Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>boygreen_Yu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>react学习 02</title>
    <link href="http://yoursite.com/2019/09/26/react%E5%AD%A6%E4%B9%A0-02/"/>
    <id>http://yoursite.com/2019/09/26/react学习-02/</id>
    <published>2019-09-25T23:08:08.000Z</published>
    <updated>2019-09-26T12:22:22.817Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/home/boygreen/MyBlog/source/_posts/react%E5%AD%A6%E4%B9%A0-02/react01.jpg" alt></p><blockquote><h3 id="待雾散开，自然能看到想要的风景。"><a href="#待雾散开，自然能看到想要的风景。" class="headerlink" title="待雾散开，自然能看到想要的风景。"></a>待雾散开，自然能看到想要的风景。</h3></blockquote><p>我们都知道，<code>JSX</code>是<code>React.createElement(component, props, ...children)</code>的语法糖。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> React.createElement(<span class="string">'div'</span>, <span class="literal">null</span>, <span class="string">`Hello <span class="subst">$&#123;<span class="keyword">this</span>.props.toWhat&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  React.createElement(Hello, &#123;<span class="attr">toWhat</span>: <span class="string">'World'</span>&#125;, <span class="literal">null</span>),</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>Diff算法</p></blockquote><p><strong>当组件的root为不同类型的diff</strong></p><p>diffing如下</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;Counter /&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;span&gt;</span></span><br><span class="line"><span class="regexp">  &lt;Counter /</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/span&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;Counter /&gt;</code> 会被卸载并且它的<code>state</code>会被销毁</p><p><strong>同类型的DOM元素比较</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=<span class="string">"before"</span> title=<span class="string">"stuff"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;div className=<span class="string">"after"</span> title=<span class="string">"stuff"</span> /&gt;</span><br></pre></td></tr></table></figure><p><code>React</code>只改变<code>className</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&#123;&#123;<span class="attr">color</span>: <span class="string">'red'</span>, <span class="attr">fontWeight</span>: <span class="string">'bold'</span>&#125;&#125; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;div style=&#123;&#123;<span class="attr">color</span>: <span class="string">'green'</span>, <span class="attr">fontWeight</span>: <span class="string">'bold'</span>&#125;&#125; /&gt;</span><br></pre></td></tr></table></figure><p><code>React</code>也只改变<code>color</code></p><p><strong>同类型的React组件</strong></p><p><code>React</code>不会卸载组件(即同一个<code>JS instance</code>)，<code>React</code>会通过更新<code>props</code>去匹配新的DOM元素，之后调用<code>componentWillReceiveProps()</code> and <code>componentWillUpdate()</code>。</p><p><strong>在Children中递归</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li&gt;first&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  &lt;li&gt;second&lt;/</span>li&gt;</span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;ul&gt;</span></span><br><span class="line"><span class="regexp">  &lt;li&gt;first&lt;/</span>li&gt;</span><br><span class="line">  &lt;li&gt;second&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  &lt;li&gt;third&lt;/</span>li&gt;</span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br></pre></td></tr></table></figure><p><code>React</code>能匹配<code>first</code>和<code>second</code>，并且保证这两棵子树的完整，只是插入<code>third</code>子树。</p><p>试想一下，如果<code>third</code>在<code>first</code>之前插入，<code>React</code>不会考虑<code>first</code>和<code>second</code>的完整性，而是改变每一个子节点。How a bad performance !</p><h3 id="Key"><a href="#Key" class="headerlink" title="Key"></a>Key</h3><blockquote><p>key用来解决上面的问题</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li key=<span class="string">"first"</span>&gt;first&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  &lt;li key="second"&gt;second&lt;/</span>li&gt;</span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;ul&gt;</span></span><br><span class="line"><span class="regexp">  &lt;li key="third"&gt;third&lt;/</span>li&gt;</span><br><span class="line">  &lt;li key=<span class="string">"first"</span>&gt;first&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  &lt;li key="second"&gt;second&lt;/</span>li&gt;</span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br></pre></td></tr></table></figure><p>​p><h3 id="Render-Props"><a href="#Render-Props" class="headerlink" title="Render Props"></a>Render Props</h3><blockquote><p>利用render props解决组件复用问题</p></blockquote><p>一个简单的应用场景</p><p>需要记录鼠标移动的位置，并用<code>p标签</code>显示出来。</p><p>一般会直接封装一个<code>Mouse</code>组件用来记录鼠标的位置并且保存在state状态。并且通过<code>this.state</code>在<code>p标签</code>中显示。直接在<code>MouseTracker</code>(父组件中调用就可以了)。</p><p>但这并没有实现真正的封装，当我们新增业务需求的时候，比如需要随鼠标渲染出一只猫的<code>image</code>，创建一个<code>Cat组件</code>。把<code>Cat</code>组件放在Mouse组件的render()方法里，通过传入<code>this.state</code>来获取鼠标位置渲染出<code>image</code>。这样就失去复用的的意义了，如果要渲染Dog，Pig，那么每次都要重新创建Mouse组件，<code>MouseWithCat</code>、<code>MouseWithPig</code>、<code>MouseWithDog</code>。</p><blockquote><p>利用render属性，可以实现动态渲染。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> mouse = <span class="keyword">this</span>.props.mouse;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;img src=<span class="string">"/cat.jpg"</span> style=&#123;&#123; <span class="attr">position</span>: <span class="string">'absolute'</span>, <span class="attr">left</span>: mouse.x, <span class="attr">top</span>: mouse.y &#125;&#125; /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mouse</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.handleMouseMove = <span class="keyword">this</span>.handleMouseMove.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleMouseMove(event) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      x: event.clientX,</span><br><span class="line">      y: event.clientY</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div style=&#123;&#123; <span class="attr">height</span>: <span class="string">'100%'</span> &#125;&#125; onMouseMove=&#123;<span class="keyword">this</span>.handleMouseMove&#125;&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.props.render(<span class="keyword">this</span>.state)&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class MouseTracker extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;h1&gt;Move the mouse around!&lt;/</span>h1&gt;</span><br><span class="line">        &lt;Mouse render=&#123;mouse =&gt; (</span><br><span class="line">          &lt;Cat mouse=&#123;mouse&#125; /&gt;</span><br><span class="line">        )&#125;/&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><p><strong>(1) render Props的属性名不强制规定为render</strong></p><p><strong>(2) children prop也能实现</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Mouse&gt;</span><br><span class="line">  &#123;mouse =&gt; (</span><br><span class="line">    &lt;p&gt;The mouse position is &#123;mouse.x&#125;, &#123;mouse.y&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  )&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Mouse&gt;</span><br></pre></td></tr></table></figure><p>(3) 小心用render属性</p><p>因为render属性是个函数，向下面这样写就很不好</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Mouse render=&#123;mouse =&gt; (</span><br><span class="line">         &lt;Cat mouse=&#123;mouse&#125; /&gt;</span><br><span class="line">       )&#125;/&gt;</span><br></pre></td></tr></table></figure><p>每次Mouse组件重新渲染的时候都会重新创建render函数。</p><p>将render函数作为组件实例方法就行了。(组件一般都会一直在内存里)</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MouseTracker</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  renderTheCat(mouse) &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;Cat mouse=&#123;mouse&#125; /&gt;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Move the mouse around!&lt;/h1&gt;</span><br><span class="line">        &lt;Mouse render=&#123;this.renderTheCat&#125; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/home/boygreen/MyBlog/source/_posts/react%E5%AD%A6%E4%B9%A0-02/react01.jpg&quot; alt&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&quot;待雾散开，自然能看到想要的风景。&quot;&gt;&lt;a 
      
    
    </summary>
    
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React学习 01</title>
    <link href="http://yoursite.com/2019/09/23/React%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2019/09/23/React学习/</id>
    <published>2019-09-23T15:51:10.000Z</published>
    <updated>2019-09-25T23:04:55.577Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记录几个有用的特性</p></blockquote><h4 id="Forwarding-Refs"><a href="#Forwarding-Refs" class="headerlink" title="Forwarding Refs"></a>Forwarding Refs</h4><blockquote><p><code>React.forwardRef</code> accepts a render function that receives <code>props</code> and <code>ref</code> parameters and returns a React node.</p></blockquote><p>自己写<code>HTML5</code>的<code>audio</code>需要在父组件中使用子组件<code>Audio</code>里面的<code>audio</code> <code>DOM</code>元素</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Audio.js</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Audio = React.forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;audio</span><br><span class="line">src=<span class="string">"https://music.163.com/song/media/outer/url?id=1387152054.mp3"</span></span><br><span class="line">ref=&#123;ref&#125;</span><br><span class="line">&#123;...props&#125;</span><br><span class="line">&gt;</span><br><span class="line">            Your browser does not support the &lt;code&gt;audio&lt;<span class="regexp">/code&gt; element.</span></span><br><span class="line"><span class="regexp">&lt;/</span>audio&gt;</span><br><span class="line">);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">父组件.js</span><br><span class="line"><span class="keyword">this</span>.lectureAudio = React.createRef();</span><br><span class="line"></span><br><span class="line">&lt;Audio</span><br><span class="line">ref=&#123;<span class="keyword">this</span>.lectureAudio&#125;</span><br><span class="line">onCanPlay=&#123;<span class="keyword">this</span>.handleCanPlay&#125;</span><br><span class="line">onTimeUpdate=&#123;<span class="keyword">this</span>.handleTimeUpdate&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h4 id="传播属性"><a href="#传播属性" class="headerlink" title="传播属性"></a>传播属性</h4><blockquote><p>两个组件是等效的</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &lt;Greeting firstName="Ben" lastName="Hector" /&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function App2() &#123;</span><br><span class="line">  const props = &#123;firstName: 'Ben', lastName: 'Hector'&#125;;</span><br><span class="line">  return &lt;Greeting &#123;...props&#125; /&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以获取特定属性，而不是直接传，这里把<code>other</code>和<code>props.children</code>传给了<code>button</code> </p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Button = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; kind, ...other &#125; = props;</span><br><span class="line">  <span class="keyword">const</span> className = kind === <span class="string">"primary"</span> ? <span class="string">"PrimaryButton"</span> : <span class="string">"SecondaryButton"</span>;</span><br><span class="line">  <span class="keyword">return</span> &lt;button className=&#123;className&#125; &#123;...other&#125; /&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const App = () =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Button kind="primary" onClick=&#123;() =&gt; console.log("clicked!")&#125;&gt;</span><br><span class="line">        Hello World!</span><br><span class="line">      &lt;/Button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>一个很有用的栗子</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">父组件.js</span><br><span class="line">&lt;Audio</span><br><span class="line">ref=&#123;<span class="keyword">this</span>.lectureAudio&#125;</span><br><span class="line">handleCanPlay=&#123;<span class="keyword">this</span>.handleCanPlay&#125;</span><br><span class="line">handleTimeUpdate=&#123;<span class="keyword">this</span>.handleTimeUpdate&#125;</span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line">一般情况传属性的方式</span><br><span class="line">Audio.js</span><br><span class="line"><span class="keyword">const</span> Audio = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;audio</span><br><span class="line">src=&#123;<span class="string">""</span>&#125;</span><br><span class="line">ref=&#123;ref&#125;</span><br><span class="line">onCanPlay=&#123;props.handleCanPlay&#125;</span><br><span class="line">onTimeUpdate=&#123;props.handleTimeUpdate&#125;</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/audio&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">父组件.js</span></span><br><span class="line"><span class="regexp">&lt;Audio</span></span><br><span class="line"><span class="regexp">ref=&#123;this.lectureAudio&#125;</span></span><br><span class="line"><span class="regexp">onCanPlay=&#123;this.handleCanPlay&#125;</span></span><br><span class="line"><span class="regexp">onTimeUpdate=&#123;this.handleTimeUpdate&#125;</span></span><br><span class="line"><span class="regexp">/</span>&gt;</span><br><span class="line">直接用props(和以上方式等效)</span><br><span class="line"><span class="keyword">const</span> Audio = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;audio</span><br><span class="line">src=&#123;...&#125;</span><br><span class="line">ref=&#123;ref&#125;</span><br><span class="line">    &#123;...props&#125;</span><br><span class="line">&gt;</span><br><span class="line">&lt;<span class="regexp">/audio&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>代码就变得精简了。</p><blockquote><p>小结</p></blockquote><p> 虽然好用，但是官网建议尽量少用，会传一些不必要的属性。</p><h4 id="props-children"><a href="#props-children" class="headerlink" title="props.children"></a>props.children</h4><blockquote><p>传递组件的children可以是anything，比如函数</p><p><code>false</code>, <code>null</code>, <code>undefined</code>, 以及 <code>true</code>是不合法children </p></blockquote><p>一个栗子</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Repeat</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> items = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; props.numTimes; i++) &#123;</span><br><span class="line">    items.push(props.children(i));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &lt;div&gt;&#123;items&#125;&lt;/div&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ListOfTenThings</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Repeat numTimes=&#123;<span class="number">10</span>&#125;&gt;</span><br><span class="line">      &#123;(index) =&gt; &lt;div key=&#123;index&#125;&gt;This is item &#123;index&#125; in the list&lt;/div&gt;&#125;</span><br><span class="line">    &lt;<span class="regexp">/Repeat&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>Protals</code> 插槽</p></blockquote><p>博文 </p><p><a style="color: orange;text-decoration: none;"><a href="https://segmentfault.com/a/1190000012325351" target="_blank" rel="noopener">使用 Portal 优雅实现“浮”在页面上的组件</a></a></p><p>当父组件有overflow: hidden; 或者 z-index的样式时候，又希望子结点冲破父容器展示（例如tooltips）</p><blockquote><p>Usage</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">  <span class="keyword">return</span> ReactDOM.createPortal(</span><br><span class="line">    <span class="keyword">this</span>.props.children,<span class="comment">// ReactChild</span></span><br><span class="line">    domNode<span class="comment">//一个DOM元素</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里没有创建div来包裹this.props.children，而是将它直接渲染到domNode(任意一个DOM结点，无论DOM结点的位置)</p><p><img src="https://thinkerhope.github.io/2019/09/23/React%E5%AD%A6%E4%B9%A0/react02.jpeg" alt="react05"></p><p>在 <code>React 组件树</code>设计上，Selector 是 Button 的子组件。但是在 <code>DOM 树</code>的角度 <code>Selector</code> 是 <code>Body</code> 的子节点。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button&gt;</span><br><span class="line">&lt;Selector /&gt;</span><br><span class="line">&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Button.js</span></span><br><span class="line"><span class="regexp">return ReactDOM.createPortal(this.props.children, Body);</span></span><br></pre></td></tr></table></figure><blockquote><p>注意事件冒泡</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app-root"</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div id=<span class="string">"modal-root"</span>&gt;&lt;/div&gt;</span><br><span class="line">  &lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> appRoot = <span class="built_in">document</span>.getElementById(<span class="string">'app-root'</span>);</span><br><span class="line"><span class="keyword">const</span> modalRoot = <span class="built_in">document</span>.getElementById(<span class="string">'modal-root'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modal</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.el = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    modalRoot.appendChild(<span class="keyword">this</span>.el);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    modalRoot.removeChild(<span class="keyword">this</span>.el);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> ReactDOM.createPortal(</span><br><span class="line">      <span class="keyword">this</span>.props.children,</span><br><span class="line">      <span class="keyword">this</span>.el,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">clicks</span>: <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">this</span>.handleClick = <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function"><span class="params">prevState</span> =&gt;</span> (&#123;</span><br><span class="line">      clicks: prevState.clicks + <span class="number">1</span></span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;</span><br><span class="line">        &lt;p&gt;<span class="built_in">Number</span> <span class="keyword">of</span> clicks: &#123;<span class="keyword">this</span>.state.clicks&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;p&gt;&lt;/</span>p&gt;</span><br><span class="line">        &lt;Modal&gt;</span><br><span class="line">          &lt;Child /&gt;</span><br><span class="line">        &lt;<span class="regexp">/Modal&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"modal"</span>&gt;</span><br><span class="line">      &lt;button&gt;Click&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;Parent /&gt;, appRoot);</span><br></pre></td></tr></table></figure><blockquote><p>此时的DOM树</p></blockquote><p><img src="https://thinkerhope.github.io/2019/09/23/React%E5%AD%A6%E4%B9%A0/Portal.png" alt="react05"></p><blockquote><p>React组件树</p></blockquote><p><strong>Parent —&gt; Modal —&gt; Child</strong> </p><p>可见DOM树中Modal组件是它的Parent父组件的兄弟结点。但是由于 React 的事件处理规则，让 portal 的 React 父组件有能力捕获 portal 的冒泡事件。</p><h4 id="题外"><a href="#题外" class="headerlink" title="题外"></a>题外</h4><blockquote><p><strong>JS escaped &amp; unescaped output</strong></p></blockquote><p>对<code>XSS attack</code>很有用。</p><blockquote><p>一个栗子</p></blockquote><p>有一个页面允许用户输入地址，并且在另外一夜确定，如果用户输入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    alert(<span class="string">"Welcome"</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>下个页面将会简单地运行这个脚本，特别是当攻击者把脚本放在一个无限循环里，程序就崩了。</p><p>因此，用户输入的文本将会被解码(escaped)，对应的就是编码(uneasped)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;lt;script&amp;gt;&lt;br/&gt;        alert(&amp;quot;Welcome&amp;quot;);&lt;br/&gt;&amp;lt;<span class="regexp">/script&amp;gt;</span></span><br></pre></td></tr></table></figure><p>这样，浏览器就会把他当做一个HTML元素而不是script元素了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;记录几个有用的特性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;Forwarding-Refs&quot;&gt;&lt;a href=&quot;#Forwarding-Refs&quot; class=&quot;headerlink&quot; title=&quot;Forwarding Refs&quot;&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>网易云开发日志 day06</title>
    <link href="http://yoursite.com/2019/09/22/%E7%BD%91%E6%98%93%E4%BA%91%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97-day06/"/>
    <id>http://yoursite.com/2019/09/22/网易云开发日志-day06/</id>
    <published>2019-09-22T03:24:39.000Z</published>
    <updated>2019-09-24T16:23:16.461Z</updated>
    
    <content type="html"><![CDATA[<p>(1)</p><p><code>dva</code>中<code>use &lt;Route&gt; or withRouter outside &lt;Router&gt;</code>报错</p><p>把<code>import {NavLink} from &quot;dva/router&quot;;</code>改成<code>import {NavLink} from &quot;react-router-dom&quot;;</code>就不会报错了。</p><p>所以以后统一用<code>react-router-dom</code>。</p><p>(2)</p><p>单页应用，就是在不刷新浏览器的情况下可以在整个网页应用实时共享数据。<br>store是内存机制，不是缓存机制，页面刷新和关闭都会导致store初始化，store里面一般保存什么数据呢？</p><blockquote><p>1、组件的初始状态；<br>2、后端数据的初始状态；</p></blockquote><p>如果你需要存储是数据是要实时存储并且读取显示出来，那么存在本地缓存或者服务端，这样每次刷新页面都需要读取本地缓存或者服务端的API，然后保存到store，再从store读到组件上。</p><p>(3)</p><p>=========================</p><p>PlayBar组件开发</p><p>{</p><p>this.setState(callback/{}, callback)</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.setState(<span class="function"><span class="keyword">function</span> (<span class="params">state, props</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//用来获取之前的state，以及props属性。</span></span><br><span class="line"> <span class="keyword">return</span> &#123;</span><br><span class="line">  score: state.score - <span class="number">1</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p>组件可能需要操作的DOM (refs)</p><p>audio(必备)  ref = {(audio) =&gt; {this.lectureAudio = audio}}</p><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p>播放： {</p><p><strong>当播放时</strong></p><p>e.currentTime –&gt; this.state.currentTime（事件ontimeupdate，e.currentTime更新时触发）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">onTimeUpdate=&#123;() =&gt; <span class="keyword">this</span>.handleTimeUpdate()&#125;</span><br><span class="line">handleTimeUpdate() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        currentTime: <span class="keyword">this</span>.lectureAuduio.currentTime,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>缓冲条</strong> </p><p>进度条 1 播放时交互 — 进度条<code>width = this.state.currentTime</code>(更新触发重新渲染) / <code>e.duration</code></p><p>进度条 2 点击<code>jump</code> — 进度条<code>width</code>  </p><blockquote><p><strong>思路</strong> </p><p>点击后，获取点击的div的width = e.target.offsetWidth</p><p>let x = e.offsetX </p><p>  currentTime = x / width * this.state.duration </p></blockquote><p>进度条 3 拖拉</p><p>onmousedown onmousemove onmouseup</p><p>maxWidth — clientWidth</p><p>理清楚<code>offsetX</code>和<code>offsetWidth</code>和<code>offsetLeft</code>的区别</p><blockquote><p>offsetX表示（鼠标位置）相对于最近父级元素的坐标（无论父级是否定位）（不管是谁触发）</p><p>offsetLeft<strong>元素</strong>相对于最近定位父级元素的坐标，若在所有的父级上都没有定位，则相对于整个文档</p><p>offsetWidth返回<strong>元素</strong>的视觉尺寸（width+padding+border）</p></blockquote><p><strong>时间</strong></p><p>渲染时间 — 根据this.state.currentTime</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">renderPlayTime(time) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> minute = time / <span class="number">60</span>;</span><br><span class="line">      <span class="keyword">var</span> minutes = <span class="built_in">parseInt</span>(minute);</span><br><span class="line">      <span class="keyword">if</span> (minutes &lt; <span class="number">10</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;minutes&#125;</span>:<span class="subst">$&#123;seconds&#125;</span>`</span></span><br><span class="line">  &#125;minutes = <span class="string">"0"</span> + minutes;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//秒</span></span><br><span class="line">      <span class="keyword">var</span> second = time % <span class="number">60</span>;</span><br><span class="line">      <span class="keyword">var</span> seconds = <span class="built_in">Math</span>.round(second);</span><br><span class="line">      <span class="keyword">if</span> (seconds &lt; <span class="number">10</span>) &#123;</span><br><span class="line">          seconds = <span class="string">"0"</span> + seconds;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;minutes&#125;</span>:<span class="subst">$&#123;seconds&#125;</span>`</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>{this.renderPlayTime(this.state.currentTime)}</p><p>{this.renderPlayTime(this.state.duration)}</p><p>}</p><p>(1)</p><p>  this.state = {</p><p>​    currentTime,</p><p>​    playState,</p><p>  }</p><p>}</p><p>==========================</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;(1)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dva&lt;/code&gt;中&lt;code&gt;use &amp;lt;Route&amp;gt; or withRouter outside &amp;lt;Router&amp;gt;&lt;/code&gt;报错&lt;/p&gt;
&lt;p&gt;把&lt;code&gt;import {NavLink} from &amp;qu
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>React学习 高阶组件和decorator</title>
    <link href="http://yoursite.com/2019/09/21/React%E5%AD%A6%E4%B9%A0-%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6%E5%92%8Cmixins/"/>
    <id>http://yoursite.com/2019/09/21/React学习-高阶组件和mixins/</id>
    <published>2019-09-21T15:51:43.000Z</published>
    <updated>2019-09-22T02:45:04.524Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="总有一些东西，是你再努力都触碰不到的。"><a href="#总有一些东西，是你再努力都触碰不到的。" class="headerlink" title="总有一些东西，是你再努力都触碰不到的。"></a>总有一些东西，是你再努力都触碰不到的。</h3></blockquote><h2 id="Decorator"><a href="#Decorator" class="headerlink" title="Decorator"></a>Decorator</h2><blockquote><p>es7语法糖，就是一个修饰类以及类的属性或者行为的函数。</p></blockquote><p><strong>配置</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install customize-cra react-app-rewired @babel/plugin-proposal-decorators --save</span><br></pre></td></tr></table></figure><p>项目根目录新建config-overrides.js文件加入以下代码:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; override, addDecoratorsLegacy &#125; = <span class="built_in">require</span>(<span class="string">'customize-cra'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = override(</span><br><span class="line"> addDecoratorsLegacy()</span><br><span class="line"> );</span><br></pre></td></tr></table></figure><p>修改package.json文件如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line"> <span class="string">"start"</span>: <span class="string">"react-app-rewired start"</span>,</span><br><span class="line"> <span class="string">"build"</span>: <span class="string">"react-app-rewired build"</span>,</span><br><span class="line"> <span class="string">"test"</span>: <span class="string">"react-app-rewired test"</span>,</span><br><span class="line"> <span class="string">"eject"</span>: <span class="string">"react-app-rewired eject"</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testAble</span>(<span class="params">target</span>)</span>&#123;</span><br><span class="line">    target.isTest = <span class="literal">true</span>;<span class="comment">//静态属性</span></span><br><span class="line">    target.prototypr.isTest = <span class="literal">true</span>;<span class="comment">//实例属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@testAble</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(A.isTest);<span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p>在一个修饰器中，参数target就是你要修饰的类，这个类也叫做Decorator的修饰目标对象。</p></blockquote><p><strong>多参数的修饰器的实现</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testAble</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target</span>)</span>&#123;</span><br><span class="line">        target.prototype.isTrue = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@testAble(<span class="literal">true</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> A().isTrue;<span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>修饰对象的属性</strong></p><blockquote><p>除了修饰class，还用来修饰对象属性。</p></blockquote><p>修饰器修饰一个属性的时候，有3个参数</p><p>第一个 <code>target</code> 修饰器对应的class</p><p>第二个 <code>name</code> 属性名</p><p>第三个 <code>descriptor</code> 描述符</p><blockquote><p>descriptor的说明</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;；</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">'name'</span>, &#123;</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    writable: <span class="literal">true</span>,</span><br><span class="line">    enumberable: <span class="literal">true</span>,</span><br><span class="line">    value: <span class="string">'...'</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>就是其中的描述符对象。</strong></p><p><strong>@log的实现</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">target, name, descriptor</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oldValue = descriptor.value;</span><br><span class="line">    descriptor.value = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`this prop <span class="subst">$&#123;name&#125;</span> 的参数为 <span class="subst">$&#123;<span class="built_in">arguments</span>&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">return</span> oldValue.appay(<span class="literal">null</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> descriptor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Math</span> </span>&#123;</span><br><span class="line">    @log</span><br><span class="line">    add(a, b)&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可见本质是对descriptor的实现。另外要注意修饰器不能用于函数。（原因：函数存在函数提升）</p></blockquote><p><strong>core-decorator第三方模块，提供常用的几个修饰器</strong></p><p>（1） @override</p><p>检查子类的方法，是否正确覆盖了父类的同名方法，如果不正确会报错。</p><p>（2）@autobind</p><p>使得方法中的this对象，绑定原始对象。</p><p>（3） @readonly</p><p>使得class中的属性或者方法不可写。</p><h2 id="高阶组件"><a href="#高阶组件" class="headerlink" title="高阶组件"></a>高阶组件</h2><p>目的是解决一些交叉问题(Cross-Cutting Concerns)。而最早时候 <code>React</code> 官方给出的解决方案是使用 <code>mixin</code> 。</p><p>高阶组件通过包裹（wrapped）被传入的React组件，经过一系列处理，最终返回一个相对增强（enhanced）的 React 组件，供其他组件调用。<strong>高阶组件是接受一个组件作为参数并返回一个新组件的函数</strong>。</p><p>先复习一下<code>class表达式</code>语法的规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MyClass = <span class="class"><span class="keyword">class</span> <span class="title">Me</span> </span>&#123;</span><br><span class="line">  getClassName() &#123;</span><br><span class="line">    <span class="keyword">return</span> Me.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> inst = <span class="keyword">new</span> MyClass();</span><br><span class="line">inst.getClassName();<span class="comment">//Me</span></span><br><span class="line">MyClass.name<span class="comment">//Me</span></span><br><span class="line">Me.className<span class="comment">//ReferenceError: Me is not defined</span></span><br></pre></td></tr></table></figure><p><code>Me</code>只能在class里面用，并且<code>MyClass</code>的引用是<code>class Me {}</code>，所以在外面<code>MyClass.name</code>是<code>Me</code>。</p><p>如果类的内部没用到的话，可以省略<code>Me</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MyClass = <span class="class"><span class="keyword">class</span> </span>&#123; <span class="comment">/* ... */</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*立即执行*/</span></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  sayName() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;(<span class="string">'张三'</span>);</span><br></pre></td></tr></table></figure><blockquote><p>一个简单的高阶组件</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">withHeader</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">HOC</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> &lt;div&gt;</span><br><span class="line">        &lt;div className="demo-header"&gt;</span><br><span class="line">          我是标题</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;WrappedComponent &#123;...this.props&#125;/&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*在其他组件里，我们引用这个高阶组件，用来强化它。*/</span><br><span class="line">@withHeader</span><br><span class="line">export default class Demo extends Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        我是一个普通组件</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@withHeader</code>是<code>decorator</code>，也可以写成</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withHeader(Demo);</span><br></pre></td></tr></table></figure><p>这样写的问题</p><blockquote><p>高阶组件调用多次，会造成组件数出现多个HOC，调试困难。</p></blockquote><p>优化</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDisplayName</span>(<span class="params">component</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> component.displayName || component.name || <span class="string">'Component'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">HOC</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> displayName = <span class="string">`HOC(<span class="subst">$&#123;getDisplayName(WrappedComponent)&#125;</span>)`</span></span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> &lt;div&gt;</span><br><span class="line">        &lt;div className="demo-header"&gt;</span><br><span class="line">          我是标题</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;WrappedComponent &#123;...this.props&#125;/&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>由此可以看出，高阶组件的主要功能是封装并抽离组件的通用逻辑，让此部分逻辑在组件间更好地被复用。</p></blockquote><p><strong>displayName   定义调试时的组件name</strong></p><p>例如</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">withHOC</span>(<span class="params">WrapComponent</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 此处未定义名称或者希望动态定义名称</span></span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义displayName</span></span><br><span class="line">    <span class="keyword">static</span> displayName = <span class="string">`withHOC(<span class="subst">$&#123;WrapComponent.displayName || WrapComponent.name&#125;</span>)`</span>;</span><br><span class="line">    render()&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"inside HOC"</span>)</span><br><span class="line">      <span class="keyword">return</span> &lt;WrapComponent &#123;...this.props &#125; /&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">App = withHOC(App);</span><br></pre></td></tr></table></figure><p>如果未定义displayName，那么进行调试的时候，就会显示如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// react自动定义名称</span></span><br><span class="line">|---_class2</span><br><span class="line">  |---App</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>定义displayName后，显示如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">|---withHOC(App)</span></span><br><span class="line"><span class="params">  |</span>---App</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p><strong>组件参数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@withHeader(<span class="string">'Demo'</span>) </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改写一下HOC</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (title) =&gt; <span class="function">(<span class="params">WrappedComponent</span>) =&gt;</span> <span class="class"><span class="keyword">class</span> <span class="title">HOC</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;div&gt;</span><br><span class="line">      &lt;div className="demo-header"&gt;</span><br><span class="line">        &#123;title</span><br><span class="line">          ? title</span><br><span class="line">          : '我是标题'&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;WrappedComponent &#123;...this.props&#125;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现方式</strong></p><p>（1）属性代理</p><blockquote><p>通过做一些操作，将被包裹组件的<code>props</code>和新生成的<code>props</code>一起传递给此组件，这称之为属性代理</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">withHeader</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">HOC</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">const</span> newProps = &#123;</span><br><span class="line">        test:<span class="string">'hoc'</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 透传props，并且传递新的newProps</span></span><br><span class="line">      <span class="keyword">return</span> &lt;div&gt;</span><br><span class="line">        &lt;WrappedComponent &#123;...this.props&#125; &#123;...newProps&#125;/&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）基于反向继承</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">Inheritance</span> <span class="keyword">extends</span> <span class="title">WrappedComponent</span> </span>&#123;</span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">      <span class="comment">// 可以方便地得到state，做一些更深入的修改。</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.state);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">super</span>.render();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>组合多个高阶组件</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@withHeader</span><br><span class="line">@withLoading</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>简化语法</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> enhance = compose(withHeader,withLoading);</span><br><span class="line">@enhance</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;总有一些东西，是你再努力都触碰不到的。&quot;&gt;&lt;a href=&quot;#总有一些东西，是你再努力都触碰不到的。&quot; class=&quot;headerlink&quot; title=&quot;总有一些东西，是你再努力都触碰不到的。&quot;&gt;&lt;/a&gt;总有一些东西，是你再努力都触碰不
      
    
    </summary>
    
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
      <category term="es7" scheme="http://yoursite.com/tags/es7/"/>
    
  </entry>
  
  <entry>
    <title>ES6学习记录</title>
    <link href="http://yoursite.com/2019/09/20/ES6%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2019/09/20/ES6学习记录/</id>
    <published>2019-09-20T01:16:27.000Z</published>
    <updated>2019-09-21T08:13:30.473Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/home/boygreen/MyBlog/source/_posts/git%E5%AD%A6%E4%B9%A0/git000.jpeg" alt></p><blockquote><h3 id="记录一下ES6对函数、对象、数组的扩展，作为开发参考。"><a href="#记录一下ES6对函数、对象、数组的扩展，作为开发参考。" class="headerlink" title="记录一下ES6对函数、对象、数组的扩展，作为开发参考。"></a>记录一下<code>ES6</code>对函数、对象、数组的扩展，作为开发参考。</h3></blockquote><h2 id="函数扩展"><a href="#函数扩展" class="headerlink" title="函数扩展"></a>函数扩展</h2><h4 id="和解构赋值默认值结合"><a href="#和解构赋值默认值结合" class="headerlink" title="和解构赋值默认值结合"></a>和解构赋值默认值结合</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">&#123;x, y = <span class="number">5</span>&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(&#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>&#125;) <span class="comment">// 1 2</span></span><br><span class="line">foo() <span class="comment">// TypeError: Cannot read property 'x' of undefined</span></span><br></pre></td></tr></table></figure><blockquote><p>只有当函数<code>foo</code>的参数是一个对象时，变量<code>x</code>和<code>y</code>才会通过解构赋值生成。</p></blockquote><p>上面<code>foo</code>函数使用的是对象解构赋值默认值，而不是函数参数，所以报错了。</p><p>提供函数参数默认值:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">&#123;x, y = <span class="number">5</span>&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo() <span class="comment">// undefined 5</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>有默认值的函数参数如果不是尾参数，则不能忽略，否则报错，除非显示传入undefined，可以触发默认值，但是null不可以。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y = <span class="number">5</span>, z</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [x, y, z];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(<span class="number">1</span>, ,<span class="number">2</span>) <span class="comment">// 报错</span></span><br><span class="line">f(<span class="number">1</span>, <span class="literal">undefined</span>, <span class="number">2</span>) <span class="comment">// [1, 5, 2]</span></span><br></pre></td></tr></table></figure><h4 id="对函数对象的影响"><a href="#对函数对象的影响" class="headerlink" title="对函数对象的影响"></a>对函数对象的影响</h4><ol><li><p>使length属性失真</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">a, b, c = <span class="number">5</span></span>) </span>&#123;&#125;).length <span class="comment">// 2</span></span><br><span class="line"><span class="comment">/*如果设置了默认值的参数不是尾参数，那么length属性也不再计入后面的参数了。*/</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">a = <span class="number">0</span>, b, c</span>) </span>&#123;&#125;).length <span class="comment">// 0</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">a, b = <span class="number">1</span>, c</span>) </span>&#123;&#125;).length <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>作用域（重点）</p><p>一旦设置了参数的默认值，函数进行声明初始化时，参数会形成一个单独的作用域（<code>context</code>）(不设置参数默认值不会出现这个作用域)</p><p>先看个栗子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x, y = function(</span>) </span>&#123; x = <span class="number">2</span>; &#125;) &#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">3</span>;</span><br><span class="line">  y();</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo() <span class="comment">// 3</span></span><br><span class="line">x - 外部作用域x <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>解释</strong></p><blockquote><p>foo函数形成一个单独作用域，y的默认值是一个函数，里面的变量x指向同一个作用域（即函数参数形成的单独作用域）的x，而foo函数里面也声明了一个x变量，但是由于不是同一个作用域，因此属于不同的变量。默认值函数也只是改变了同一作用域的x，并没有改变外部作用域和foo函数作用域的值。</p></blockquote><p>改一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x, y = function(</span>) </span>&#123; x = <span class="number">2</span>; &#125;) &#123;</span><br><span class="line">  x = <span class="number">3</span>;</span><br><span class="line">  y();</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo() <span class="comment">// 2</span></span><br><span class="line">x <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>会发现默认函数生效了，全局变量依然不受影响。</p><p><strong>解释</strong></p><blockquote><p>foo函数内部没有重新定义变量x，因此内部的x指向了函数参数x。</p></blockquote><h4 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h4><blockquote><p>形式</p></blockquote><p><code>...变量名</code> </p><p>先上栗子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">array, ...items</span>) </span>&#123;</span><br><span class="line">  items.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    array.push(item);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line">push(a, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>可以看到rest参数搭配的后面的变量为一个数组。</p><blockquote><p>rest参数是用来代替arguments变量的。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortNumbers</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>).sort();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*arguments是类数组，要使用数组方法要先转为数组*/</span></span><br><span class="line"><span class="comment">// rest参数的写法</span></span><br><span class="line"><span class="keyword">const</span> sortNumbers = <span class="function">(<span class="params">...numbers</span>) =&gt;</span> numbers.sort();</span><br></pre></td></tr></table></figure><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><blockquote><p>使用注意</p></blockquote><p>（1）不能用<code>new</code></p><p>（2）不能作为<code>Generator</code>函数</p><p>（3）不能使用arguments，用rest参数代替(arguments指向外层函数)</p><p>（4）<strong>this</strong> 指向是固定的</p><blockquote><p>箭头函数可以让<code>setTimeout</code>里面的<code>this</code>，绑定定义时所在的作用域，而不是指向运行时所在的作用域。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.s1 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>.s2 = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 箭头函数</span></span><br><span class="line">  setInterval(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.s1++, <span class="number">1000</span>);</span><br><span class="line">  <span class="comment">// 普通函数</span></span><br><span class="line">  setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.s2++;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> timer = <span class="keyword">new</span> Timer();</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'s1: '</span>, timer.s1), <span class="number">3100</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'s2: '</span>, timer.s2), <span class="number">3100</span>);</span><br><span class="line"><span class="comment">// s1: 3</span></span><br><span class="line"><span class="comment">// s2: 0</span></span><br></pre></td></tr></table></figure><blockquote><p><code>ES6</code>转成<code>ES5</code>会发现箭头函数没有自己的<code>this</code>，只是<code>_this = this</code>引用了外层的<code>this</code>。因此bind()、apply()、call()方法会失效。</p></blockquote><h4 id="箭头函数不适用场景"><a href="#箭头函数不适用场景" class="headerlink" title="箭头函数不适用场景"></a>箭头函数不适用场景</h4><blockquote><p>定义对象方法，且内部包括this。</p></blockquote><blockquote><p>需要动态this的时候。</p></blockquote><p><strong>看一个部署管道机制的栗子（前一个函数的输出是后一个函数的输入）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pipeline = <span class="function">(<span class="params">...funcs</span>) =&gt;</span></span><br><span class="line">  val =&gt; funcs.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b(a), val);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> plus1 = <span class="function"><span class="params">a</span> =&gt;</span> a + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> mult2 = <span class="function"><span class="params">a</span> =&gt;</span> a * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> addThenMult = pipeline(plus1, mult2);</span><br><span class="line"></span><br><span class="line">addThenMult(<span class="number">5</span>)</span><br><span class="line"><span class="comment">// 12</span></span><br></pre></td></tr></table></figure><h2 id="数组扩展"><a href="#数组扩展" class="headerlink" title="数组扩展"></a>数组扩展</h2><h4 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="... 扩展运算符"></a><code>...</code> 扩展运算符</h4><blockquote><p>好比rest的逆运算，讲一个数组转为用都好分割的参数序列</p></blockquote><p><strong>强大的运算符</strong></p><blockquote><p>可放置表达式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  ...(x &gt; <span class="number">0</span> ? [<span class="string">'a'</span>] : []),</span><br><span class="line">  <span class="string">'b'</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><blockquote><p>空数组无效</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[...[], <span class="number">1</span>]</span><br><span class="line"><span class="comment">// [1]</span></span><br></pre></td></tr></table></figure><blockquote><p>一个实际应用</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5 的写法</span></span><br><span class="line"><span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, [<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 的写法</span></span><br><span class="line"><span class="built_in">Math</span>.max(...[<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">Math</span>.max(<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>);</span><br></pre></td></tr></table></figure><blockquote><p>合并/复制数组为浅拷贝</p></blockquote><blockquote><p>与解构赋值结合</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">first <span class="comment">// 1</span></span><br><span class="line">rest  <span class="comment">// [2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>像是逆运算一样</p><p><strong>注意</strong></p><p>扩展运算符用于数组赋值，只能在参数最后一位，否则报错。</p><h4 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h4><h6 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h6><blockquote><p>将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象。</p></blockquote><p>一个类似数组的对象转化为数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line">    <span class="string">'0'</span>: <span class="string">'a'</span>,</span><br><span class="line">    <span class="string">'1'</span>: <span class="string">'b'</span>,</span><br><span class="line">    <span class="string">'2'</span>: <span class="string">'c'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'myname'</span>,</span><br><span class="line">    length: <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5的写法</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [].slice.call(arrayLike); <span class="comment">// ['a', 'b', 'c']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6的写法</span></span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="built_in">Array</span>.from(arrayLike); <span class="comment">// ['a', 'b', 'c']</span></span><br></pre></td></tr></table></figure><p>和<code>...</code>扩展运算符的区别</p><p><code>...</code>只能装换Iterable对象，<code>Array.from</code>方法还支持类似数组的对象。所谓类似数组的对象，本质特征只有一点，即必须有<code>length</code>属性。数组的长度由length决定。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(&#123; <span class="attr">length</span>: <span class="number">3</span> &#125;);</span><br><span class="line"><span class="comment">// [ undefined, undefined, undefined ]</span></span><br></pre></td></tr></table></figure><p>另外，<code>Array.prototype.slice.call(obj)</code>能将具有<code>length</code>属性的对象转换成数组，也要求</p><p>有length属性。</p><p><code>[].prototype.slice.call(obj)</code>第一眼看我有点懵。看看<code>v8_array</code>源码[].slice()的解释</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i, cloned = [],</span><br><span class="line">        size, len = <span class="keyword">this</span>.length;<span class="comment">//要求对象需要length</span></span><br><span class="line">size = end - start;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        cloned = <span class="keyword">new</span> <span class="built_in">Array</span>(size);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.charAt) &#123;<span class="comment">//this是字符串对象的情况</span></span><br><span class="line">          <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            cloned[i] = <span class="keyword">this</span>.charAt(start + i);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            cloned[i] = <span class="keyword">this</span>[start + i];<span class="comment">//bind(this)让this指向了obj</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> cloned;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>奥，我好了。</p><h6 id="第二个参数"><a href="#第二个参数" class="headerlink" title="第二个参数"></a>第二个参数</h6><p><code>Array.from()</code>还可以接受第二个参数，用来处理每个元素，<code>Array.from()</code>最后返回处理后的数组。</p><blockquote><p>一个栗子</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(&#123; <span class="attr">length</span>: <span class="number">2</span> &#125;, () =&gt; <span class="string">'jack'</span>)</span><br><span class="line"><span class="comment">// ['jack', 'jack']</span></span><br></pre></td></tr></table></figure><p><strong>如果第二个参数中用到了this，这个时候就可以利用第三个参数来绑定this了。</strong></p><blockquote><p>一个栗子</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">"myname"</span>, <span class="attr">age</span>: <span class="number">19</span>, &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.from(&#123; <span class="attr">length</span>: <span class="number">3</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>.name&#125;, obj);</span><br><span class="line"><span class="comment">//注意这里的不能用箭头函数</span></span><br><span class="line"><span class="comment">// ["myname", "myname", "myname"]</span></span><br></pre></td></tr></table></figure><h4 id="arr-copyWithin-target-start-0-end-this-length"><a href="#arr-copyWithin-target-start-0-end-this-length" class="headerlink" title="arr.copyWithin(target, start = 0, end = this.length)"></a>arr.copyWithin(target, start = 0, end = this.length)</h4><p>直接看栗子理解</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// [4, 5, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>上面代码表示将从 3 号位直到数组结束的成员（4 和 5），复制到从 0 号位开始的位置，结果覆盖了原来的 1 和 2。</p><h4 id="arr-find-callback"><a href="#arr-find-callback" class="headerlink" title="arr.find(callback)"></a>arr.find(callback)</h4><blockquote><p>用于找出第一个符合条件的数组成员</p></blockquote><h4 id="arr-fill"><a href="#arr-fill" class="headerlink" title="arr.fill()"></a>arr.fill()</h4><blockquote><p>使用指定值，填充数组</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].fill(<span class="number">0</span>)</span><br><span class="line"><span class="comment">//[0, 0, 0]</span></span><br></pre></td></tr></table></figure><p>使用第二、三个参数，制定填充起始位置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].fill(<span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// ['a', 7, 'c']</span></span><br></pre></td></tr></table></figure><p>注意  起始位置参数和<code>slice</code>很像，都是<code>[start, end)</code></p><h4 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//0 //1</span></span><br></pre></td></tr></table></figure><p>ES6还提供了<code>values()</code>、<code>entries()</code>来遍历值、键值对。</p><h4 id="arr-includes"><a href="#arr-includes" class="headerlink" title="arr.includes()"></a>arr.includes()</h4><blockquote><p>返回一个布尔值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>)     <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>如果不支持，自己部署</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> contains = <span class="function">(<span class="params">(</span>) =&gt;</span></span><br><span class="line">  <span class="built_in">Array</span>.prototype.includes</span><br><span class="line">    ? <span class="function">(<span class="params">arr, value</span>) =&gt;</span> arr.includes(value)</span><br><span class="line">    : <span class="function">(<span class="params">arr, value</span>) =&gt;</span> arr.some(<span class="function"><span class="params">el</span> =&gt;</span> el === value)</span><br><span class="line">)();</span><br><span class="line">contains([<span class="string">'foo'</span>, <span class="string">'bar'</span>], <span class="string">'baz'</span>); <span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure><h4 id="arr-flat"><a href="#arr-flat" class="headerlink" title="arr.flat()"></a>arr.flat()</h4><blockquote><p>“拉平”多维数组</p></blockquote><p><strong><code>flat()</code>默认只会“拉平”一层</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]].flat()</span><br><span class="line"><span class="comment">// [1, 2, 3, [4, 5]]</span></span><br></pre></td></tr></table></figure><p><strong>传入一个整数，可以指定”拉平”的层数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]].flat(<span class="number">2</span>)</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p><strong>传入<code>Infinity</code>，不管几层都变为一维</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>]]].flat(<span class="literal">Infinity</span>)</span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>跳过空位</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, , <span class="number">4</span>, <span class="number">5</span>].flat()</span><br><span class="line"><span class="comment">// [1, 2, 4, 5]</span></span><br></pre></td></tr></table></figure><h4 id="arr-flatMap"><a href="#arr-flatMap" class="headerlink" title="arr.flatMap()"></a>arr.flatMap()</h4><blockquote><p>map() + flat()，flat()参数默认为1，因此只能展开一层</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 相当于 [[2, 4], [3, 6], [4, 8]].flat()</span></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].flatMap(<span class="function">(<span class="params">x</span>) =&gt;</span> [x, x * <span class="number">2</span>])</span><br><span class="line"><span class="comment">// [2, 4, 3, 6, 4, 8]</span></span><br></pre></td></tr></table></figure><h2 id="对象扩展"><a href="#对象扩展" class="headerlink" title="对象扩展"></a>对象扩展</h2><h4 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h4><blockquote><p>指向当前对象的原型对象</p></blockquote><p><strong>注意</strong></p><p>只能用在对象方法中，目前，只有对象方法的简写法可以让 JavaScript 引擎确认，定义的是对象的方法。JavaScript 引擎内部，<code>super.foo</code>等同于<code>Object.getPrototypeOf(this).foo</code>。</p><p>看个栗子理解一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> proto = &#123;</span><br><span class="line">  x: <span class="string">'hello'</span>,</span><br><span class="line">  foo() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  x: <span class="string">'world'</span>,</span><br><span class="line">  foo() &#123;</span><br><span class="line">    <span class="keyword">super</span>.foo();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, proto);</span><br><span class="line"></span><br><span class="line">obj.foo() <span class="comment">// "world"</span></span><br></pre></td></tr></table></figure><p>proto.foo绑定的在执行时绑定的是obj，因此返回”world”。</p><h4 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; x, y, ...z &#125; = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> &#125;;</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 2</span></span><br><span class="line">z <span class="comment">// &#123; a: 3, b: 4 &#125;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p>(1) 浅拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="number">1</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; ...x &#125; = obj;</span><br><span class="line">obj.a.b = <span class="number">2</span>;</span><br><span class="line">x.a.b <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>(2)扩展运算符的解构赋值，只能读取对象自身的属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = <span class="built_in">Object</span>.create(&#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;);</span><br><span class="line">o.z = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; x, ...newObj &#125; = o;</span><br><span class="line"><span class="keyword">let</span> &#123; y, z &#125; = newObj;</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// undefined</span></span><br><span class="line">z <span class="comment">// 3</span></span><br><span class="line">newObj <span class="comment">//&#123;3&#125;</span></span><br></pre></td></tr></table></figure><p>ES6 规定，变量声明语句之中，如果使用解构赋值，扩展运算符后面必须是一个变量名，而不能是一个解构赋值表达式，下面写法会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; x, ...&#123; y, z &#125; &#125; = o;</span><br></pre></td></tr></table></figure><p>所以上面用newObj做中间变量。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/home/boygreen/MyBlog/source/_posts/git%E5%AD%A6%E4%B9%A0/git000.jpeg&quot; alt&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&quot;记录一下ES6对函数、对象、数组的扩展，作为开发参考
      
    
    </summary>
    
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>网易云开发日志 day5</title>
    <link href="http://yoursite.com/2019/09/18/%E7%BD%91%E6%98%93%E4%BA%91%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97-day5/"/>
    <id>http://yoursite.com/2019/09/18/网易云开发日志-day5/</id>
    <published>2019-09-18T15:11:27.000Z</published>
    <updated>2019-09-25T23:07:13.480Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h2 id="见证你的成长。"><a href="#见证你的成长。" class="headerlink" title="见证你的成长。"></a>见证你的成长。</h2></blockquote><p>(1)推荐榜单列表的鼠标事件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.state = &#123;</span><br><span class="line">  zHvr: fasle,  </span><br><span class="line">&#125;;</span><br><span class="line">...</span><br><span class="line">map(item, index) =&gt; </span><br><span class="line">...</span><br><span class="line">className=&#123;classnames(&#123;<span class="attr">recTopList</span>: <span class="literal">true</span>, <span class="attr">zHvr</span>: showOper&#125;)&#125;</span><br><span class="line">onMouseOut=&#123;<span class="keyword">this</span>.handleMouseleave&#125;</span><br><span class="line">...</span><br><span class="line">&lt;NavLink</span><br><span class="line">  to=<span class="string">"/"</span></span><br><span class="line">  onMouseOver=&#123;<span class="keyword">this</span>.handleMouseover&#125;</span><br><span class="line">&gt;</span><br><span class="line">  &#123;item&#125;</span><br><span class="line">&lt;<span class="regexp">/NavLink&gt;</span></span><br></pre></td></tr></table></figure><p>显然，这样做当鼠标在NavLink上时，会使数组渲染的列表都有zHvr，所以考虑增加控制变量。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.state = &#123;</span><br><span class="line">  zHvr: <span class="literal">false</span>,</span><br><span class="line">  operIndex: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">map(item, index) =&gt;</span><br><span class="line">className=&#123;classnames(&#123;<span class="attr">recTopList</span>: <span class="literal">true</span>, <span class="attr">zHvr</span>: showOper &amp;&amp; index === operIndex &amp;&amp; top === operTopname&#125;)&#125;</span><br><span class="line">...</span><br><span class="line"><span class="comment">/*operIndex为触发鼠标事件的目标元素。行吧，这个代码废了，因为我slice了一下，就有多个列表可能有相同的index了，因此加上Topname(榜单名)控制*/</span></span><br><span class="line">&lt;NavLink</span><br><span class="line">  to=<span class="string">"/"</span></span><br><span class="line">  onMouseOver=&#123;() =&gt; &#123;<span class="keyword">this</span>.handleMouseover(index)&#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">  &#123;item&#125;</span><br><span class="line">&lt;<span class="regexp">/NavLink&gt;</span></span><br></pre></td></tr></table></figure><p>另外还有一些样式上的细节问题</p><p>(2)关于<code>onmouseover</code>和<code>onmouseout</code>事件</p><p>当子元素绝对定位，父元素相对定位。</p><p>在父元素上注册</p><p>(3)createStore的简单实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> createStore = <span class="function">(<span class="params">reducer</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> state;</span><br><span class="line">  <span class="keyword">let</span> listeners = [];</span><br><span class="line">  <span class="comment">/*listener为组件通过store.subscribe注册的监听函数*/</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> getState = <span class="function"><span class="params">()</span> =&gt;</span> state;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">    state = reducer(state, action);</span><br><span class="line">    listeners.forEach(<span class="function"><span class="params">listener</span> =&gt;</span> listener());</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> subscribe = <span class="function">(<span class="params">listener</span>) =&gt;</span> &#123;</span><br><span class="line">    listeners.push(listener);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      listeners = listeners.filter(<span class="function"><span class="params">l</span> =&gt;</span> l !== listener);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  dispatch(&#123;&#125;);</span><br><span class="line">    <span class="comment">/*初始化state*/</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; getState, dispatch, subscribe &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>reudecers类似于arr.reduce(callback, initValue)，用reduce来理解combineReducers是最合理的。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> combineReducers = <span class="function">(<span class="params">reducers</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">state = &#123;&#125;, action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(reducers).reduce(<span class="function">(<span class="params">nextState, key</span>) =&gt;</span> &#123;</span><br><span class="line">      nextState[key] = reducers[key](state[key], action);</span><br><span class="line">      <span class="keyword">return</span> nextState;</span><br><span class="line">    &#125;, &#123;&#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">reducer = &#123;</span><br><span class="line">  oneReducer,</span><br><span class="line">  secondReducer,</span><br><span class="line">  thirdReducer,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>(4) <code>redux-thunk</code>的实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(5) 封装一个用来提取对象的工具类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">sliceObj</span>(<span class="params">obj, keys</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> keys.reduce(<span class="function">(<span class="params">result, key</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">result[key] = obj[key];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;, &#123;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h2 id=&quot;见证你的成长。&quot;&gt;&lt;a href=&quot;#见证你的成长。&quot; class=&quot;headerlink&quot; title=&quot;见证你的成长。&quot;&gt;&lt;/a&gt;见证你的成长。&lt;/h2&gt;&lt;/blockquote&gt;
&lt;p&gt;(1)推荐榜单列表的鼠标事件&lt;/p&gt;
&lt;fig
      
    
    </summary>
    
    
    
      <category term="dva" scheme="http://yoursite.com/tags/dva/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>git学习</title>
    <link href="http://yoursite.com/2019/09/18/git%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2019/09/18/git学习/</id>
    <published>2019-09-18T01:10:12.000Z</published>
    <updated>2019-09-21T08:12:06.058Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="keep-try"><a href="#keep-try" class="headerlink" title="keep try"></a>keep try</h3></blockquote><p><strong>学习廖雪峰老师的git教程总结</strong></p><h6 id="https-www-liaoxuefeng-com-wiki-896043488029600-897013573512192"><a href="#https-www-liaoxuefeng-com-wiki-896043488029600-897013573512192" class="headerlink" title="https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192"></a><a href="https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192</a></h6><p><img src="https://thinkerhope.github.io/2019/09/18/git%E5%AD%A6%E4%B9%A0/git.jpeg" alt></p><h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库　"></a>创建版本库　</h3><p>首先，选择一个合适的地方，创建一个空目录</p><p>其次，<code>git init</code>把这个目录变成Git可以管理的仓库</p><blockquote><p>init命令会在工作区创建一个名为.git的隐藏文件，并只在其中创建一个版本库（实质是存放散列值对象引用的存储结构）　ls -a可以查看隐藏的.git</p></blockquote><blockquote><p>一个带版本库的项目目录，我们称之为工作区</p></blockquote><h3 id="把修改的文件放到git版本库-Local-Repo-（两步）"><a href="#把修改的文件放到git版本库-Local-Repo-（两步）" class="headerlink" title="把修改的文件放到git版本库(Local Repo)（两步）"></a>把修改的文件放到git版本库(Local Repo)（两步）</h3><p><code>git add file1.txt file2.txt</code></p><p>同时commit可以一次提交多个文件</p><p><code>git commit -m &quot;提交信息&quot;</code></p><blockquote><p>注意</p></blockquote><p>提交新文件和提交修改都是<code>add</code>和<code>commit</code></p><h3 id="工作区"><a href="#工作区" class="headerlink" title="工作区"></a>工作区</h3><p>要随时掌握工作区的状态，使用<code>git status</code>命令。</p><p>如果<code>git status</code>告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容。</p><h3 id="版本-一次commit就是一次版本，就是一个快照-回退"><a href="#版本-一次commit就是一次版本，就是一个快照-回退" class="headerlink" title="版本(一次commit就是一次版本，就是一个快照)回退"></a>版本(一次commit就是一次版本，就是一个快照)回退</h3><p>版本回退前 <code>git log --pretty=oneline</code>查看一下当前的版本库</p><p><img src="https://thinkerhope.github.io/2019/09/18/git%E5%AD%A6%E4%B9%A0/git03.png" alt></p><blockquote><p>注意  那一串字符就是该版本号(commit id)</p></blockquote><p>使用<code>git reset --hard HEAD^</code>回退到上一个版本</p><blockquote><p>这里的HEAD有必要解释一下   在Git中，用<code>HEAD</code>表示当前版本，上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个<code>^</code>比较容易数不过来，所以写成<code>HEAD~100</code>。</p></blockquote><p>除了使用HEAD来回退，还可以用commit id来回退</p><p>可以通过<code>git reset --hard commit_id</code>实现回退到具体的版本</p><p><code>git reflog</code>可以用来查看命令历史，可以取到你需要的<code>commit_id</code></p><p><img src="https://thinkerhope.github.io/2019/09/18/git%E5%AD%A6%E4%B9%A0/git04.png" alt></p><p>Git的版本回退速度非常快，因为Git在内部有个指向当前版本的<code>HEAD</code>指针，当你回退版本的时候，Git仅仅是把HEAD重新指向<code>append GPL</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">┌────┐</span><br><span class="line">│HEAD│</span><br><span class="line">└────┘</span><br><span class="line">   │</span><br><span class="line">   └──&gt; ○ append GPL</span><br><span class="line">        │</span><br><span class="line">        ○ add distributed</span><br><span class="line">        │</span><br><span class="line">        ○ wrote a readme file</span><br></pre></td></tr></table></figure><p>改为指向<code>add distributed</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">┌────┐</span><br><span class="line">│HEAD│</span><br><span class="line">└────┘</span><br><span class="line">   │</span><br><span class="line">   │    ○ append GPL</span><br><span class="line">   │    │</span><br><span class="line">   └──&gt; ○ add distributed</span><br><span class="line">        │</span><br><span class="line">        ○ wrote a readme file</span><br></pre></td></tr></table></figure><p><strong>然后顺便把工作区的文件更新了</strong>。所以你让<code>HEAD</code>指向哪个版本号，你就把当前版本定位在哪。</p><h3 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h3><p>工作区：就是你电脑里能看到的目录，就是你在哪个目录里init，哪个目录就是你的工作区</p><p>版本库：就是.git 隐藏目录</p><p><img src="https://thinkerhope.github.io/2019/09/18/git%E5%AD%A6%E4%B9%A0/0.jpeg" alt></p><p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个<code>master</code>分支，所以，现在，<code>git commit</code>就是往<code>master</code>分支上提交更改。</p><p>在工作区创建新文件状态是<code>Untracked</code></p><p><img src="https://thinkerhope.github.io/2019/09/18/git%E5%AD%A6%E4%B9%A0/git05.png" alt></p><p>一旦提交后，如果你又没有对工作区做任何修改，那么工作区就是“干净”的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure><h3 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h3><p>首先要理解<code>Git</code>中的修改</p><blockquote><p>比如你新增了一行，删除了一行，更改了某些字符，删了一些又加了一些，甚至创建一个新文件，删除一个文件，也算一个修改。</p></blockquote><blockquote><p>要理解Git管理的是修改，而不是文件。</p></blockquote><p>如下操作</p><blockquote><p>第一次修改readme.txt -&gt; <code>git add</code> -&gt; 第二次修改readme.txt -&gt; <code>git commit</code></p></blockquote><p>当你<code>git status</code>查看会发现<code>readme.txt</code>依然是<code>modified</code>状态。</p><p>通过<code>git diff HEAD -- readme.txt</code> (该命令可以查看工作区和版本库里面最新版本的区别)</p><p>可以看到第二次修改并没有被提交，需要你　<code>git add</code> + <code>git commit</code> 一波。</p><h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><blockquote><p>丢弃工作区的修改</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- readme.txt</span><br></pre></td></tr></table></figure><p><code>git checkout -- readme.txt</code>意思就是，把<code>readme.txt</code>文件在工作区的修改全部撤销，这里有两种情况：</p><ul><li><p>一种是<code>readme.txt</code>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p></li><li><p>一种是<code>readme.txt</code>已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p><p>总之，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p></li></ul><blockquote><p>注意</p></blockquote><p>命令中的<code>--</code>很重要，没有<code>--</code>，就变成了“切换到另一个分支”的命令。</p><p>看看第二种add之后的情况</p><p><code>git add readme.txt</code>命令之后git会提示你使用<code>git reset HEAD &lt;file&gt;</code>撤销(<code>unstage</code>)，重新放回工作区。</p><p><img src="https://thinkerhope.github.io/2019/09/18/git%E5%AD%A6%E4%B9%A0/git07.png" alt></p><blockquote><p><code>git reset</code>命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用<code>HEAD</code>时，表示最新的版本。</p></blockquote><p>会发现使用git reset HEAD readme.txt只是把暂存区的修改回退到了工作区，此时工作区的readme.txt依然是修改过的。</p><p>通过<code>git checkout</code>可以把回退到工作区的修改丢弃啦，哈哈哈。</p><p>如果已经<code>commit</code>了，那就只能用<code>git reset</code>版本回退了 。</p><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add test.txt</span><br><span class="line"></span><br><span class="line">$ git commit -m <span class="string">"add test.txt"</span></span><br></pre></td></tr></table></figure><p><code>rm test.txt</code></p><p>当你删除工作区的某个文件（已提交），再用<code>git status</code></p><p>Git会提示你<code>test.txt</code>是<code>deleted</code>状态</p><h5 id="第一种情况是你确实要删除版本库中的test-txt"><a href="#第一种情况是你确实要删除版本库中的test-txt" class="headerlink" title="第一种情况是你确实要删除版本库中的test.txt"></a>第一种情况是你确实要删除版本库中的test.txt</h5><p><code>git rm test.txt</code></p><p><code>git commit -m &quot;remove test.txt&quot;</code></p><p>文件就从版本库中被删除了</p><h5 id="另一种情况是删错了"><a href="#另一种情况是删错了" class="headerlink" title="另一种情况是删错了"></a>另一种情况是删错了</h5><p>此时版本库还有该文件</p><p><code>git checkout -- test.txt</code></p><p>实质是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p><blockquote><p>注意　从来没有被添加到版本库就被删除的文件，是无法恢复的！</p></blockquote><h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><blockquote><p>一个疑问 – 为什么GitHub需要SSH Key</p></blockquote><p>因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。</p><p>当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。</p><p>最后友情提示，在GitHub上免费托管的Git仓3库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。</p><p>如果你不想让别人看到Git库，有两个办法，一个是交点保护费，让GitHub把公开的仓库变成私有的，这样别人就看不见了（不可读更不可写）。另一个办法是自己动手，搭一个Git服务器，因为是你自己的Git服务器，所以别人也是看不见的。这个方法我们后面会讲到的，相当简单，公司内部开发必备。</p><blockquote><p>工作情景</p></blockquote><h5 id="情景一"><a href="#情景一" class="headerlink" title="情景一"></a>情景一</h5><p>已经在本地创建了一个Git仓库(仓库名为learnGit)后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作。</p><blockquote><p>github —— create a new repo ——　Repository name填入learnGit，其他保持默认设置</p></blockquote><p>现在，我们根据GitHub的提示，在本地的<code>learnGit</code>仓库下运行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@github.com:thinkerHope/learngit.git</span><br></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><p><code>thinkerHope</code>是你自己的<code>github</code>账户名，否则，你虽然可以关联我的<code>github</code>仓库，但是不可以推送内容。因为你的SSH Key公钥不在我的账户列表中。</p><p>添加后，远程库的名字就是<code>origin</code>，这是Git默认的叫法，也可以改成别的，但是<code>origin</code>这个名字一看就知道是远程库。</p><p>下一步，就可以把本地库的所有内容推送到远程库上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure><blockquote><p>-u参数解释</p></blockquote><p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><p>从现在起，只要本地作了提交，就可以通过命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure><p>把本地<code>master</code>分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！</p><h5 id="前景二"><a href="#前景二" class="headerlink" title="前景二"></a>前景二</h5><p>先创建远程库，然后，从远程库克隆。（从零开发项目的最佳选择）</p><p>create a new repo （名字为<code>gitskills</code>） －&gt; 勾选<code>Initialize this repository with a README</code> —&gt; <code>git clone</code> —&gt;  <code>git clone git@github.com:thinkerHope/gitskills.git</code> －&gt;<code>cd gitskills</code> + <code>ls</code>就可以看到<code>README.md</code></p><h3 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h3><blockquote><p>每次提交(commit)，Git都把它们串成一条时间线，这条时间线就是一个分支。之前的HEAD严格来说不是指向提交，而是指向<code>master</code>，<code>master</code>才是指向提交的，所以，<code>HEAD</code>指向的就是当前分支。</p></blockquote><p><img src="https://thinkerhope.github.io/2019/09/18/git%E5%AD%A6%E4%B9%A0/branch01%5D.png" alt></p><p>每次提交，<code>master</code>分支都会向前移动一步，这样，随着你不断提交，<code>master</code>分支的线也越来越长。</p><p>当我们创建新的分支，例如<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上。</p><p><img src="https://thinkerhope.github.io/2019/09/18/git%E5%AD%A6%E4%B9%A0/branch02.png" alt></p><p>Git创建一个分支很快，因为除了增加一个<code>dev</code>指针，改改<code>HEAD</code>的指向，工作区的文件都没有任何变化。</p><p>不过，从现在开始，对工作区的修改和提交就是针对<code>dev</code>分支了，比如新提交一次后，<code>dev</code>指针往前移动一步，而<code>master</code>指针不变：</p><p><img src="https://thinkerhope.github.io/2019/09/18/git%E5%AD%A6%E4%B9%A0/branch03.png" alt></p><p>假如我们在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上。Git怎么合并呢？最简单的方法，就是直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并。</p><p><img src="https://thinkerhope.github.io/2019/09/18/git%E5%AD%A6%E4%B9%A0/branch04.png" alt></p><p>合并完分支后，甚至可以删除<code>dev</code>分支。删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后，我们就剩下了一条<code>master</code>分支</p><p><img src="https://thinkerhope.github.io/2019/09/18/git%E5%AD%A6%E4%B9%A0/branch05.png" alt></p><p><code>git checkout -b dev</code></p><p>创建<code>dev</code>分支，然后切换到<code>dev</code>分支，加上<code>-b</code>参数表示创建并切换。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch dev</span><br><span class="line">$ git checkout dev</span><br></pre></td></tr></table></figure><p><code>git branch</code></p><p>列出所有分支，当前分支前面会标一个<code>*</code>号。</p><p><img src="https://thinkerhope.github.io/2019/09/18/git%E5%AD%A6%E4%B9%A0/checkout06.png" alt></p><p>在dev分支对readme.txt做修改并提交后，再放回master分支，会发现工作区的修改没有了，因为提交在dev分支上，master分支此刻的提交点没有变。</p><p><img src="https://thinkerhope.github.io/2019/09/18/git%E5%AD%A6%E4%B9%A0/branch06.png" alt></p><blockquote><p>Q  有个问题需要思考一下　工作区的文件会随着版本库的指针改变。</p></blockquote><p><code>git merge dev</code></p><blockquote><p>回到master分支把<code>dev</code>分支的工作成果合并到<code>master</code>分支上</p></blockquote><p><img src="https://thinkerhope.github.io/2019/09/18/git%E5%AD%A6%E4%B9%A0/branch07.png" alt></p><p>然后就可以放心地删除dev分支了。</p><p>上图有个<code>Fast-forward</code>，Git告诉我们，这次合并是“快进模式”，也就是直接把<code>master</code>指向<code>dev</code>的当前提交，所以合并速度非常快。</p><p>当然，也不是每次合并都能<code>Fast-forward</code>，我们后面会讲其他方式的合并。</p><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>创建一个<code>feature</code>分支（刚创建的时候和<code>master</code>指向同一个版本库），做好修改并且提交。</p><p>又回到master分支上，也做修改并且提交。</p><p><strong>现在，<code>master</code>分支和<code>feature1</code>分支各自都分别有新的提交，变成了这样：</strong></p><p><img src="https://thinkerhope.github.io/2019/09/18/git%E5%AD%A6%E4%B9%A0/branch14.png" alt></p><p>在<code>master</code>上<code>git merge feature1</code>发现冲突不允许合并。</p><p>查看冲突文件会看到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git add readme.txt &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">Creating a new branch is quick &amp; simple.</span><br><span class="line">=======</span><br><span class="line">Creating a new branch is quick AND simple.</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1</span><br></pre></td></tr></table></figure><blockquote><p>Git用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记出不同分支的内容</p></blockquote><p>需要自己手动修改后再<code>git add</code> + <code>git commit</code>一波。</p><p><strong>现在，<code>master</code>分支和<code>feature1</code>分支变成了下图所示：</strong></p><p><img src="https://thinkerhope.github.io/2019/09/18/git%E5%AD%A6%E4%B9%A0/branch12.png" alt></p><p><code>git log --graph --pretty=oneline --abbrev-commit</code></p><p>可以看到分支的合并情况。</p><p><strong>小结：解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。</strong></p><h3 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h3><p><code>--no-ff</code>（fast forward模式在删除分支后，会丢掉分支信息）方式的<code>git merge</code>。</p><blockquote><p>普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而<code>fast forward</code>合并就看不出来曾经做过合并。</p></blockquote><p><strong>测试</strong></p><p>和最初我创建合并分支一样</p><p><code>git checkout -b dev</code>之后就是一波<code>git add</code> + <code>git commit</code></p><p><code>git checkout master</code>  最后<code>git merge --no-ff -m &quot;merge with no-ff&quot; dev</code></p><p><img src="https://thinkerhope.github.io/2019/09/18/git%E5%AD%A6%E4%B9%A0/branch20.png" alt></p><p>和ff模式做个对比</p><p><img src="https://thinkerhope.github.io/2019/09/18/git%E5%AD%A6%E4%B9%A0/branch04.png" alt></p><h4 id="分支策略"><a href="#分支策略" class="headerlink" title="分支策略"></a>分支策略</h4><p>在实际开发中，我们应该按照几个基本原则进行分支管理：</p><p>首先，<code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p><p>干活都在<code>dev</code>分支上，也就是说，<code>dev</code>分支是不稳定的，到某个时候，比如1.0版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，在<code>master</code>分支发布1.0版本；</p><p>你和你的小伙伴们每个人都在<code>dev</code>分支上干活，每个人都有自己的分支，时不时地往<code>dev</code>分支上合并就可以了。</p><p>所以，团队合作的分支看起来就像这样：</p><p><img src="https://thinkerhope.github.io/2019/09/18/git%E5%AD%A6%E4%B9%A0/branch18.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;keep-try&quot;&gt;&lt;a href=&quot;#keep-try&quot; class=&quot;headerlink&quot; title=&quot;keep try&quot;&gt;&lt;/a&gt;keep try&lt;/h3&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;学习廖雪峰老师的git
      
    
    </summary>
    
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>网易云dva开发日志 day3</title>
    <link href="http://yoursite.com/2019/09/15/%E7%BD%91%E6%98%93%E4%BA%91dva%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97-day4/"/>
    <id>http://yoursite.com/2019/09/15/网易云dva开发日志-day4/</id>
    <published>2019-09-15T00:29:55.000Z</published>
    <updated>2019-09-18T06:55:11.906Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="愿你的生活每天都开出一朵花来-NHXWYJS"><a href="#愿你的生活每天都开出一朵花来-NHXWYJS" class="headerlink" title="愿你的生活每天都开出一朵花来  NHXWYJS"></a>愿你的生活每天都开出一朵花来  NHXWYJS</h3></blockquote><p>（1)</p><p>之前写组件都是拆成<code>UI</code>和<code>容器</code>…直到被告知<code>dva</code>中是不拆的，而且也不好维护。</p><p><code>dva</code>中的<code>component</code>只放共用组件，routes放业务组件（比如展示…的页面），可以理解为一个路由组件。所以…今天把代码重构了一下。</p><p>(2)</p><p>尝试完全由一个数组加一个img标签实现轮播图。</p><p>这里主要通过数组模拟栈和队列的API实现</p><blockquote><p>队列</p><ul><li>shift:从集合中把第一个元素删除，并返回这个元素的值。</li><li>unshift: 在集合开头添加一个或更多元素，并返回新的长度</li></ul><p>栈</p><ul><li>push:在集合中添加元素，并返回新的长度</li><li>pop:从集合中把最后一个元素删除，并返回这个元素的值。</li></ul></blockquote><p>思路</p><p>(3)今天搞定了网易云的循环动画</p><p>先上代码</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.state = &#123;</span><br><span class="line">left: [<span class="string">"-643px"</span>, <span class="string">"35px"</span>, <span class="string">"713px"</span>, <span class="string">"713px"</span>],</span><br><span class="line">ani: [<span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">this</span>.prev = <span class="keyword">this</span>.prev.bind(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">this</span>.next = <span class="keyword">this</span>.next.bind(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;ul</span><br><span class="line">    className=&#123;classnames(&#123;</span><br><span class="line">    recNewList: <span class="literal">true</span>,</span><br><span class="line">    aniActive: ani[<span class="number">0</span>],</span><br><span class="line">    &#125;)&#125;</span><br><span class="line">    style=&#123;&#123;</span><br><span class="line">      left: left[<span class="number">0</span>],</span><br><span class="line">    &#125;&#125;</span><br><span class="line">  &gt;</span><br><span class="line">  ...</span><br><span class="line">  &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">  &lt;ul</span></span><br><span class="line"><span class="regexp">    className=&#123;classnames(&#123;</span></span><br><span class="line"><span class="regexp">      recNewList: true,</span></span><br><span class="line"><span class="regexp">      aniActive: ani[1],</span></span><br><span class="line"><span class="regexp">    &#125;)&#125;</span></span><br><span class="line"><span class="regexp">    style=&#123;&#123;</span></span><br><span class="line"><span class="regexp">      left: left[1],</span></span><br><span class="line"><span class="regexp">    &#125;&#125;</span></span><br><span class="line"><span class="regexp">  &gt;</span></span><br><span class="line"><span class="regexp">  &lt;/u</span>l&gt;</span><br><span class="line">  &lt;ul</span><br><span class="line">    className=&#123;classnames(&#123;</span><br><span class="line">      recNewList: <span class="literal">true</span>,</span><br><span class="line">      aniActive: ani[<span class="number">2</span>],</span><br><span class="line">    &#125;)&#125;</span><br><span class="line">    style=&#123;&#123;</span><br><span class="line">      left: left[<span class="number">2</span>],</span><br><span class="line">    &#125;&#125;</span><br><span class="line">  &gt;</span><br><span class="line">  &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">  &lt;ul</span></span><br><span class="line"><span class="regexp">    className=&#123;classnames(&#123;</span></span><br><span class="line"><span class="regexp">      recNewList: true,</span></span><br><span class="line"><span class="regexp">      aniActive: ani[3],</span></span><br><span class="line"><span class="regexp">    &#125;)&#125;</span></span><br><span class="line"><span class="regexp">    style=&#123;&#123;</span></span><br><span class="line"><span class="regexp">      left: left[3],</span></span><br><span class="line"><span class="regexp">    &#125;&#125;</span></span><br><span class="line"><span class="regexp">  &gt;</span></span><br><span class="line"><span class="regexp">  &lt;/u</span>l&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">prev() &#123;</span><br><span class="line">    <span class="keyword">const</span> ani = [...this.state.ani];</span><br><span class="line">    <span class="keyword">const</span> left = [...this.state.left];</span><br><span class="line">    <span class="comment">// console.log(left.indexOf("35px"));</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; ani.length ; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(i !== left.indexOf(<span class="string">"35px"</span>)) &#123;</span><br><span class="line">    ani[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> index = (left.indexOf(<span class="string">"35px"</span>) - <span class="number">1</span>) &lt; <span class="number">0</span> ? <span class="number">3</span> : left.indexOf(<span class="string">"35px"</span>) - <span class="number">1</span>;</span><br><span class="line">    ani[index] = <span class="literal">true</span>;</span><br><span class="line">    left.push(left.shift());</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">    left,</span><br><span class="line">    ani,</span><br><span class="line">    &#125;);</span><br><span class="line"> &#125;</span><br><span class="line"> next() &#123;</span><br><span class="line">    <span class="keyword">const</span> ani = [...this.state.ani];</span><br><span class="line">    <span class="keyword">const</span> left = [...this.state.left];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; ani.length ; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(i !== left.indexOf(<span class="string">"35px"</span>)) &#123;</span><br><span class="line">    ani[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> index = (left.indexOf(<span class="string">"35px"</span>) + <span class="number">1</span>) &gt; <span class="number">3</span> ? <span class="number">0</span> : left.indexOf(<span class="string">"35px"</span>) + <span class="number">1</span>;</span><br><span class="line">    ani[index] = <span class="literal">true</span>;</span><br><span class="line">    left.unshift(left.pop());</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">    left,</span><br><span class="line">    ani,</span><br><span class="line">    &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>(3)关于样式共用</p><p>例如ico整个网站都是共用的，每个页面都要重复写ico-position就会很low。</p><p>(4)关于react</p><blockquote><ul><li>render()里面不该有this.setState(),因为每一个纯函数都不该引起状态的变化。而是应该完全由this.state和this.props来决定渲染的内容。</li><li>componentWillMount存在的主要目的是为了和componentDidMount对称，意义不大，被废弃了。</li><li>子组件不应该修改传入的props值。试想一下当一个父组件有多个子组件，并传入一个js对象，当某个子组件改变对象时，其他子组件都会受到影响。</li><li>并不提倡在JSX中直接把匿名函数直接赋值给事件。原因：每次渲染都会创造一个新的匿名方法对象，而且有可能会引发子组件不必要的重新渲染。</li><li><code>componentWillUnmount</code>中的工作往往和componentDidMount有关，比如在componentDidMount中用非React方法创造了一些DOM元素，如果撒手不管肯内存泄漏，需要在componentWillUnmount中清理这些DOM。</li></ul></blockquote><p>(5)ｄva的model中多个异步问题</p><p>直接贴代码</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Arr = [];</span><br><span class="line">        <span class="keyword">if</span>(payload.idxArr) &#123;</span><br><span class="line">          Arr = <span class="keyword">yield</span> payload.idxArr.map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> call(toplistService.getTopList, item);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>底层是redux-saga的Promise.all()</p></blockquote><p>(6)了解一些基本的Ubuntu命令</p><blockquote><p>ll = ls -l  列出</p><p>ls -a   隐藏文件 （”.”开头的文件）</p><p>du -h –max-depth=1 查看各文件夹大小命令</p><p>cat xxx.xxx 展示该文件</p><p>pwd 执行pwd指令可立刻得知您目前所在的工作目录的绝对路径名称</p></blockquote><p>（7）git学习</p><blockquote><p>git命令的基本数据流</p></blockquote><p><img src="https://thinkerhope.github.io/2019/09/15/%E7%BD%91%E6%98%93%E4%BA%91dva%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97-day4/git.jpeg" alt></p><p>一个git仓库包含工作目录，与.git目录。其中.git目录是工作目录的下的一级子目录。</p><p><strong>文件状态</strong></p><blockquote><p>已修改（Modified） - 文件已修改，且没有存入缓存或者版本库</p><p>已缓存（Staged） - 文件最新修改已放入缓存区中，但尚未存入版本库</p><p>已提交（Committed） - 文件最新修改已存入版本库</p></blockquote><p>基本命令</p><blockquote><p>git init - 初始化工作目录，使之能够被git管理。会生成子目录“.git”.</p><p>git commit -m “des” - 总是从缓冲区发出。</p><p>git commit –amend -m “Correct message” - 把本次提交与最后一次提交合并（删除最后一次提交，加入合并后的提交</p><p>echo”temp/“ &gt;&gt; .gitignore - 忽略的文件 ignore files</p><p> git status - 显示某些文件已修改，哪些文件已准备提交等信息</p><p>git add xxx.xxx  将文件加入缓存区</p><p>git branch -a - 列出所以分支</p><p>git branch xxx - 创建</p><p>git branch -d xxx - 删除</p><p>git branch -m <oldname> <newname> - 重命名</newname></oldname></p><p>git branch xxx –edit-description - 修改分支描述</p><p>git checout　- 到缺省分支</p><p>git checkout xxx -切换至某分支</p><p>git checkout -b xxx - 创建新分支并切换至新分支</p><p>git clone URI路径</p><p>git clone –depth 1 URI路径  注意如果不设置–no–single-branch，只会克隆HEAD所在的分支。–depth表示克隆的最近版本数</p><p>git diff - 显示缓存区（Index）与当前git库版本之间的差异</p><p>git diff –cached</p><p>显示工作目录与当前git库版本之间的差异</p><p> git diff HEAD</p><p>git log - 显示所以提交 –online –merges –graph</p><p>git merge xxx - 把其他某个分支，合并入当前分支</p><p>git mv old.xxx new.xxx - 改名</p><p>git mv xx.xx ./path/to/xx - 移动</p><p> git mv -f myFile existingFile - 强制改名或者移动文件（适用于目的文件已经存在的情况）</p><p>git pull <remote> <branch> - 把远端origin的master分支拖动到本端git仓库</branch></remote></p><p>git pull origin master -  如果当前分支与某个“远端分支”绑定，则先把其远端分支拖动到本地，再合并入当前分支</p><p>git pull - 合并到本端分支的策略是采用rebase</p><p>git rebase master experimentBranch - 把特性开发分支重整到主分支上 - 一个重要准则：不要重整已经提交到公共仓库的版本</p><p>git reset - 用HEAD指向的内容更新缓存区（Index）</p><p> git reset –hard - 用HEAD指向的内容更新缓存区（Index）与工作目录</p><p>git reset 31f2bb1 - 先移动HEAD指针，再用get reset的操作</p><p>git reset –hard 31f2bb1 - 先移动HEAD指针，再用git reset –hard的操作</p><p>git reset –soft 31f2bb1 -  只移动HEAD指针</p><p> git revert <commit> - 回退特定提交</commit></p><p>git rm /pather/to/the/file/HelloWorld.c - 删除文件(删除文件的同时，也变更git工作目录与缓存区（Index）的状态)</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;愿你的生活每天都开出一朵花来-NHXWYJS&quot;&gt;&lt;a href=&quot;#愿你的生活每天都开出一朵花来-NHXWYJS&quot; class=&quot;headerlink&quot; title=&quot;愿你的生活每天都开出一朵花来  NHXWYJS&quot;&gt;&lt;/a&gt;愿你的生活每
      
    
    </summary>
    
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
      <category term="dva" scheme="http://yoursite.com/tags/dva/"/>
    
  </entry>
  
  <entry>
    <title>网易云dva开发日志 day2</title>
    <link href="http://yoursite.com/2019/09/14/%E7%BD%91%E6%98%93%E4%BA%91dva%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97-day2/"/>
    <id>http://yoursite.com/2019/09/14/网易云dva开发日志-day2/</id>
    <published>2019-09-14T00:32:52.000Z</published>
    <updated>2019-09-18T01:20:01.174Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h4 id="无论天涯海角，朋友的呼唤都是岁月幽谷中最悠长的回声。有朋友的日子，不会孤独，不会忧伤，不会颓废。"><a href="#无论天涯海角，朋友的呼唤都是岁月幽谷中最悠长的回声。有朋友的日子，不会孤独，不会忧伤，不会颓废。" class="headerlink" title="无论天涯海角，朋友的呼唤都是岁月幽谷中最悠长的回声。有朋友的日子，不会孤独，不会忧伤，不会颓废。"></a>无论天涯海角，朋友的呼唤都是岁月幽谷中最悠长的回声。有朋友的日子，不会孤独，不会忧伤，不会颓废。</h4></blockquote><h4 id="1-裁剪文字，多余的显示省略号"><a href="#1-裁剪文字，多余的显示省略号" class="headerlink" title="(1) 裁剪文字，多余的显示省略号"></a>(1) 裁剪文字，多余的显示省略号</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">搭配的css样式&#123;（一句不能少，才能显示溢出部分省略号的效果）</span><br><span class="line"><span class="selector-tag">white-space</span><span class="selector-pseudo">:nowrap</span>;</span><br><span class="line"><span class="selector-tag">overflow</span><span class="selector-pseudo">:hidden</span>;</span><br><span class="line"><span class="selector-tag">text-overflow</span><span class="selector-pseudo">:ellipsis</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（2）上标和下标"><a href="#（2）上标和下标" class="headerlink" title="（2）上标和下标"></a>（2）上标和下标</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">p</span>&gt;</span><br><span class="line">This text contains &lt;sub&gt;subscript&lt;/sub&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">p</span>&gt;</span><br><span class="line">This text contains &lt;sup&gt;superscript&lt;/sup&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">This</span> <span class="selector-tag">text</span> <span class="selector-tag">contains</span> <span class="selector-tag">subscript</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">This</span> <span class="selector-tag">text</span> <span class="selector-tag">contains</span> <span class="selector-tag">superscript</span></span><br></pre></td></tr></table></figure><h4 id="3-dva发送请求的坑"><a href="#3-dva发送请求的坑" class="headerlink" title="(3)dva发送请求的坑"></a>(3)dva发送请求的坑</h4><p>错误的写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> temp = <span class="keyword">yield</span> call(<span class="function"><span class="params">()</span> =&gt;</span> &#123;songListService.getSongList(payload.tag)&#125;, &#123;&#125;);</span><br></pre></td></tr></table></figure><p>正确的写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> temp = <span class="keyword">yield</span> call(songListService.getSongList, payload.tag);</span><br></pre></td></tr></table></figure><p>太牛逼了奥</p><h4 id="4"><a href="#4" class="headerlink" title="(4)"></a>(4)</h4><p>dva redux数据管理都在models，根据业务不同models可能会有几十甚至上百的 【模块.js】</p><p>每次在index.js使用 app.model(require(‘./models/example’).default);  引入 Model 可能要写多个，可能就不优雅了。</p><blockquote><p><code>require.context()</code>函数创建自己的上下文</p></blockquote><p>它允许您传入一个目录进行搜索，一个标志指示是否应该搜索子目录，还有一个正则表达式来匹配文件。</p><blockquote><p>语法</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>.context(directory, useSubdirectories = <span class="literal">false</span>, regExp = <span class="regexp">/^\.\//</span>);</span><br></pre></td></tr></table></figure><blockquote><p>参数</p></blockquote><ul><li>directory：说明需要检索的目录</li><li>useSubdirectories：是否检索子目录</li><li>regExp: 匹配文件的正则表达式</li></ul><blockquote><p>栗子</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> models = <span class="built_in">require</span>.context(<span class="string">"./models"</span>, <span class="literal">true</span>, /^\.\/.*\.js$/);</span><br><span class="line">models.keys().forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">app.model(models(key).default);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="5"><a href="#5" class="headerlink" title="(5)"></a>(5)</h4><p>如何实现根据分页组件的curPage发送对应的网易云api请求</p><p>请求如下</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request(<span class="string">`http://localhost:3000/top/playlist?limit=35&amp;order=new&amp;cat="<span class="subst">$&#123;tag&#125;</span> &amp;offset=<span class="subst">$&#123;curPage*<span class="number">35</span>&#125;</span>`</span>)</span><br></pre></td></tr></table></figure><p>根据offset确定请求的页面，如offset=35表示第一页，70第二页，105第三页…35表示每页要展示的列表数。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h4 id=&quot;无论天涯海角，朋友的呼唤都是岁月幽谷中最悠长的回声。有朋友的日子，不会孤独，不会忧伤，不会颓废。&quot;&gt;&lt;a href=&quot;#无论天涯海角，朋友的呼唤都是岁月幽谷中最悠长的回声。有朋友的日子，不会孤独，不会忧伤，不会颓废。&quot; class=&quot;he
      
    
    </summary>
    
    
    
      <category term="dva" scheme="http://yoursite.com/tags/dva/"/>
    
  </entry>
  
  <entry>
    <title>网易云dva开发日志  day1</title>
    <link href="http://yoursite.com/2019/09/13/%E7%BD%91%E6%98%93%E4%BA%91dva%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%9701/"/>
    <id>http://yoursite.com/2019/09/13/网易云dva开发日志01/</id>
    <published>2019-09-13T00:00:42.000Z</published>
    <updated>2019-09-13T14:32:33.797Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="请你不要突然走进我的世界，又突然对我爱理不理。"><a href="#请你不要突然走进我的世界，又突然对我爱理不理。" class="headerlink" title="请你不要突然走进我的世界，又突然对我爱理不理。"></a>请你不要突然走进我的世界，又突然对我爱理不理。</h3></blockquote><p>(1)</p><blockquote><p>报错 </p></blockquote><blockquote><p>You should not use <navlink> outside a <router></router></navlink></p></blockquote><blockquote><p>原因</p></blockquote><p>我们在dva里直接 <code>import { NavLink } from &#39;react-router-dom&#39;;</code>了。</p><p>只能通过<code>import { NavLink } from &#39;dva/router&#39;;</code>来引入。我哭了…</p><p>(2)初次使用网易云API开发</p><blockquote><p>dva的设计理念为响应式开发，即把所有的操作都丢给redux，其它组件只要dispatch()就可以了。</p></blockquote><ul><li><p><code>services</code>下新建<code>songlist.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'../utils/request'</span>;</span><br><span class="line"><span class="comment">//request为dva为你封装好的。</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getTagList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(<span class="string">'http://localhost:3000/playlist/catlist'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改<code>model</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">effects: &#123;</span><br><span class="line">   *getTags(action, &#123; call, put &#125;) &#123;</span><br><span class="line">     <span class="keyword">const</span> temp = <span class="keyword">yield</span> call(songListService.getTagList, &#123;&#125;);</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'temp.data'</span>, temp.data);</span><br><span class="line">     <span class="keyword">if</span>(temp.data.code === <span class="number">200</span>) &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(temp.data.categories)</span><br><span class="line">  </span><br><span class="line">       <span class="keyword">yield</span> put(&#123;</span><br><span class="line">         type: <span class="string">'add-tags-list'</span>,</span><br><span class="line">         payload: &#123;</span><br><span class="line">           categories: temp.data.categories,</span><br><span class="line">           sub: temp.data.sub,</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure></li><li><p><code>reducers</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'add-tags-list'</span>(state, &#123; payload &#125;) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> categories = [];</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> cat <span class="keyword">in</span> payload.categories) &#123;</span><br><span class="line">        categories.push(payload.categories[cat]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> sub = [];</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; categories.length ; i++) &#123;</span><br><span class="line">        sub.push([]);</span><br><span class="line">      &#125;</span><br><span class="line">      payload.sub.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        sub[item.category].push(&#123;</span><br><span class="line">          name: item.name,</span><br><span class="line">          hot: item.hot,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure></li><li><p>在组件中发dispatch</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123; getTagList &#125; = <span class="keyword">this</span>.props;</span><br><span class="line"></span><br><span class="line">    getTagList();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapDispatch = <span class="function">(<span class="params">dispatch</span>) =&gt;</span> (&#123;</span><br><span class="line">    getTagList() &#123;</span><br><span class="line">      dispatch(&#123;</span><br><span class="line">        type: <span class="string">'SongList/getTags'</span>,<span class="comment">//注意getTags方法名要和effects中的方法名相同。</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>(3)WebStorm</p><blockquote><p>问题描述</p></blockquote><p>WebStorm将<code>index.js</code>文件默认识别为<code>txt</code></p><blockquote><p>解决</p></blockquote><p>File — settings — FileTypes找到<code>Text</code>类型，</p><p>将其中的<code>index.js</code>格式取消，apply—Ok</p><p>(4)阻止双击选中</p><p>常规项目，我们只需要给标签加一个<code>onselectstart</code>事件，<code>return false;</code>就可以。</p><p>但是在React中，是没有<code>onselectstart</code>事件的。我们只需要给标签添加个样式就可以了。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.node</span>&#123;<span class="comment">/*node为标签的class名*/</span></span><br><span class="line">  <span class="attribute">-webkit-user-select</span>: none;  </span><br><span class="line">  <span class="attribute">-moz-user-select</span>:none;  </span><br><span class="line">  <span class="attribute">-o-user-select</span>:none;  </span><br><span class="line">  <span class="attribute">-ms-user-select</span>:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(5)一个数组中包含多个对象，如何高效把所有对象中某个属性相同的对象去重</p><p>常见的一个业务请求数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">arr = [</span><br><span class="line">    &#123;</span><br><span class="line">        a: <span class="string">'1'</span>,</span><br><span class="line">        b: <span class="string">'q1'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        a: <span class="string">'2'</span>,</span><br><span class="line">        b: <span class="string">'q2'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        a: <span class="string">'1'</span>,</span><br><span class="line">        b: <span class="string">'q3'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        a: <span class="string">'1'</span>,</span><br><span class="line">        b: <span class="string">'q4'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        a: <span class="string">'2'</span>,</span><br><span class="line">        b: <span class="string">'q5'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        a: <span class="string">'3'</span>,</span><br><span class="line">        b: <span class="string">'q6'</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使特定属性相同(例如这里的属性‘a’)的对象去重</span></span><br><span class="line"><span class="keyword">let</span> O = arr.map(<span class="function"><span class="params">a</span> =&gt;</span> a[<span class="string">'a'</span>]).reduce(<span class="function">(<span class="params">o, k, i</span>) =&gt;</span> [o[k] = i, o][<span class="number">1</span>], &#123;&#125;)</span><br><span class="line"><span class="built_in">Object</span>.keys(O).map(<span class="function"><span class="params">k</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果是要覆盖多个属性，那就这里用扩展库的 clone 方法（考虑到嵌套）把原来的复制一份然后修改 a 的值</span></span><br><span class="line">    <span class="comment">// 如果不嵌套，那就</span></span><br><span class="line">    <span class="comment">// let o = &#123;a: k&#125;;</span></span><br><span class="line">    <span class="comment">// Object.keys(arr[O[k]]).forEach(key =&gt; o[key] = arr[O[k]][key]);</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">a</span>: k, <span class="attr">b</span>: arr[O[k]][<span class="string">'b'</span>]&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>(6)理解ES6稍微复杂一点的解构赋值内容</p><blockquote><p>解构赋值为浅拷贝</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="number">1</span> &#125; &#125;;</span><br><span class="line"><span class="comment">//其实就是表示对象属性a是个对象</span></span><br><span class="line"><span class="keyword">let</span> &#123; ...x &#125; = obj;</span><br><span class="line">obj.a.b = <span class="number">2</span>;</span><br><span class="line">x.a.b <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>举个栗子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">action = &#123;</span><br><span class="line">  type: <span class="string">'../..'</span>,</span><br><span class="line">  payload: &#123;</span><br><span class="line">    categories,</span><br><span class="line">    sub,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>{ payload: { categories, sub } } = action;</code></p><p>实现嵌套赋值给<code>categories</code>和<code>sub</code>，但要注意是浅拷贝。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; x, y, ...z &#125; = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> &#125;;</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 2</span></span><br><span class="line">z <span class="comment">// &#123; a: 3, b: 4 &#125;</span></span><br></pre></td></tr></table></figure><p>解构赋值必须是最后一个参数，否则会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; ...x, y, z &#125; = someObject; <span class="comment">// 句法错误</span></span><br><span class="line"><span class="keyword">let</span> &#123; x, ...y, ...z &#125; = someObject; <span class="comment">// 句法错误</span></span><br></pre></td></tr></table></figure><blockquote><p>have a nice day</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;请你不要突然走进我的世界，又突然对我爱理不理。&quot;&gt;&lt;a href=&quot;#请你不要突然走进我的世界，又突然对我爱理不理。&quot; class=&quot;headerlink&quot; title=&quot;请你不要突然走进我的世界，又突然对我爱理不理。&quot;&gt;&lt;/a&gt;请你不要
      
    
    </summary>
    
    
    
      <category term="dva" scheme="http://yoursite.com/tags/dva/"/>
    
  </entry>
  
  <entry>
    <title>dva开发-分页组件</title>
    <link href="http://yoursite.com/2019/09/12/dva%E5%BC%80%E5%8F%91-%E5%88%86%E9%A1%B5%E7%BB%84%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/09/12/dva开发-分页组件/</id>
    <published>2019-09-12T07:02:30.000Z</published>
    <updated>2019-09-12T21:09:18.104Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="船长，我们去哪里啊，希板鸭还是伊塔厘。"><a href="#船长，我们去哪里啊，希板鸭还是伊塔厘。" class="headerlink" title="船长，我们去哪里啊，希板鸭还是伊塔厘。"></a>船长，我们去哪里啊，希板鸭还是伊塔厘。</h3></blockquote><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>记录一下开发网易云写的分页组件（老板要求dva，第一次写dva，感觉和react-redux区别不大，但是目录结构清晰很多），直接贴代码了，很乱。emmm…反正只有自己看。</p></blockquote><h3 id="UI组件"><a href="#UI组件" class="headerlink" title="UI组件"></a>UI组件</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** UI params</span></span><br><span class="line"><span class="comment"> * @param curPage - current page</span></span><br><span class="line"><span class="comment"> * @param groupCount - page count between ellipsis</span></span><br><span class="line"><span class="comment"> * @param totalPage - psge count</span></span><br><span class="line"><span class="comment"> * @param startPage - page show between ellipsis</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"><span class="keyword">import</span> classnames <span class="keyword">from</span> <span class="string">'classnames'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./index.less'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PaginationUI = (&#123; curPage, groupCount, totalPage, startPage = <span class="number">6</span>,</span><br><span class="line">                      handlePageClick, prev, next,</span><br><span class="line">                    &#125;) =&gt; (</span><br><span class="line"></span><br><span class="line">                      &lt;div className=<span class="string">"pagination"</span>&gt;</span><br><span class="line">                        &lt;ul className=<span class="string">"pagi-list"</span>&gt;</span><br><span class="line">                          &lt;a</span><br><span class="line">                            className=&#123;classnames(&#123;</span><br><span class="line">                              <span class="string">"zbtn"</span>: <span class="literal">true</span>,</span><br><span class="line">                              <span class="string">"prev"</span>: <span class="literal">true</span>,</span><br><span class="line">                              <span class="string">"disable"</span>: curPage === <span class="number">1</span></span><br><span class="line">                            &#125;)&#125;</span><br><span class="line">                            onClick=&#123;prev&#125;</span><br><span class="line">                          &gt;</span><br><span class="line">                            上一页</span><br><span class="line">                          &lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">                          &lt;a</span></span><br><span class="line"><span class="regexp">                            className=&#123;classnames(&#123;</span></span><br><span class="line"><span class="regexp">                              "zpgi": true,</span></span><br><span class="line"><span class="regexp">                              "js-selected": curPage === 1</span></span><br><span class="line"><span class="regexp">                            &#125;)&#125;</span></span><br><span class="line"><span class="regexp">                            onClick=&#123;handlePageClick&#125;</span></span><br><span class="line"><span class="regexp">                          &gt;</span></span><br><span class="line"><span class="regexp">                            1</span></span><br><span class="line"><span class="regexp">                          &lt;/</span>a&gt;</span><br><span class="line">                          &lt;span</span><br><span class="line">                            className=&#123;classnames(&#123;</span><br><span class="line">                              zdot: curPage &lt; <span class="number">6</span> &amp;&amp; totalPage &gt;= <span class="number">9</span>,</span><br><span class="line">                            &#125;)&#125;</span><br><span class="line">                          &gt;</span><br><span class="line">                            ...</span><br><span class="line">                          &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">                          &#123;</span></span><br><span class="line"><span class="regexp">                            Array.from(&#123;length: groupCount&#125;).map((item, index) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">                              if(curPage &lt; 6) &#123;</span></span><br><span class="line"><span class="regexp">                                return index + 2;</span></span><br><span class="line"><span class="regexp">                              &#125;else &#123;</span></span><br><span class="line"><span class="regexp">                                return index + startPage;</span></span><br><span class="line"><span class="regexp">                              &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">                            &#125;).map(</span></span><br><span class="line"><span class="regexp">                              (item, index) =&gt;</span></span><br><span class="line"><span class="regexp">                                (item &lt; totalPage) &amp;&amp; &lt;a</span></span><br><span class="line"><span class="regexp">                                  className=&#123;classnames(&#123;</span></span><br><span class="line"><span class="regexp">                                    "zpgi": true,</span></span><br><span class="line"><span class="regexp">                                    "js-selected": item === curPage</span></span><br><span class="line"><span class="regexp">                                  &#125;)&#125;</span></span><br><span class="line"><span class="regexp">                                  onClick=&#123;handlePageClick&#125;</span></span><br><span class="line"><span class="regexp">                                &gt;</span></span><br><span class="line"><span class="regexp">                                  &#123;item&#125;</span></span><br><span class="line"><span class="regexp">                                &lt;/</span>a&gt;</span><br><span class="line">                              )</span><br><span class="line">                          &#125;</span><br><span class="line">                          &lt;span</span><br><span class="line">                            className=&#123;classnames(&#123;</span><br><span class="line">                              zdot: curPage &gt; totalPage - groupCount &amp;&amp; totalPage &gt;= <span class="number">9</span>,</span><br><span class="line">                            &#125;)&#125;</span><br><span class="line">                          &gt;</span><br><span class="line">                            ...</span><br><span class="line">                          &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">                          &lt;a</span></span><br><span class="line"><span class="regexp">                            className=&#123;classnames(&#123;</span></span><br><span class="line"><span class="regexp">                              "zpgi": true,</span></span><br><span class="line"><span class="regexp">                              "js-selected": curPage === totalPage</span></span><br><span class="line"><span class="regexp">                            &#125;)&#125;</span></span><br><span class="line"><span class="regexp">                            onClick=&#123;handlePageClick&#125;</span></span><br><span class="line"><span class="regexp">                          &gt;</span></span><br><span class="line"><span class="regexp">                            &#123;totalPage&#125;</span></span><br><span class="line"><span class="regexp">                          &lt;/</span>a&gt;</span><br><span class="line">                          &lt;a</span><br><span class="line">                            className=&#123;classnames(&#123;</span><br><span class="line">                              <span class="string">"zbtn"</span>: <span class="literal">true</span>,</span><br><span class="line">                              <span class="string">"next"</span>: <span class="literal">true</span>,</span><br><span class="line">                              <span class="string">"disable"</span>: curPage === totalPage</span><br><span class="line">                            &#125;)&#125;</span><br><span class="line">                            onClick=&#123;next&#125;</span><br><span class="line">                          &gt;</span><br><span class="line">                            下一页</span><br><span class="line">                          &lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">                        &lt;/u</span>l&gt;</span><br><span class="line">                      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">                    );</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">PaginationUI.propTypes = &#123;</span></span><br><span class="line"><span class="regexp">  prev: PropTypes.func.isRequired,</span></span><br><span class="line"><span class="regexp">  next: PropTypes.func.isRequired,</span></span><br><span class="line"><span class="regexp">  handlePageClick: PropTypes.func.isRequired,</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default PaginationUI;</span></span><br></pre></td></tr></table></figure><h3 id="UI组件样式"><a href="#UI组件样式" class="headerlink" title="UI组件样式"></a>UI组件样式</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.pagination</span> &#123;</span><br><span class="line">  <span class="selector-class">.zdot</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-id">#a</span>() &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">3px</span> <span class="number">0</span> <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-id">#node</span>()&#123;<span class="comment">/*去除双击选中文字*/</span></span><br><span class="line">    <span class="attribute">-webkit-user-select</span>: none;</span><br><span class="line">    <span class="attribute">-moz-user-select</span>:none;</span><br><span class="line">    <span class="attribute">-o-user-select</span>:none;</span><br><span class="line">    <span class="attribute">-ms-user-select</span>:none;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.js-selected</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: transparent url(<span class="string">"../../../assets/button.png"</span>) no-repeat;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#A2161B</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: default;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.zpgi</span> &#123;</span><br><span class="line">    <span class="selector-id">#a</span>();</span><br><span class="line">    <span class="selector-id">#node</span>();</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">22px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">22px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">7px</span>;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:not(.js-selected)</span> &#123;</span><br><span class="line">      <span class="attribute">border-color</span>: <span class="number">#666</span>;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.zbtn</span> &#123;</span><br><span class="line">    <span class="selector-id">#a</span>();</span><br><span class="line">    <span class="selector-id">#node</span>();</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">69px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">background</span>: transparent url(<span class="string">"../../../assets/button.png"</span>) no-repeat;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">@padding-btn:</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="selector-class">.next</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: -<span class="number">75px</span> -<span class="number">561px</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="variable">@padding-btn</span>;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-class">.disable</span> &#123;</span><br><span class="line">      <span class="attribute">background-position</span>: -<span class="number">75px</span> -<span class="number">621px</span> ;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#CACACA</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.prev</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: -<span class="number">2px</span> -<span class="number">561px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="variable">@padding-btn</span>;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-class">.disable</span> &#123;</span><br><span class="line">      <span class="attribute">background-position</span>: -<span class="number">1px</span> -<span class="number">621px</span> ;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#CACACA</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="下面是容器组件"><a href="#下面是容器组件" class="headerlink" title="下面是容器组件"></a>下面是容器组件</h3><blockquote><p>这样开发真的舒服</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'dva'</span>;</span><br><span class="line"><span class="keyword">import</span> PaginationUI <span class="keyword">from</span> <span class="string">'../paginationUI'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//es7修饰器@connect() - connect的语法糖，可以不用在connect里写dispatch。eject配置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Pagination = <span class="function">(<span class="params">&#123; dispatch, SongList &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; totalPage,</span><br><span class="line">          groupCount,</span><br><span class="line">          curPage,</span><br><span class="line">          startPage, &#125; = SongList;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"songlist-wrap"</span>&gt;</span><br><span class="line">      &lt;PaginationUI</span><br><span class="line">        totalPage=&#123;totalPage&#125;</span><br><span class="line">        groupCount=&#123;groupCount&#125;</span><br><span class="line">        curPage=&#123;curPage&#125;</span><br><span class="line">        startPage=&#123;startPage&#125;</span><br><span class="line">        handlePageClick=&#123;handlePageClick&#125;</span><br><span class="line">        prev=&#123;handlePrevClick&#125;</span><br><span class="line">        next=&#123;handleNextClick&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  function handlePageClick(e) &#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    dispatch(&#123;</span></span><br><span class="line"><span class="regexp">      type: 'SongList/</span>orientate-cur-page<span class="string">',</span></span><br><span class="line"><span class="string">      curPage: parseInt(e.target.innerHTML),</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  function handleNextClick(e) &#123;</span></span><br><span class="line"><span class="string">    if(curPage === groupCount + startPage - 1 &amp;&amp; curPage !== totalPage) &#123;</span></span><br><span class="line"><span class="string">      dispatch(&#123;</span></span><br><span class="line"><span class="string">        type: '</span>SongList/change-start-page<span class="string">',</span></span><br><span class="line"><span class="string">        startPage: startPage + groupCount,</span></span><br><span class="line"><span class="string">      &#125;);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    if(curPage === totalPage - groupCount + 1) &#123;</span></span><br><span class="line"><span class="string">      dispatch(&#123;</span></span><br><span class="line"><span class="string">        type: '</span>SongList/change-start-page<span class="string">',</span></span><br><span class="line"><span class="string">        startPage: curPage,</span></span><br><span class="line"><span class="string">      &#125;);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    !(curPage === totalPage) &amp;&amp; dispatch(&#123;</span></span><br><span class="line"><span class="string">      type: '</span>SongList/next-page<span class="string">',</span></span><br><span class="line"><span class="string">      curPage: curPage + 1,</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  function handlePrevClick(e) &#123;</span></span><br><span class="line"><span class="string">    if(curPage === startPage) &#123;</span></span><br><span class="line"><span class="string">      dispatch(&#123;</span></span><br><span class="line"><span class="string">        type: '</span>SongList/change-start-page<span class="string">',</span></span><br><span class="line"><span class="string">        startPage: startPage - groupCount ,</span></span><br><span class="line"><span class="string">      &#125;);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    !(curPage === 1) &amp;&amp; dispatch(&#123;</span></span><br><span class="line"><span class="string">      type: '</span>SongList/prev-page<span class="string">',</span></span><br><span class="line"><span class="string">      curPage: curPage - 1,</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default connect((&#123; SongList &#125;) =&gt; (&#123;</span></span><br><span class="line"><span class="string">  SongList,</span></span><br><span class="line"><span class="string">&#125;))(Pagination);</span></span><br></pre></td></tr></table></figure><h3 id="model"><a href="#model" class="headerlink" title="model"></a>model</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  namespace: <span class="string">"SongList"</span>,</span><br><span class="line">  state: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  reducers: &#123;</span><br><span class="line">    <span class="string">'orientate-cur-page'</span>(state, &#123; curPage &#125;) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        curPage,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'next-page'</span>(state, &#123; curPage &#125;) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        curPage,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'prev-page'</span>(state, &#123; curPage &#125;) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        curPage,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'change-start-page'</span>(state, &#123; startPage &#125;) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        startPage,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>就这样吧。截止今天，点击的bug并没有解决（懒）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;船长，我们去哪里啊，希板鸭还是伊塔厘。&quot;&gt;&lt;a href=&quot;#船长，我们去哪里啊，希板鸭还是伊塔厘。&quot; class=&quot;headerlink&quot; title=&quot;船长，我们去哪里啊，希板鸭还是伊塔厘。&quot;&gt;&lt;/a&gt;船长，我们去哪里啊，希板鸭还是伊
      
    
    </summary>
    
    
    
      <category term="dva" scheme="http://yoursite.com/tags/dva/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="组件开发" scheme="http://yoursite.com/tags/%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>dva-定义组件</title>
    <link href="http://yoursite.com/2019/09/11/dva-%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/09/11/dva-定义组件/</id>
    <published>2019-09-11T07:12:32.000Z</published>
    <updated>2019-09-11T07:20:37.456Z</updated>
    
    <content type="html"><![CDATA[<p>定义组件有三种方式：</p><p> dva里，UI组件一般是放在component文件中，一般在routes文件的路由组件调用这些组件，通过标签的形式，如下第二中方式里 调用这个组件需要这样传入<code>&lt;ProductList  onDelete={} products={} /&gt;</code>  </p><p>无状态组件</p><p>  它是为了创建纯展示组件，这种组件只负责根据传入的props来展示，不涉及到要state状态的操作</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'dva'</span>;</span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./IndexPage.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IndexPage</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=&#123;styles.normal&#125;&gt;</span><br><span class="line">      &lt;h1 className=&#123;styles.title&#125;&gt;Yay! Welcome to dva!&lt;/h1&gt;</span><br><span class="line">      &lt;div className=&#123;styles.welcome&#125; /&gt;</span><br><span class="line">      &lt;ul className=&#123;styles.list&#125;&gt;</span><br><span class="line">        &lt;li&gt;To <span class="keyword">get</span> started, edit &lt;code&gt;src/index.js&lt;/code&gt; and save to reload.&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href="https://github.com/dvajs/dva-docs/blob/master/v1/en-us/getting-started.md"&gt;Getting Started&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">IndexPage.propTypes = &#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect()(IndexPage);</span><br></pre></td></tr></table></figure><ul><li>组件不会被实例化，整体渲染性能得到提升</li><li>不能访问this对象</li><li>组件不能访问生命周期</li><li>组件只能访问输入的props，同样的props会得到同样的渲染结果</li></ul><p>2.使用常量的方式，也推荐这种</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Table, Popconfirm, Button &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> ProductList = <span class="function">(<span class="params">&#123; onDelete, products &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> columns = [&#123;</span><br><span class="line">    title: <span class="string">'Name'</span>,</span><br><span class="line">    dataIndex: <span class="string">'name'</span>,</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    title: <span class="string">'Actions'</span>,</span><br><span class="line">    render: <span class="function">(<span class="params">text, record</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;Popconfirm title=<span class="string">"Delete?"</span> onConfirm=&#123;() =&gt; onDelete(record.id)&#125;&gt;</span><br><span class="line">          &lt;Button&gt;Delete&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Popconfirm&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;];</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Table</span><br><span class="line">      dataSource=&#123;products&#125;</span><br><span class="line">      columns=&#123;columns&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">ProductList.propTypes = &#123;</span><br><span class="line">  onDelete: PropTypes.func.isRequired,</span><br><span class="line">  products: PropTypes.array.isRequired,</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ProductList;</span><br></pre></td></tr></table></figure><p>原文链接：<a href="https://blog.csdn.net/weixin_40792878/article/details/81606624" target="_blank" rel="noopener">https://blog.csdn.net/weixin_40792878/article/details/81606624</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;定义组件有三种方式：&lt;/p&gt;
&lt;p&gt; dva里，UI组件一般是放在component文件中，一般在routes文件的路由组件调用这些组件，通过标签的形式，如下第二中方式里 调用这个组件需要这样传入&lt;code&gt;&amp;lt;ProductList  onDelete={} prod
      
    
    </summary>
    
    
    
      <category term="dva" scheme="http://yoursite.com/tags/dva/"/>
    
      <category term="react组件" scheme="http://yoursite.com/tags/react%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>webStorm使用git(github)多人协作开发网易云</title>
    <link href="http://yoursite.com/2019/09/11/webStorm%E4%BD%BF%E7%94%A8git-github-%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C%E5%BC%80%E5%8F%91%E7%BD%91%E6%98%93%E4%BA%91/"/>
    <id>http://yoursite.com/2019/09/11/webStorm使用git-github-多人协作开发网易云/</id>
    <published>2019-09-11T05:17:29.000Z</published>
    <updated>2019-09-14T04:20:13.756Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>WebStorm配置</p></blockquote><p>file –&gt; Settings –&gt; Version Control –&gt;Git</p><p> 一般在本地安装好了以后，webStorm会检测到git的安装地址。然后点击test测试一下，看git是否配置成功。</p><blockquote><p>把github上的项目clone到本地</p></blockquote><p>VCS –&gt; Checkout from Version –&gt; Git</p><blockquote><p>先输入git仓库的地址、父级目录的路径、当前目录名</p></blockquote><p><img src="https://thinkerhope.github.io/2019/09/11/webStorm%E4%BD%BF%E7%94%A8git-github-%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C%E5%BC%80%E5%8F%91%E7%BD%91%E6%98%93%E4%BA%91/git.jpg" alt>)</p><p>注意  这里的仓库是你需要拷贝的github仓库，可以通过<code>git remote show origin</code>查看当前仓库地址。</p><p><img src="https://thinkerhope.github.io/2019/09/11/webStorm%E4%BD%BF%E7%94%A8git-github-%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C%E5%BC%80%E5%8F%91%E7%BD%91%E6%98%93%E4%BA%91/git02.png" alt></p><blockquote><p>提交你的修改并上传到github仓库</p></blockquote><p><code>commit and push</code></p><blockquote><p>别人做出修改，自己更新</p></blockquote><p><code>git pull</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;WebStorm配置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;file –&amp;gt; Settings –&amp;gt; Version Control –&amp;gt;Git&lt;/p&gt;
&lt;p&gt; 一般在本地安装好了以后，webStorm会检测到git的安装地址。
      
    
    </summary>
    
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>dva开发手册</title>
    <link href="http://yoursite.com/2019/09/11/dva%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/"/>
    <id>http://yoursite.com/2019/09/11/dva开发手册/</id>
    <published>2019-09-11T03:57:18.000Z</published>
    <updated>2019-09-12T20:52:33.486Z</updated>
    
    <content type="html"><![CDATA[<h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><blockquote><p>Model 的状态数据，通常表现为一个 javascript 对象(immutable)</p><p>保证每次都是全新对象，没有引用关系</p></blockquote><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><blockquote><p>一个普通 javascript 对象</p><p>改变 State 的唯一途径</p><p>需要注意的是 <code>dispatch</code> 是在组件 connect Models以后，通过 props 传入的。</p></blockquote><h3 id="dispatch"><a href="#dispatch" class="headerlink" title="dispatch"></a>dispatch</h3><blockquote><p>connect Model 的组件通过 props 可以访问到 dispatch，可以调用 Model 中的 Reducer 或者 Effects</p></blockquote><p>常见的形式如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dispatch(&#123;</span><br><span class="line">  type: <span class="string">'user/add'</span>, <span class="comment">// 如果在 model 外调用，需要添加 namespace</span></span><br><span class="line">  payload: &#123;&#125;, <span class="comment">// 需要传递的信息</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a>Reducer</h3><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; type Reducer&lt;S, A&gt; = (state: S, action: A) =&gt; S</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>注意  Reducer是纯函数</p></blockquote><h3 id="Effect"><a href="#Effect" class="headerlink" title="Effect"></a>Effect</h3><h3 id="Subscription"><a href="#Subscription" class="headerlink" title="Subscription"></a>Subscription</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> key <span class="keyword">from</span> <span class="string">'keymaster'</span>;</span><br><span class="line">...</span><br><span class="line">app.model(&#123;</span><br><span class="line">  namespace: <span class="string">'count'</span>,</span><br><span class="line">  subscriptions: &#123;</span><br><span class="line">    keyEvent(&#123;dispatch&#125;) &#123;</span><br><span class="line">      key(<span class="string">'⌘+up, ctrl+up'</span>, () =&gt; &#123; dispatch(&#123;<span class="attr">type</span>:<span class="string">'add'</span>&#125;) &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h3><blockquote><p>通常指的是前端路由</p><p>由于我们的应用现在通常是单页应用，所以需要前端代码来控制路由逻辑</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//router.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; Router, Route &#125; <span class="keyword">from</span> <span class="string">'dva/router'</span>;</span><br><span class="line">app.router(<span class="function">(<span class="params">&#123;history&#125;</span>) =&gt;</span></span><br><span class="line">  &lt;Router history=&#123;history&#125;&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"/"</span> component=&#123;HomePage&#125; /&gt;</span><br><span class="line">  &lt;<span class="regexp">/Router&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><h3 id="Route-Components"><a href="#Route-Components" class="headerlink" title="Route Components"></a>Route Components</h3><blockquote><p> Container Components（容器组件，包裹UI组件，用来处理数据的，而UI组件根据props渲染展示，是个纯组件），在 dva 中我们通常将其约束为 Route Components</p><p>在 dva 中，通常需要 connect Model的组件都是 Route Components，组织在<code>/routes/</code>目录下，而<code>/components/</code>目录下则是纯组件</p></blockquote><h3 id="题外"><a href="#题外" class="headerlink" title="题外"></a>题外</h3><blockquote><p>从一个入门例子理解UI组件和容器组件</p></blockquote><p>一个普通组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React ,&#123;Component&#125;<span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'antd/dist/antd.css'</span></span><br><span class="line"><span class="keyword">import</span> &#123;Input,Button,List&#125; <span class="keyword">from</span> <span class="string">'antd'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store/index'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;getInputChangeAction,getAddItemActiom,getDeleteItemAction&#125;<span class="keyword">from</span> <span class="string">'./store/actionCreator'</span>; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoList</span> <span class="keyword">extends</span>  <span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state=store.getState();</span><br><span class="line">        store.subscribe(<span class="keyword">this</span>.handleStoreChange)</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;div style=&#123;&#123;<span class="attr">margin</span>:<span class="string">'10px'</span>,<span class="attr">marginLeft</span>:<span class="string">'10px'</span>&#125;&#125;&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;Input</span><br><span class="line">                        value=&#123;<span class="keyword">this</span>.state.inputValue&#125;</span><br><span class="line">                        placehoder=<span class="string">"todo list "</span></span><br><span class="line">                        style=&#123;&#123;<span class="attr">width</span>:<span class="string">'300px'</span>&#125;&#125;</span><br><span class="line">                        onChange=&#123;<span class="keyword">this</span>.handleInputChange&#125;</span><br><span class="line">                    /&gt;</span><br><span class="line">                    &lt;Button</span><br><span class="line">                        type= <span class="string">"primary"</span></span><br><span class="line">                        onClick=&#123;<span class="keyword">this</span>.handleBtnClick&#125;</span><br><span class="line">                    &gt;提交&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>div&gt;</span><br><span class="line">                &lt;List</span><br><span class="line">                    style=&#123;&#123;<span class="attr">marginTop</span>:<span class="string">'10px'</span>,<span class="attr">width</span>:<span class="string">'300px'</span>&#125;&#125;</span><br><span class="line">                    bordered</span><br><span class="line">                    dataSource=&#123;<span class="keyword">this</span>.state.list&#125;</span><br><span class="line">                    renderItem=&#123;(item,index) =&gt; (&lt;List.Item onClick=&#123;this.handleItemDelet&#125; &gt;&#123;item&#125;&lt;/List.Item&gt;)&#125;<span class="comment">//这个这个参考antd官网</span></span><br><span class="line">                /&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    handleInputChange=(e)=&gt;&#123;</span></span><br><span class="line"><span class="regexp">        const action=getInputChangeAction(e.target.value);</span></span><br><span class="line"><span class="regexp">        store.dispatch(action);</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    handleStoreChange=()=&gt;&#123;</span></span><br><span class="line"><span class="regexp">        this.setState(store.getState());   </span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    handleBtnClick=()=&gt;&#123;</span></span><br><span class="line"><span class="regexp">        </span></span><br><span class="line"><span class="regexp">        const action=getAddItemActiom();</span></span><br><span class="line"><span class="regexp">        store.dispatch(action);</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    </span></span><br><span class="line"><span class="regexp">    handleItemDelet=(index)=&gt;&#123;</span></span><br><span class="line"><span class="regexp">         </span></span><br><span class="line"><span class="regexp">        const action=getDeleteItemAction(index);</span></span><br><span class="line"><span class="regexp">        store.dispatch(action);</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default TodoList;</span></span><br></pre></td></tr></table></figure><p>拆分出UI组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React ,&#123;Component&#125;<span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'antd/dist/antd.css'</span></span><br><span class="line"><span class="keyword">import</span> &#123;Input,Button,List&#125; <span class="keyword">from</span> <span class="string">'antd'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoListUi</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;div style=&#123;&#123;<span class="attr">margin</span>:<span class="string">'10px'</span>,<span class="attr">marginLeft</span>:<span class="string">'10px'</span>&#125;&#125;&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;Input</span><br><span class="line">                        value=&#123;<span class="keyword">this</span>.props.inputValue&#125;</span><br><span class="line">                        placehoder=<span class="string">"todo list "</span></span><br><span class="line">                        style=&#123;&#123;<span class="attr">width</span>:<span class="string">'300px'</span>&#125;&#125;</span><br><span class="line">                        onChange=&#123;<span class="keyword">this</span>.props.handleInputChange&#125;</span><br><span class="line">                    /&gt;</span><br><span class="line">                    &lt;Button</span><br><span class="line">                        type= <span class="string">"primary"</span></span><br><span class="line">                        onClick=&#123;<span class="keyword">this</span>.props.handleBtnClick&#125;</span><br><span class="line">                    &gt;提交&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>div&gt;</span><br><span class="line">                &lt;List</span><br><span class="line">                    style=&#123;&#123;<span class="attr">marginTop</span>:<span class="string">'10px'</span>,<span class="attr">width</span>:<span class="string">'300px'</span>&#125;&#125;</span><br><span class="line">                    bordered</span><br><span class="line">                    dataSource=&#123;<span class="keyword">this</span>.props.list&#125;</span><br><span class="line">                    renderItem=&#123;(item,index) =&gt; <span class="function">(<span class="params">&lt;List.Item onClick=&#123;(index</span>)=&gt;</span>&#123;<span class="keyword">this</span>.props.handleItemDelet(index)&#125;&#125; &gt;&#123;item&#125;&lt;<span class="regexp">/List.Item&gt;)&#125;</span></span><br><span class="line"><span class="regexp">                    /</span><span class="regexp">/调用父组件带参数的函数用箭头函数</span></span><br><span class="line"><span class="regexp">                /</span>&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default TodoListUi;</span></span><br></pre></td></tr></table></figure><p>拆分出容器组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">mport React ,&#123;Component&#125;<span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store/index'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;getInputChangeAction,getAddItemActiom,getDeleteItemAction&#125;<span class="keyword">from</span> <span class="string">'./store/actionCreator'</span>;</span><br><span class="line"><span class="keyword">import</span> TodoListUi <span class="keyword">from</span> <span class="string">'./TodoListUi'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoList</span> <span class="keyword">extends</span>  <span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state=store.getState();</span><br><span class="line">        store.subscribe(<span class="keyword">this</span>.handleStoreChange)</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;TodoListUi</span><br><span class="line">                inputValue=&#123;<span class="keyword">this</span>.state.inputValue&#125;</span><br><span class="line">                list=&#123;<span class="keyword">this</span>.state.list&#125;</span><br><span class="line">                handleInputChange=&#123;<span class="keyword">this</span>.handleInputChange&#125;</span><br><span class="line">                handleBtnClick=&#123;<span class="keyword">this</span>.handleBtnClick&#125;</span><br><span class="line">                handleItemDelet=&#123;<span class="keyword">this</span>.handleItemDelet&#125;</span><br><span class="line">            /&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    handleInputChange=<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> action=getInputChangeAction(e.target.value);</span><br><span class="line">        store.dispatch(action);</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    handleStoreChange=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(store.getState())</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    handleBtnClick=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> action=getAddItemActiom();</span><br><span class="line">        store.dispatch(action);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    handleItemDelet=<span class="function">(<span class="params">index</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> action=getDeleteItemAction(index);</span><br><span class="line">        store.dispatch(action);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> TodoList;</span><br></pre></td></tr></table></figure><blockquote><p>当然，完全可以把UI组件写成无状态组件，提高内存利用率和渲染性能。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;state&quot;&gt;&lt;a href=&quot;#state&quot; class=&quot;headerlink&quot; title=&quot;state&quot;&gt;&lt;/a&gt;state&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Model 的状态数据，通常表现为一个 javascript 对象(immutable)&lt;
      
    
    </summary>
    
    
    
      <category term="dva" scheme="http://yoursite.com/tags/dva/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>webpack入坑记 02</title>
    <link href="http://yoursite.com/2019/09/11/webpack%E5%85%A5%E5%9D%91%E8%AE%B0-02/"/>
    <id>http://yoursite.com/2019/09/11/webpack入坑记-02/</id>
    <published>2019-09-10T16:31:30.000Z</published>
    <updated>2019-09-11T03:55:00.038Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h2 id="所谓成熟就是，你要习惯任何人的忽冷忽热，也要看淡任何人的渐行渐远。"><a href="#所谓成熟就是，你要习惯任何人的忽冷忽热，也要看淡任何人的渐行渐远。" class="headerlink" title="所谓成熟就是，你要习惯任何人的忽冷忽热，也要看淡任何人的渐行渐远。"></a>所谓成熟就是，你要习惯任何人的忽冷忽热，也要看淡任何人的渐行渐远。</h2></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>在react中css没有作用域 <code>scoped</code> 的概念，虽然是为每个组件创建单一的.scss文件并在入口引入，但依然是全局的。scss的嵌套理想状态和css的选择器层叠一样不错过3层，处理器也很难保证为每个组件都编译出单独的css文件。</p></blockquote><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><blockquote><p>不管是在哪种环境之下使用，CSS Modules的使用都不会有太大差异，只会稍微的细节上的差异。</p></blockquote><h3 id="样式默认局部"><a href="#样式默认局部" class="headerlink" title="样式默认局部"></a>样式默认局部</h3><p>使用了 CSS Modules 后，就相当于给每个 class 名外加加了一个 <code>:local</code>，使用:global转换。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.normal</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 以上与下面等价 */</span></span><br><span class="line"><span class="selector-pseudo">:local(.normal)</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 定义全局样式 */</span></span><br><span class="line"><span class="selector-pseudo">:global(.btn)</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 定义多个全局样式 */</span></span><br><span class="line"><span class="selector-pseudo">:global</span> &#123;</span><br><span class="line">  <span class="selector-class">.link</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: yellow;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="Composes-组合样式"><a href="#Composes-组合样式" class="headerlink" title="Composes  组合样式"></a>Composes  组合样式</h3><blockquote><p>CSS Modules 只提供了唯一的方式 <code>composes</code>来复用样式</p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* components/Button.css */</span></span><br><span class="line"><span class="selector-class">.base</span> &#123; <span class="comment">/* 所有通用的样式 */</span> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.normal</span> &#123;</span><br><span class="line">  <span class="attribute">composes</span>: base;</span><br><span class="line">  <span class="comment">/* normal 其它样式 */</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.disabled</span> &#123;</span><br><span class="line">  <span class="attribute">composes</span>: base;</span><br><span class="line">  <span class="comment">/* disabled 其它样式 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./Button.css'</span>;</span><br><span class="line"></span><br><span class="line">&lt;button <span class="class"><span class="keyword">class</span></span>=$&#123;styles.normal&#125;&gt;Submit&lt;<span class="regexp">/button&gt;</span></span><br></pre></td></tr></table></figure><p>由于在 <code>.normal</code> 中 composes 了 <code>.base</code>，编译后会 normal 会变成两个 class</p><blockquote><p>composes 还可以组合外部文件中的样式</p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* settings.css */</span></span><br><span class="line"><span class="selector-class">.primary-color</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#f40</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* components/Button.css */</span></span><br><span class="line"><span class="selector-class">.base</span> &#123; <span class="comment">/* 所有通用的样式 */</span> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.primary</span> &#123;</span><br><span class="line">  <span class="attribute">composes</span>: base;</span><br><span class="line">  composes: $primary-color from './settings.css';</span><br><span class="line">  <span class="comment">/* primary 其它样式 */</span></span><br></pre></td></tr></table></figure><p>对于大多数项目，有了 <code>composes</code> 后已经不再需要 Sass/Less/PostCSS。但如果你想用的话，由于 <code>composes</code> 不是标准的 CSS 语法，编译时会报错。就只能使用预处理器自己的语法来做样式复用了。</p><h3 id="class-命名技巧"><a href="#class-命名技巧" class="headerlink" title="class 命名技巧"></a>class 命名技巧</h3><blockquote><p>CSS Modules 命名规范   BEM 扩展</p></blockquote><ul><li>Block：对应模块名，如 Dialog</li><li>Element：对应模块中的节点名 Confirm Button</li><li>Modifier：对应节点相关的状态，如 disabled、highlight</li></ul><p>BEM 最终得到的 class 名为 <code>dialog__confirm-button--highlight</code>。使用双符号 <code>__</code> 和 <code>--</code> 是为了和区块内单词间的分隔符区分开来。</p><blockquote><p>CSS Modules 中 CSS 文件名恰好对应 Block 名，只需要再考虑 Element 和 Modifier。</p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* .dialog.css */</span></span><br><span class="line"><span class="selector-class">.ConfirmButton--disabled</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//你也可以不遵循完整的命名规范，使用 camelCase 的写法把 Block 和 Modifier 放到一起：</span></span><br><span class="line"><span class="comment">/* .dialog.css */</span></span><br><span class="line"><span class="selector-class">.disabledConfirmButton</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，<code>CSS Modules</code>采用驼峰命名只是建议，而不是强制，因为<code>{style.class-name}</code>不支持，但是你依然可以通过 <code>{style[&#39;class-name&#39;]}</code>使用。</p><h3 id="实现CSS，JS变量共享"><a href="#实现CSS，JS变量共享" class="headerlink" title="实现CSS，JS变量共享"></a>实现CSS，JS变量共享</h3><blockquote><p><code>:export</code> 关键字可以把 CSS 中的 变量输出到 JS 中。</p></blockquote><p>下面演示如何在 JS 中读取 Sass 变量：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* config.scss */</span></span><br><span class="line">$primary-color: #f40;</span><br><span class="line"> </span><br><span class="line"><span class="selector-pseudo">:export</span> &#123;</span><br><span class="line">  primaryColor: $primary-color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* app.js */</span></span><br><span class="line">import style from 'config.scss';</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 会输出 #F40</span></span><br><span class="line"><span class="selector-tag">console</span><span class="selector-class">.log</span>(style.primaryColor);</span><br></pre></td></tr></table></figure><h3 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h3><blockquote><p>使用CSS Modules 一般要遵循一些规则</p></blockquote><ul><li>不使用选择器，只使用 class 名来定义样式</li><li>不层叠多个 class，只使用一个 class 把所有样式定义好</li><li>所有样式通过 <code>composes</code> 组合来实现复用</li><li>不嵌套</li></ul><h3 id="react实践"><a href="#react实践" class="headerlink" title="react实践"></a>react实践</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* dialog.css */</span></span><br><span class="line">.root &#123;&#125;</span><br><span class="line">.confirm &#123;&#125;</span><br><span class="line">.disabledConfirm &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> classNames <span class="keyword">from</span> <span class="string">'classnames'</span>;</span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./dialog.css'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Dialog</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> cx = classNames(&#123;</span><br><span class="line">      [styles.confirm]: !<span class="keyword">this</span>.state.disabled,</span><br><span class="line">      [styles.disabledConfirm]: <span class="keyword">this</span>.state.disabled</span><br><span class="line">    &#125;);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> &lt;div className=&#123;styles.root&#125;&gt;</span><br><span class="line">      &lt;a className=&#123;cx&#125;&gt;Confirm&lt;/a&gt;</span><br><span class="line">      ...</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>注意，一般把组件最外层节点对应的 class 名称为 <code>root</code>。</p><p>另外 ，如果你不想频繁的输入 <code>styles.**</code>，可以试一下 <a href="https://github.com/gajus/react-css-modules" target="_blank" rel="noopener">react-css-modules</a>，它通过高阶函数的形式来避免重复输入 <code>styles.**</code>。</p><h3 id="CSS-Modules-结合历史遗留项目实践"><a href="#CSS-Modules-结合历史遗留项目实践" class="headerlink" title="CSS Modules 结合历史遗留项目实践"></a>CSS Modules 结合历史遗留项目实践</h3><h3 id="外部如何覆盖局部样式"><a href="#外部如何覆盖局部样式" class="headerlink" title="外部如何覆盖局部样式"></a>外部如何覆盖局部样式</h3><p>当生成混淆的 class 名后，可以解决命名冲突，但因为无法预知最终 class 名，不能通过一般选择器覆盖。我们现在项目中的实践是可以给组件关键节点加上 <code>data-role</code> 属性，然后通过属性选择器来覆盖样式。</p><p>如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// dialog.js</span><br><span class="line">  return &lt;div className=&#123;styles.root&#125; data-role=&apos;dialog-root&apos;&gt;</span><br><span class="line">      &lt;a className=&#123;styles.disabledConfirm&#125; data-role=&apos;dialog-confirm-btn&apos;&gt;Confirm&lt;/a&gt;</span><br><span class="line">      ...</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// dialog.css</span><br><span class="line">[data-role=&quot;dialog-root&quot;] &#123;</span><br><span class="line">  // override style</span><br></pre></td></tr></table></figure><p>因为 CSS Modules 只会转变类选择器，所以这里的属性选择器不需要添加 <code>:global</code>。</p><h3 id="如何与全局样式共存"><a href="#如何与全局样式共存" class="headerlink" title="如何与全局样式共存"></a>如何与全局样式共存</h3><blockquote><p>前端项目不可避免会引入 normalize.css 或其它一类全局 css 文件。使用 Webpack 可以让全局样式和 CSS Modules 的局部样式和谐共存。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack部分配置</span></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  loaders: [&#123;</span><br><span class="line">    test: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">    loader: <span class="string">'babel'</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">    exclude: path.resolve(__dirname, <span class="string">'src/styles'</span>),</span><br><span class="line">    loader: <span class="string">'style!css?modules&amp;localIdentName=[name]__[local]!sass?sourceMap=true'</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">    include: path.resolve(__dirname, <span class="string">'src/styles'</span>),</span><br><span class="line">    loader: <span class="string">'style!css!sass?sourceMap=true'</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* src/app.js */</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./styles/app.scss'</span>;</span><br><span class="line"><span class="keyword">import</span> Component <span class="keyword">from</span> <span class="string">'./view/Component'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* src/views/Component.js */</span></span><br><span class="line"><span class="comment">// 以下为组件相关样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./Component.scss'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//目录结构如下</span></span><br><span class="line"></span><br><span class="line">src</span><br><span class="line">├── app.js</span><br><span class="line">├── styles</span><br><span class="line">│   ├── app.scss</span><br><span class="line">│   └── normalize.scss</span><br><span class="line">└── views</span><br><span class="line">    ├── Component.js</span><br><span class="line">    └── Component.scss</span><br></pre></td></tr></table></figure><p>这样所有全局的样式都放到 <code>src/styles/app.scss</code> 中引入就可以了。其它所有目录包括 <code>src/views</code> 中的样式都是局部的。</p><p>原文链接：<a href="https://blog.csdn.net/xiangzhihong8/article/details/53195926" target="_blank" rel="noopener">https://blog.csdn.net/xiangzhihong8/article/details/53195926</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h2 id=&quot;所谓成熟就是，你要习惯任何人的忽冷忽热，也要看淡任何人的渐行渐远。&quot;&gt;&lt;a href=&quot;#所谓成熟就是，你要习惯任何人的忽冷忽热，也要看淡任何人的渐行渐远。&quot; class=&quot;headerlink&quot; title=&quot;所谓成熟就是，你要习惯任何
      
    
    </summary>
    
    
    
      <category term="css-modules" scheme="http://yoursite.com/tags/css-modules/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
      <category term="FE 模块化" scheme="http://yoursite.com/tags/FE-%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>less开发规范</title>
    <link href="http://yoursite.com/2019/09/11/less%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2019/09/11/less开发规范/</id>
    <published>2019-09-10T16:27:45.000Z</published>
    <updated>2019-09-11T00:11:14.749Z</updated>
    
    <content type="html"><![CDATA[<p>开发项目工作室这边一般用less，想找个机会总结一下我容易忽略的css规范</p><h2 id="统一代码风格"><a href="#统一代码风格" class="headerlink" title="统一代码风格"></a>统一代码风格</h2><blockquote><p><code>列表型属性值</code> 书写在单行时，<code>,</code> 后必须跟一个空格。</p></blockquote><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">font-family</span>: <span class="selector-tag">Arial</span>, <span class="selector-tag">sans-serif</span>;</span><br></pre></td></tr></table></figure><blockquote><p> 对于以逗号分隔的属性值，每个逗号后面都应该插入一个空格。</p></blockquote><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">box-shadow</span>: 0 1<span class="selector-tag">px</span> 2<span class="selector-tag">px</span> <span class="selector-id">#ccc</span>, <span class="selector-tag">inset</span> 0 1<span class="selector-tag">px</span> 0 <span class="selector-id">#fff</span>;</span><br></pre></td></tr></table></figure><blockquote><p> 不要在 <code>rgb()</code>、<code>rgba()</code>、<code>hsl()</code>、<code>hsla()</code> 或 <code>rect()</code> 值的内部的逗号后面插入空格。</p></blockquote><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* recommended */</span></span><br><span class="line"><span class="selector-tag">background-color</span>: <span class="selector-tag">rgb</span>(255,255,255);</span><br></pre></td></tr></table></figure><blockquote><p>对于超长的样式，在样式值的<code>空格</code>处或<code>,</code>号后换行，建议按逻辑分组</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 类似函数的属性值可以根据函数调用的缩进进行 */</span></span><br><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">-webkit-gradient</span>(</span><br><span class="line">    <span class="selector-tag">linear</span>,</span><br><span class="line">    <span class="selector-tag">left</span> <span class="selector-tag">bottom</span>,</span><br><span class="line">    <span class="selector-tag">left</span> <span class="selector-tag">top</span>,</span><br><span class="line">    <span class="selector-tag">color-stop</span>(0<span class="selector-class">.04</span>, <span class="selector-tag">rgb</span>(88,94,124)),</span><br><span class="line">    <span class="selector-tag">color-stop</span>(0<span class="selector-class">.52</span>, <span class="selector-tag">rgb</span>(115,123,162));</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>对于只包含一条声明的样式，为了易读性和便于快速编辑，建议将语句放在同一行。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.span1</span> &#123; <span class="attribute">width</span>: <span class="number">60px</span>; &#125;</span><br></pre></td></tr></table></figure><blockquote><p>对于包含多条声明的样式块与块之间须空一行，只包含一条声明的样式块之间无须空行，且声明本身只占一行</p></blockquote><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 无须空行 */</span></span><br><span class="line"><span class="selector-class">.span1</span> &#123; <span class="attribute">width</span>: <span class="number">60px</span>; &#125;</span><br><span class="line"><span class="selector-class">.span2</span> &#123; <span class="attribute">width</span>: <span class="number">140px</span>; &#125;</span><br><span class="line"><span class="selector-class">.span3</span> &#123; <span class="attribute">width</span>: <span class="number">220px</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sprite</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(../img/sprite.png);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 此处须空行 */</span></span><br><span class="line"><span class="selector-class">.bullet-btn</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">2.5px</span>;</span><br></pre></td></tr></table></figure><blockquote><p>通过配置编辑器，可以提供快捷键来输出一致认可的注释模式。</p></blockquote><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ==========================================================================</span></span><br><span class="line"><span class="comment">   comments like this</span></span><br><span class="line"><span class="comment"> ============================================================================ */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * or multiple-line comments like this</span></span><br><span class="line"><span class="comment"> * Short description describing the file.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><blockquote><p><code>&gt;</code>、<code>+</code>、<code>~</code> 选择器的两边各保留一个空格</p></blockquote><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* recommended */</span></span><br><span class="line"><span class="selector-tag">main</span> &gt; <span class="selector-tag">nav</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>属性选择器中的值必须用双引号包围。</p></blockquote><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* recommended */</span></span><br><span class="line"><span class="selector-tag">article</span><span class="selector-attr">[character="juliet"]</span> &#123;</span><br><span class="line">    <span class="attribute">voice-family</span>: <span class="string">"Vivien Leigh"</span>, victoria, female</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>class 名称中只能出现小写字符和破折号（dashe）（不是下划线，也不是驼峰命名法）。破折号应当用于相关class 的命名（类似于命名空间）（例如，.btn 和 .btn-danger）。</li><li>避免过度任意的简写。.btn 代表 button，但是 .s 不能表达任何意思。</li><li>class 名称应当尽可能短，并且意义明确。</li><li>使用有意义的名称。使用有组织的或目的明确的名称，不要使用表现形式（presentational）的名称。</li><li>基于最近的父 class 或基本（base） class 作为新 class 的前缀。</li><li>使用 .js-* class 来标识行为（与样式相对），并且不要将这些 class 包含到 CSS 文件中。</li></ul></blockquote><h2 id="属性缩写"><a href="#属性缩写" class="headerlink" title="属性缩写"></a>属性缩写</h2><blockquote><ul><li><code>margin</code></li><li><code>padding</code></li><li><code>font</code></li><li><code>background</code></li><li><code>border</code></li><li><code>border-radius</code></li></ul></blockquote><p>如上能够缩写的属性在没有指定其所有值的情况下，尽可能只写需要指定的属性的全称；需要设置所有值，才使用缩写</p><h2 id="less规范"><a href="#less规范" class="headerlink" title="less规范"></a>less规范</h2><h4 id="代码按如下形式按顺序组织："><a href="#代码按如下形式按顺序组织：" class="headerlink" title="代码按如下形式按顺序组织："></a>代码按如下形式按顺序组织：</h4><ol><li><code>@import</code></li><li>变量声明</li><li>样式声明</li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✓</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">"est/all.less"</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">@default-text-color:</span> <span class="number">#333</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.page</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">960px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>+</code> / <code>-</code> / <code>*</code> / <code>/</code> 四个运算符两侧保留一个空格。<code>+</code> / <code>-</code> 两侧的操作数有相同的单位，如果其中一个是变量，另一个数值书写单位。</p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✗</span></span><br><span class="line"><span class="variable">@a:</span> <span class="number">200px</span>;</span><br><span class="line"><span class="variable">@b:</span> (<span class="variable">@a</span>+<span class="number">100</span>)*<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✓</span></span><br><span class="line"><span class="variable">@a:</span> <span class="number">200px</span>;</span><br><span class="line"><span class="variable">@b:</span> (<span class="variable">@a</span> + <span class="number">100px</span>) * <span class="number">2</span>;</span><br></pre></td></tr></table></figure><blockquote><p>在给 mixin 传递参数时，在参数分隔符（<code>,</code> / <code>;</code>）后要保留一个空格</p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="selector-class">.size</span>(<span class="number">30px</span>, <span class="number">20px</span>);</span><br><span class="line">    <span class="selector-class">.clearfix</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果混入的是本身不输出内容的 mixin，在 mixin 后添加括号（即使不传参数），以区分这是否是一个 className</p></blockquote><h2 id="less"><a href="#less" class="headerlink" title="less"></a>less</h2><h3 id="width声明变量"><a href="#width声明变量" class="headerlink" title="@width声明变量"></a>@width声明变量</h3><h3 id="calc-特例"><a href="#calc-特例" class="headerlink" title="calc()特例"></a>calc()特例</h3><blockquote><p>为了与 CSS 保持兼容，<code>calc()</code> 并不对数学表达式进行计算，但是在嵌套函数中会计算变量和数学公式的值。</p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@var:</span> <span class="number">50vh</span>/<span class="number">2</span>;</span><br><span class="line"><span class="attribute">width</span>: calc(<span class="number">50%</span> + (<span class="variable">@var</span> - <span class="number">20px</span>));  <span class="comment">// 结果是 calc(50% + (25vh - 20px))</span></span><br></pre></td></tr></table></figure><h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><blockquote><p>允许你使用任意字符串作为属性或变量值。任何 <code>~&quot;anything&quot;</code> 或 <code>~&#39;anything&#39;</code> 形式的内容都将按原样输出</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@min768: (min-width: 768px);</span><br><span class="line">.element &#123;</span><br><span class="line">  @media @min768 &#123;</span><br><span class="line">    font-size: 1.2rem;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：这是Less 3.5+ 版本的简写，3.5之前的依然需要 <code>@min768: ~&quot;(min-width: 768px)&quot;;</code></p><h3 id="命名空间和访问符"><a href="#命名空间和访问符" class="headerlink" title="命名空间和访问符"></a>命名空间和访问符</h3><blockquote><p>出于组织结构或仅仅是为了提供一些封装的目的，你希望对混合（mixins）进行分组，less可以更加直观地实现这一点</p></blockquote><p>假设你希望将一些混合（mixins）和变量置于 <code>#bundle</code> 之下，为了以后方便重用或分发：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#bundle</span>() &#123;</span><br><span class="line">  <span class="selector-class">.button</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">background-color</span>: grey;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">      <span class="attribute">background-color</span>: white;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.tab</span> &#123; ... &#125;</span><br><span class="line">  <span class="selector-class">.citation</span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，如果我们希望把 <code>.button</code> 类混合到 <code>#header a</code> 中，我们可以这样做：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#header</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: orange;</span><br><span class="line">  <span class="selector-id">#bundle</span><span class="selector-class">.button</span>();  <span class="comment">// 还可以书写为 #bundle &gt; .button 形式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：如果不希望它们出现在输出的 CSS 中，例如 <code>#bundle .tab</code>，请将 <code>()</code> 附加到命名空间（例如 <code>#bundle()</code>）后面。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;开发项目工作室这边一般用less，想找个机会总结一下我容易忽略的css规范&lt;/p&gt;
&lt;h2 id=&quot;统一代码风格&quot;&gt;&lt;a href=&quot;#统一代码风格&quot; class=&quot;headerlink&quot; title=&quot;统一代码风格&quot;&gt;&lt;/a&gt;统一代码风格&lt;/h2&gt;&lt;blockquote&gt;
      
    
    </summary>
    
    
    
      <category term="less" scheme="http://yoursite.com/tags/less/"/>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="代码规范" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>webpack入坑记 01</title>
    <link href="http://yoursite.com/2019/09/10/webpack%E5%85%A5%E5%9D%91%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/09/10/webpack入坑记/</id>
    <published>2019-09-10T02:04:41.000Z</published>
    <updated>2019-09-10T16:00:48.110Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h2 id="似水的流年-为何不去邂逅一场繁华的悸动"><a href="#似水的流年-为何不去邂逅一场繁华的悸动" class="headerlink" title="似水的流年  为何不去邂逅一场繁华的悸动"></a>似水的流年  为何不去邂逅一场繁华的悸动</h2></blockquote><blockquote><h3 id="Grunt-Gulp流程"><a href="#Grunt-Gulp流程" class="headerlink" title="Grunt/Gulp流程"></a>Grunt/Gulp流程</h3></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1031000-d0693c06bb3a00e3.png" alt></p><h1 id="构建-amp-执行过程"><a href="#构建-amp-执行过程" class="headerlink" title="构建&amp;执行过程"></a>构建&amp;执行过程</h1><p>要完全理解webpack整个构建过程是有难度的，这需要你去学习webpack的源码，这里简单地说一下webpack的执行过程:</p><ul><li>webpack先识别我们写的配置表选项，进行一系列的初始化</li><li>webpack从入口文件开始进行编译，递归解析对应依赖的文件，需要进行预处理的文件会根据配置的loader去转换</li><li>根据不同块之间的依赖进行分组，分成不同的<code>chunk</code></li><li>将不同的<code>chunk</code>转成对应的输出文件</li><li>plugin会贯穿这个编译的过程，会在适当的时机调用适当的插件</li></ul><h3 id="webpack工作流程"><a href="#webpack工作流程" class="headerlink" title="webpack工作流程"></a>webpack工作流程</h3><p>把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件（Dependency Graph，从入口文件开始进行编译，递归解析对应依赖的文件），使用loaders处理它们，最后打包为一个浏览器可识别的JavaScript文件。</p><p><img src="http://upload-images.jianshu.io/upload_images/1031000-160bc667d3b6093a.png" alt></p><h4 id="package-json配置"><a href="#package-json配置" class="headerlink" title="package.json配置"></a>package.json配置</h4><blockquote><p>自定义命令</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;  </span><br><span class="line"> &quot;dev&quot;: &quot;webpack-dev-server --open --colors&quot;,  </span><br><span class="line">    &quot;build&quot;: &quot;cross-env NODE_ENV=production webpack -p&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>总结一下写阮一峰的15个demo遇到的问题：</p><h1 id="webpack加载器解析顺序"><a href="#webpack加载器解析顺序" class="headerlink" title="webpack加载器解析顺序"></a>webpack加载器解析顺序</h1><p>无论是字符串语法<code>style-loader!css-loader</code>，亦或是数组语法<code>[&#39;style-loader&#39;, &#39;css-loader&#39;]</code>，webpack解析规则都是从右至左，依次解析并执行加载器处理文件，前一加载器处理的输出就是下一加载器处理的输入，直到最后加载器处理完成；此处即webpack先调用css-loader加载器处理css文件，然后将处理结果传递给style-loader加载器，style-loader接受该输入继续处理。</p><h3 id="（1）注意babel-loader的rule一定要在url-loader下面"><a href="#（1）注意babel-loader的rule一定要在url-loader下面" class="headerlink" title="（1）注意babel-loader的rule一定要在url-loader下面"></a>（1）注意babel-loader的rule一定要在url-loader下面</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">main.jsx</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;React.Fragment&gt;</span><br><span class="line">      &lt;p&gt;halo demo5 图片资源&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">       &lt;img src=&#123;require('./</span><span class="number">4853</span>ca667a2b8b8844eb2693ac1b2578.png<span class="string">')&#125; /&gt;</span></span><br><span class="line"><span class="string">       &lt;img src=&#123;require('</span>./big.png<span class="string">')&#125; /&gt;</span></span><br><span class="line"><span class="string">    &lt;/React.Fragment&gt;</span></span><br><span class="line"><span class="string">  , document.getElementById('</span>root<span class="string">'));</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">wbpack.config.js[https://thinkerhope.github.io/2019/09/10/webpack%E5%85%A5%E5%9D%91%E8%AE%B0/webpack03.jpg](</span></span><br><span class="line"><span class="string">module: &#123;</span></span><br><span class="line"><span class="string">    rules: [</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        test: /\.(png|jpg)$/,</span></span><br><span class="line"><span class="string">        //没有url-loader require('</span>././.(png|jpg)<span class="string">') webpack打包会报错。</span></span><br><span class="line"><span class="string">        use: [</span></span><br><span class="line"><span class="string">          &#123;</span></span><br><span class="line"><span class="string">            loader: '</span>url-loader<span class="string">',</span></span><br><span class="line"><span class="string">            options: &#123;</span></span><br><span class="line"><span class="string">              limit: 8192</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">          // loader: '</span>url-loader?limit=<span class="number">8192</span><span class="string">'</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        test: /\.jsx?$/,</span></span><br><span class="line"><span class="string">        exclude: /node_modules/,</span></span><br><span class="line"><span class="string">        use: [</span></span><br><span class="line"><span class="string">          &#123;</span></span><br><span class="line"><span class="string">            loader: '</span>babel-loader<span class="string">',</span></span><br><span class="line"><span class="string">            options: &#123;</span></span><br><span class="line"><span class="string">              presets: ['</span>es2015<span class="string">', '</span>react<span class="string">']</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">  &#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>解释：好吧，我才刚学，等我会了再更新。</p></blockquote><h3 id="（2）让webpack-config-js支持-es6写法"><a href="#（2）让webpack-config-js支持-es6写法" class="headerlink" title="（2）让webpack.config.js支持 es6写法"></a>（2）让webpack.config.js支持 es6写法</h3><p>不喜欢commonJS的写法，还是习惯es6的import，但是直接import发现并不支持 import，报语法错误了。</p><p><img src="https://thinkerhope.github.io/2019/09/10/webpack%E5%85%A5%E5%9D%91%E8%AE%B0/webpack10.png" alt></p><blockquote><p>以下为解决方法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">第一、把webpack.config.js改名为webpack.config.babel.js（前提是目录下装了babel-loader 和 babel-core）</span><br><span class="line"></span><br><span class="line">第二、把增加一个.babelrc的文件，里面写上&#123; &quot;presets&quot;: [&quot;es2015&quot;]&#125;。</span><br><span class="line"></span><br><span class="line">第三、在package.json文件中加上</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">     <span class="string">"babel-core"</span>: <span class="string">"^6.3.26"</span>,</span><br><span class="line">     <span class="string">"babel-loader"</span>: <span class="string">"^6.2.0"</span>,</span><br><span class="line">     <span class="string">"babel-preset-es2015"</span>: <span class="string">"^6.24.1"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后 <code>npm install</code> 或者 <code>npm i</code>   Nice!可以webpack -p了</p><p><strong>重点来了，之所以不支持es6，是因为我写的demo是webpack 1.00版本了，上个世纪的版本，新的webpack版本好像已经支持es6，而且webpack2.0以上，不能这样实现在webpack.config.js中书写es6语法。</strong></p><h1 id="插件系统"><a href="#插件系统" class="headerlink" title="插件系统"></a>插件系统</h1><h3 id="UglifyJs-Plugin"><a href="#UglifyJs-Plugin" class="headerlink" title="UglifyJs Plugin"></a>UglifyJs Plugin</h3><h6 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h6><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UglifyJsPlugin <span class="keyword">from</span> <span class="string">'uglifyjs-webpack-plugin'</span>;</span><br><span class="line"><span class="comment">//注意看自己的webpack版本是否支持es6</span></span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> UglifyJsPlugin()</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h6 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h6><blockquote><p>压缩output(bundle.js)Js.code</p></blockquote><h3 id="HTML-Webpack-Plugin-amp-Open-Browser-Webpack-Plugin"><a href="#HTML-Webpack-Plugin-amp-Open-Browser-Webpack-Plugin" class="headerlink" title="HTML Webpack Plugin  &amp;   Open Browser Webpack Plugin"></a>HTML Webpack Plugin  &amp;   Open Browser Webpack Plugin</h3><h6 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h6><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> HtmlwebpackPlugin <span class="keyword">from</span> <span class="string">'html-webpack-plugin'</span>;</span><br><span class="line"><span class="keyword">import</span> OpenBrowserPlugin <span class="keyword">from</span> <span class="string">'open-browser-webpack-plugin'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./main.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlwebpackPlugin(&#123;</span><br><span class="line">      title: <span class="string">'Webpack-demos'</span>,</span><br><span class="line">      filename: <span class="string">'index.html'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> OpenBrowserPlugin(&#123;</span><br><span class="line">      url: <span class="string">'http://localhost:8080'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h6 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h6><blockquote><p> HTML  为你创建一个index.html </p><p>OpenBrowser  当webpack加载的时候打开一个新标签页</p></blockquote><h3 id="代码拆分"><a href="#代码拆分" class="headerlink" title="代码拆分"></a>代码拆分</h3><blockquote><p>webpack使用 require.ensure定义split point 。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="built_in">require</span>.ensure([<span class="string">'./a'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> content = <span class="built_in">require</span>(<span class="string">'./a'</span>);</span><br><span class="line">  <span class="built_in">document</span>.open();</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">'&lt;h1&gt;'</span> + content + <span class="string">'&lt;/h1&gt;'</span>);</span><br><span class="line">  <span class="built_in">document</span>.close();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面的代码告诉webpack <code>./a.js</code> 应该从 <code>bundle.js</code> 被拆分开，并创建一个新的<code>chunk file</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="string">'Hello World'</span>;</span><br></pre></td></tr></table></figure><blockquote><p>此时，你不用在index.html中手动引入chunk.js，也不用在webpack.config.js的output里配置chunk。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">index.html</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;script src=<span class="string">"bundle.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">  &lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br><span class="line"></span><br><span class="line">webpack.config.js</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./mplugins: [</span></span><br><span class="line"><span class="string">    new webpack.optimize.CommonsChunkPlugin(&#123;</span></span><br><span class="line"><span class="string">      name: "commons",</span></span><br><span class="line"><span class="string">      // (the commons chunk name)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      filename: "commons.js",</span></span><br><span class="line"><span class="string">      // (the filename of the commons chunk)</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">  ]ain.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="bundle-loader"><a href="#bundle-loader" class="headerlink" title="bundle-loader"></a>bundle-loader</h3><blockquote><p>代码拆分的另一种方式。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> load = <span class="built_in">require</span>(<span class="string">'bundle-loader!./a.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// To wait until a.js is available (and get the exports)</span></span><br><span class="line"><span class="comment">//  you need to async wait for it.</span></span><br><span class="line">load(<span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.open();</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">'&lt;h1&gt;'</span> + file + <span class="string">'&lt;/h1&gt;'</span>);</span><br><span class="line">  <span class="built_in">document</span>.close();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>Q  利用bundle-loader实现按需加载</p></blockquote><blockquote><p><a href="https://github.com/webpack-contrib/bundle-loader/blob/master/index.js" target="_blank" rel="noopener">源码</a>阅读，代码简短，也是通过require.ensure()实现。</p></blockquote><h3 id="CommonsChunkPlugin"><a href="#CommonsChunkPlugin" class="headerlink" title="CommonsChunkPlugin"></a>CommonsChunkPlugin</h3><blockquote><p>有利于浏览器缓存和节省带宽</p></blockquote><h6 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h6><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line">...</span><br><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: <span class="string">"commons"</span>,</span><br><span class="line">      <span class="comment">// (the commons chunk name)</span></span><br><span class="line"></span><br><span class="line">      filename: <span class="string">"commons.js"</span>,</span><br><span class="line">      <span class="comment">// (the filename of the commons chunk)</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><blockquote><p>用CommonsChunkPlugin拆分第三方库</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">main.js</span><br><span class="line"><span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>);</span><br><span class="line">$(<span class="string">'h1'</span>).text(<span class="string">'Hello World'</span>);</span><br><span class="line"></span><br><span class="line">index.html</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;script src=<span class="string">"vendor.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">"bundle.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">  &lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br><span class="line">    </span><br><span class="line">webpack.config.js</span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./main.js'</span>,</span><br><span class="line">    vendor: [<span class="string">'jquery'</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: <span class="string">'vendor'</span>,</span><br><span class="line">      filename: <span class="string">'vendor.js'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>注意  entry.vendor: [‘jquery’]告诉webpack jquery要被包含在commmon chunk (vendor.js中)，所以CommonsChunkPlugin中的name属性和entry中的vendor键必须相同，也可以是其它名字。</p></blockquote><p>从上面也可以发现每个模块中要使用jquery都要require(‘jquery’)。</p><p>如果希望$作为全局变量，而不使用require(‘jquery’)，如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line">$(<span class="string">'h1'</span>).text(<span class="string">'Hello World'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./main.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">      $: <span class="string">'jquery'</span>,</span><br><span class="line">      jQuery: <span class="string">'jquery'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>使用ProvidePlugin可以自动载入模块，而不需要import或者require()模块。</p></blockquote><h3 id="暴露全局变量-externals"><a href="#暴露全局变量-externals" class="headerlink" title="暴露全局变量   externals"></a>暴露全局变量   externals</h3><p>当我们需要使用一些全局变量，又不希望变量包含在bundle文件中，不需要webpack处理，编译进文件中，在我们需要，使用它的时候可以通过CMD、AMD、或者window全局方式访问。</p><p>假设我们自己有个工具库，tools.js，它并没有提供给我们UMD的那些功能，只是使用window或者global的方式把工具的对象tools暴露出来</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">utils.js</span><br><span class="line"><span class="built_in">window</span>.tools = &#123;</span><br><span class="line">    add: <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> num1 + num2</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>引入</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"http://xxx/tools.min.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>可能我们会直接引用</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> res = tools.add(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>既然我们是模块化开发，当然要杜绝一切全局变量了，我们要用require的方式。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`const tools = require(`</span><span class="string">`'mathTools'`</span><span class="string">`)`</span><span class="string">`const res = tools.add(1,2)`</span></span><br></pre></td></tr></table></figure><p>　　</p><blockquote><p>这时我们再来配置一些externals即可</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  output: &#123;</span><br><span class="line">    ...</span><br><span class="line">    libraryTarget: <span class="string">"umd"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  externals: &#123;</span><br><span class="line">    mathTools: <span class="string">"tools"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>打包后会有这一段</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = mathTools;</span><br></pre></td></tr></table></figure><blockquote><p>要注意的点</p><p><code>externals: {  mathTools: &quot;tools&quot; }</code> 和 <code>const tools = require(&#39;mathTools&#39;)</code> tools和mathTools是对应的。并且 <code>utils.js</code>中的<code>tools</code> 变量要和 <code>const tools = require(&#39;mathTools&#39;)</code> 的 <code>tools</code> 变量对应。</p></blockquote><p>皮毛的东西，继续填坑吧，哎。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h2 id=&quot;似水的流年-为何不去邂逅一场繁华的悸动&quot;&gt;&lt;a href=&quot;#似水的流年-为何不去邂逅一场繁华的悸动&quot; class=&quot;headerlink&quot; title=&quot;似水的流年  为何不去邂逅一场繁华的悸动&quot;&gt;&lt;/a&gt;似水的流年  为何不去邂逅一场
      
    
    </summary>
    
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>combineReducers源码学习</title>
    <link href="http://yoursite.com/2019/09/09/combineReducers%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2019/09/09/combineReducers源码学习/</id>
    <published>2019-09-09T10:50:50.000Z</published>
    <updated>2019-09-09T13:17:46.086Z</updated>
    
    <content type="html"><![CDATA[<p>combineReducers的基本使用，上一组乱七八糟的图：</p><p><img src="https://thinkerhope.github.io/2019/09/09/combineReducers%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/Reducers.png" alt></p><p>​                                                          <u>根目录下store里的reducer</u></p><p><img src="https://thinkerhope.github.io/2019/09/09/combineReducers%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/reducers03.png" alt></p><p>​                                                                  <u>AvatarReducer</u></p><p>一般不会直接在根目录的reducer里导入AvatarReducer，而是在Avatar对应的store里新建一个index.js作为导出文件。规范代码。</p><p><img src="https://thinkerhope.github.io/2019/09/09/combineReducers%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/reducer04.png" alt></p><p>​                                                   <u>AvatarReducer对应的store目录的导出文件</u></p><p>combineReducers里面的每一个值都是导出的函数，比较好奇是怎么合并。</p><p>天哪，我发现我入了个错坑，之前是完全误解了combineReducers，导致我的项目里没有有点逻辑，它的价值在于分离相应的逻辑。果然对于开发者来说，设计理念才是最重要的，否则即使知道源码，也会越走越错。</p><p>重新认识一下combineReducers：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; VisibilityFilters, ADD_TODO, TOGGLE_TODO &#125; <span class="keyword">from</span> <span class="string">'./actions'</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">todoApp</span>(<span class="params">state = initialState, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> SET_VISIBILITY_FILTER:</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;</span><br><span class="line">        visibilityFilter: action.filter</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="keyword">case</span> ADD_TODO:</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;</span><br><span class="line">        todos: [</span><br><span class="line">          ...state.todos,</span><br><span class="line">          &#123;</span><br><span class="line">            text: action.text,</span><br><span class="line">            completed: <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="keyword">case</span> TOGGLE_TODO:</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;</span><br><span class="line">        todos: state.todos.map(<span class="function">(<span class="params">todo, index</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (index === action.index) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, todo, &#123;</span><br><span class="line">              completed: !todo.completed</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> todo</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为todos跟visibilityFilter是分开更新的，所以其实我们可以把它们分开来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">todos</span>(<span class="params">state = [], action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> ADD_TODO:</span><br><span class="line">      <span class="keyword">return</span> [</span><br><span class="line">        ...state,</span><br><span class="line">        &#123;</span><br><span class="line">          text: action.text,</span><br><span class="line">          completed: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    <span class="keyword">case</span> TOGGLE_TODO:</span><br><span class="line">      <span class="keyword">return</span> state.map(<span class="function">(<span class="params">todo, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index === action.index) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, todo, &#123;</span><br><span class="line">            completed: !todo.completed</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> todo</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">visibilityFilter</span>(<span class="params">state = SHOW_ALL, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> SET_VISIBILITY_FILTER:</span><br><span class="line">      <span class="keyword">return</span> action.filter</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">todoApp</span>(<span class="params">state = &#123;&#125;, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    visibilityFilter: visibilityFilter(state.visibilityFilter, action),</span><br><span class="line">    todos: todos(state.todos, action)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样每个reducer只负责自己那一块的状态更新，combindReducers做了上面todoApp做的事情。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> todoApp = combineReducers(&#123;</span><br><span class="line">  visibilityFilter,</span><br><span class="line">  todos</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> todoApp</span><br></pre></td></tr></table></figure><p>如下为一个简单的实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combindReducer</span>(<span class="params">reducers</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 第一个只是先过滤一遍 把非function的reducer过滤掉</span></span><br><span class="line">  <span class="keyword">const</span> reducerKeys = <span class="built_in">Object</span>.keys(reducers)</span><br><span class="line">  <span class="keyword">const</span> finalReducers = &#123;&#125;</span><br><span class="line">  reducerKeys.forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">typeof</span> reducers[key] === <span class="string">'function'</span>) &#123;</span><br><span class="line">      finalReducers[key] = reducers[key]</span><br><span class="line">      &#125; </span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> finalReducersKeys = <span class="built_in">Object</span>.keys(finalReducers)</span><br><span class="line">    <span class="comment">// 第二步比较重要 就是将所有reducer合在一起</span></span><br><span class="line">    <span class="comment">// 根据key调用每个reducer，将他们的值合并在一起</span></span><br><span class="line">    <span class="keyword">let</span> hasChange = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">const</span> nextState = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">combind</span>(<span class="params">state=&#123;&#125;, action</span>) </span>&#123;</span><br><span class="line">        finalReducersKeys.forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> previousValue = state[key];</span><br><span class="line">            <span class="keyword">const</span> nextValue = reducers[key](previousValue, action);</span><br><span class="line">            nextState[key] = nextValue;</span><br><span class="line">            hasChange = hasChange || previousValue !== nextValue</span><br><span class="line">            <span class="comment">//只要有一个reducer的值改变，hasChange就为true</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> hasChange ? nextState : state;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;combineReducers的基本使用，上一组乱七八糟的图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://thinkerhope.github.io/2019/09/09/combineReducers%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B
      
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
      <category term="react-redux" scheme="http://yoursite.com/tags/react-redux/"/>
    
  </entry>
  
  <entry>
    <title>总结一下遇到的react-router-dom应用</title>
    <link href="http://yoursite.com/2019/09/09/%E6%80%BB%E7%BB%93%E4%B8%80%E4%B8%8B%E9%81%87%E5%88%B0%E7%9A%84react-router-dom%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2019/09/09/总结一下遇到的react-router-dom应用/</id>
    <published>2019-09-09T00:34:12.897Z</published>
    <updated>2019-09-09T00:34:12.897Z</updated>
    
    <content type="html"><![CDATA[<h1 id="（1）根据路由切换浏览器的title属性"><a href="#（1）根据路由切换浏览器的title属性" class="headerlink" title="（1）根据路由切换浏览器的title属性"></a>（1）根据路由切换浏览器的title属性</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React,&#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123;Switch,Route,NavLink,Redirect,withRouter&#125; <span class="keyword">from</span>  <span class="string">'react-router-dom'</span></span><br><span class="line"><span class="keyword">import</span> One <span class="keyword">from</span> <span class="string">'./One'</span></span><br><span class="line"><span class="keyword">import</span> NotFound <span class="keyword">from</span> <span class="string">'./NotFound'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">      <span class="keyword">super</span>(props);</span><br><span class="line">      props.history.listen(<span class="function">(<span class="params">location</span>) =&gt;</span> &#123;  </span><br><span class="line">          <span class="comment">//在这里监听location对象</span></span><br><span class="line">         <span class="built_in">console</span>.log(location.pathname); </span><br><span class="line">         <span class="keyword">switch</span>(location.pathname)&#123;   </span><br><span class="line">         <span class="keyword">case</span> <span class="string">'/one/users'</span> : <span class="built_in">document</span>.title = <span class="string">'用户列表'</span>;              <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="string">'/one/companies'</span> : <span class="built_in">document</span>.title = <span class="string">'公司列表'</span>;          <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">default</span> : <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  render()&#123;</span><br><span class="line">     <span class="keyword">return</span> (</span><br><span class="line">         &lt;div className=<span class="string">'app'</span>&gt;</span><br><span class="line">            &lt;NavLink to=<span class="string">'/one/users'</span>&gt;用户列表&lt;<span class="regexp">/NavLink&gt;</span></span><br><span class="line"><span class="regexp">            &lt;NavLink to='/</span>one/companies<span class="string">'&gt;公司列表&lt;/NavLink&gt;</span></span><br><span class="line"><span class="string">            &lt;Switch&gt;</span></span><br><span class="line"><span class="string">              &lt;Route path='</span>/one/:type?<span class="string">'  component=&#123;One&#125; /&gt;</span></span><br><span class="line"><span class="string">              &lt;Redirect from='</span>/<span class="string">' to='</span>/one<span class="string">' exact /&gt;</span></span><br><span class="line"><span class="string">              &lt;Route component=&#123;NotFound&#125; /&gt;</span></span><br><span class="line"><span class="string">            &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">         &lt;/div&gt;</span></span><br><span class="line"><span class="string">     )；</span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default withRouter(App);</span></span><br></pre></td></tr></table></figure><h1 id="（2）withRouter-的常见应用"><a href="#（2）withRouter-的常见应用" class="headerlink" title="（2）withRouter()的常见应用:"></a>（2）withRouter()的常见应用:</h1><p>作用：</p><h2 id="（1）withRouter可以用来给组件注入router相关的一些参数。"><a href="#（1）withRouter可以用来给组件注入router相关的一些参数。" class="headerlink" title="（1）withRouter可以用来给组件注入router相关的一些参数。"></a>（1）withRouter可以用来给组件注入router相关的一些参数。</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"><span class="keyword">import</span> &#123; withRouter &#125; <span class="keyword">from</span> <span class="string">'react-router'</span><span class="comment">// A simple component that shows the pathname of the current location</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShowTheLocation</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> propTypes = &#123; </span><br><span class="line">   match: PropTypes.object.isRequired, </span><br><span class="line">   location: PropTypes.object.isRequired, </span><br><span class="line">   history: PropTypes.object.isRequired</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; match, location, history &#125; = <span class="keyword">this</span>.props</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">          &lt;div&gt;You are now at &#123;location.pathname&#125;&lt;<span class="regexp">/div&gt;           )；</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="（2）其次withRouter是专门用来处理数据更新问题的。"><a href="#（2）其次withRouter是专门用来处理数据更新问题的。" class="headerlink" title="（2）其次withRouter是专门用来处理数据更新问题的。"></a>（2）其次withRouter是专门用来处理数据更新问题的。</h2><p>在使用一些redux的的<code>connect()</code>或者mobx的<code>inject()</code>的组件中，如果依赖于路由的更新要重新渲染，会出现路由更新了但是组件没有重新渲染的情况。这是因为redux和mobx的这些连接方法会修改组件的<code>shouldComponentUpdate</code>。</p><p>使用withRouter解决更新问题的时候，一定要保证withRouter在最外层，比如<code>withRouter(connect(Component))</code>。</p><h2 id="（3）NavLink用来做导航样式"><a href="#（3）NavLink用来做导航样式" class="headerlink" title="（3）NavLink用来做导航样式"></a>（3）NavLink用来做导航样式</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// header.js</span></span><br><span class="line">  &lt;li className=<span class="string">"tab"</span>&gt;</span><br><span class="line">    &lt;NavLink exact to=<span class="string">"/"</span> activeClassName=<span class="string">"active"</span>&gt;</span><br><span class="line">      &lt;span className=<span class="string">"menu-text"</span>&gt;首页&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;iclassName="iconfontic-navigation-discover menu-icon"&gt;&amp;#xe61f;&lt;i&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>NavLink&gt;</span><br><span class="line">  &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  &lt;li className="tab"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;NavLink to="/</span>download<span class="string">" activeClassName="</span>active<span class="string">"&gt;</span></span><br><span class="line"><span class="string">      &lt;span className="</span>menu-text<span class="string">"&gt;下载App&lt;/span&gt;</span></span><br><span class="line"><span class="string">      &lt;i className="</span>iconfont ic-navigation-download menu-icon<span class="string">"&gt;&amp;#xe608;&lt;/i&gt;</span></span><br><span class="line"><span class="string">    &lt;/NavLink&gt;</span></span><br><span class="line"><span class="string">  &lt;/li&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// home.js</span></span><br><span class="line"><span class="string">&lt;NavLink to="</span>/detail<span class="string">"  className="</span>title<span class="string">" &gt;&#123;itemInfo.title&#125;&lt;/NavLink&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//App.js</span></span><br><span class="line"><span class="string">import &#123; BrowserRouter as Router, Route &#125; from 'react-router-dom';</span></span><br><span class="line"><span class="string">&lt;Router &gt;</span></span><br><span class="line"><span class="string">  &lt;Header /&gt;</span></span><br><span class="line"><span class="string">  &lt;Route exact path="</span>/<span class="string">" component=&#123;Home&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">  &lt;Route path="</span>/detail<span class="string">" target="</span>_blank<span class="string">" render=&#123;() =&gt; (&lt;div&gt;details~&lt;/div&gt;)&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">  &lt;Route path="</span>/download<span class="string">" render=&#123;() =&gt; (&lt;div&gt;&lt;/div&gt;)&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">&lt;/Router&gt;</span></span><br></pre></td></tr></table></figure><p>点击首页和下载App会切换组件，并且点击的链接activeClassName会被激活，给定激活class样式。失去激活状态的恢复样式：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">li.tab&gt;a.active &#123;</span><br><span class="line">    color: #ea6f5a;</span><br><span class="line">&#125;</span><br><span class="line">li.tab&gt;a:not(.active):hover &#123;</span><br><span class="line">  background-color: #f5f5f5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;（1）根据路由切换浏览器的title属性&quot;&gt;&lt;a href=&quot;#（1）根据路由切换浏览器的title属性&quot; class=&quot;headerlink&quot; title=&quot;（1）根据路由切换浏览器的title属性&quot;&gt;&lt;/a&gt;（1）根据路由切换浏览器的title属性&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="react-router-dom" scheme="http://yoursite.com/tags/react-router-dom/"/>
    
  </entry>
  
  <entry>
    <title>前端模块化 --AMD/RequireJs初识</title>
    <link href="http://yoursite.com/2019/09/08/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96-AMD-RequireJs%E5%88%9D%E8%AF%86/"/>
    <id>http://yoursite.com/2019/09/08/前端模块化-AMD-RequireJs初识/</id>
    <published>2019-09-08T11:30:01.000Z</published>
    <updated>2019-09-10T16:27:11.814Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><h2 id="I-am-a-sucker-for-all-beauty"><a href="#I-am-a-sucker-for-all-beauty" class="headerlink" title="I am a sucker for all beauty"></a><strong>I am a sucker for all beauty</strong></h2></blockquote><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><blockquote><p>菜鸟：<a href="https://www.runoob.com/w3cnote/requirejs-tutorial-2.html" target="_blank" rel="noopener">https://www.runoob.com/w3cnote/requirejs-tutorial-2.html</a></p><p>某位大佬：<a href="http://laichuanfeng.com/work/require-config-global/" target="_blank" rel="noopener">http://laichuanfeng.com/work/require-config-global/</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本菜鸟对于前端模块化的概念一直是比较模糊。学webpack也是稀里糊涂，自从webpack出现后，RequireJs几乎退出了人们的视野，官网也不再升级版本，后续出现的框架如angular、React、Vue又将前端模块上升到了另外一个高度。跟随前端时代的变迁固然重要，但有时，尝试一些“老技术”也无可厚非，或许也能给我们带来不同的体会。</p></blockquote><h2 id="RequireJS"><a href="#RequireJS" class="headerlink" title="RequireJS"></a>RequireJS</h2><h1 id="一、目的"><a href="#一、目的" class="headerlink" title="一、目的"></a>一、目的</h1><p>先明确AMD和RequireJS的关系：</p><p><strong>AMD-异步模块定义</strong></p><p><strong>AMD是RequireJS</strong>在推广过程中<strong>对模块定义的规范化</strong>产出，它是一个概念，RequireJS是对这个概念的实现，就好比JavaScript语言是对ECMAScript规范的实现。AMD是一个组织，RequireJS是在这个组织下自定义的一套脚本语言。</p><p>作为js文件加载器，能运行在所有js环境中（如node）。</p><p>所以，AMD有什么意义？</p><h2 id="（1）实现js文件的异步加载，避免网页失去响应"><a href="#（1）实现js文件的异步加载，避免网页失去响应" class="headerlink" title="（1）实现js文件的异步加载，避免网页失去响应"></a>（1）实现js文件的异步加载，避免网页失去响应</h2><p> 如下代码alert执行的时候，html内容是一片空白的，这就是js阻塞浏览器渲          染导致的结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">index.html:</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"a.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">    &lt;body&gt;</span></span><br><span class="line"><span class="regexp">      &lt;span&gt;body&lt;/</span>span&gt;</span><br><span class="line">    &lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a.js:</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      alert(<span class="string">"it works"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun1();</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h2 id="（2）管理模块之间的依赖性，便于代码的编写和维护"><a href="#（2）管理模块之间的依赖性，便于代码的编写和维护" class="headerlink" title="（2）管理模块之间的依赖性，便于代码的编写和维护"></a>（2）管理模块之间的依赖性，便于代码的编写和维护</h2><p>如下一坨</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"a.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"b.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"c.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"d.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"e.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"f.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"g.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"h.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"i.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"main.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>如果一个文件需要依赖另外一些文件中定义的东西时，这个文件依赖的所有文件都要在它之前导入。过于复杂的系统，依赖关系可能出现相互交叉的情况，依赖关系的管理就更加难了。例如main.js用到了前面a、b、c、d、e、f模块，但并未被其它模块使用，故可以且必须放到末尾导入。要确保模块的依赖在该模块导入之前就要导入，为了解除导入顺序的限制，只能让各模块间解耦。另外，加载文件越多，网页失去响应的时间就会越长。</p><h1 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h1><h2 id="2-1-下载"><a href="#2-1-下载" class="headerlink" title="2.1 下载"></a>2.1 下载</h2><h4 id="2-1-1-链接下载"><a href="#2-1-1-链接下载" class="headerlink" title="2.1.1 链接下载"></a>2.1.1 链接下载</h4><p>使用require.js的第一步，是先去官方网站<a href="http://requirejs.org/docs/download.html" target="_blank" rel="noopener">下载</a>最新版本。</p><h4 id="2-1-2-npm"><a href="#2-1-2-npm" class="headerlink" title="2.1.2 npm"></a>2.1.2 npm</h4><p>根目录下 输入</p><p><code>npm install requirejs --save-dev</code></p><p>如果当前目录没有package.json</p><p><code>npm init</code></p><h2 id="2-2使用"><a href="#2-2使用" class="headerlink" title="2.2使用"></a>2.2使用</h2><p>目录结构：</p><p><img src="https://raw.githubusercontent.com/thinkerHope/thinkerHope.github.io/master/2019/09/08/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96-AMD-RequireJs%E5%88%9D%E8%AF%86/AMD.png" alt></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">index.html</span><br><span class="line"> &lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"js/lib/require.js"</span>&gt;&lt;/script&gt;</span><br><span class="line"> &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">   <span class="built_in">require</span>([<span class="string">"js/script/a"</span>]);</span><br><span class="line"> &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp"> a.js</span></span><br><span class="line"><span class="regexp"> define(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  function f1() &#123;</span></span><br><span class="line"><span class="regexp">    alert('it works');</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  f1();</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br></pre></td></tr></table></figure><p>so，页面内容能正常显示了。</p><blockquote><p>基本API:</p><p> define, require, requirejs，其中require === requirejs。</p><p>define() – 定义一个模块，如上面的a.js</p><p>require() – 加载模块，并执行加载后的回调函数</p></blockquote><blockquote><p>注意:</p><p>  第一个参数是个数组，即使只有一个模块，也必须以数组形式作为参数。 </p><p>  require中加载模块不能加.js后缀</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">"js/a"</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">"load finished"</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="加载文件："><a href="#加载文件：" class="headerlink" title="加载文件："></a>加载文件：</h3><blockquote><p>require除了可以加载如上的本地模块，还可以加载来自本地服务器、其他网站、CDN的js文件。这时候就要配置require.config</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"./js/lib/require.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">      &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">        <span class="built_in">require</span>.config(&#123;</span><br><span class="line">          paths: &#123;</span><br><span class="line">            <span class="string">"jquery"</span> : [<span class="string">"http://libs.baidu.com/jquery/2.0.3/jquery"</span>],</span><br><span class="line">            <span class="string">"a"</span>: <span class="string">"js/script/a"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//require(["js/script/a"]);</span></span><br><span class="line">        <span class="built_in">require</span>([<span class="string">"jquery"</span>, <span class="string">"a"</span>], $ =&gt; &#123;</span><br><span class="line">          $(() =&gt; alert(<span class="string">"load finished"</span>));</span><br><span class="line">        &#125;);</span><br><span class="line">      &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>通过paths，我们可以简化模块的名字。除此之外，paths还有一个重要功能，</p><p>如下代码，当百度的jquery没有加载成功后，会加载本地js目录下的jquery。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"./js/lib/require.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">      &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">        <span class="built_in">require</span>.config(&#123;</span><br><span class="line">          paths: &#123;</span><br><span class="line">            <span class="string">"jquery"</span> : [<span class="string">"http://libs.baidu.com/jquery/2.0.3/jquery"</span>, <span class="string">"js/lib/jquery"</span>],</span><br><span class="line">            <span class="string">"a"</span>: <span class="string">"js/script/a"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//require(["js/script/a"]);</span></span><br><span class="line">        <span class="built_in">require</span>([<span class="string">"jquery"</span>, <span class="string">"a"</span>], $ =&gt; &#123;</span><br><span class="line">          $(() =&gt; alert(<span class="string">"load finished"</span>));</span><br><span class="line">        &#125;);</span><br><span class="line">      &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>上面require回调中的$参数，是依赖的<code>jquery</code>模块的输出变量，如果你依赖多个模块，可以依次写入多个参数来使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">"jquery"</span>,<span class="string">"underscore"</span>],<span class="function"><span class="keyword">function</span>(<span class="params">$, _</span>)</span>&#123;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        _.each([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],alert);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><p>requirejs提供了一种叫”主数据”(data-main)的功能</p><blockquote><p>按照data-main的方式进行全局配置对于我这种菜鸡感觉真的不友好(wuwuwu，为什么jquery一直加载不了啊)，所以我在网上找了一个适合我的解决方案，目前是可以加载成功的。</p></blockquote><h6 id="项目结构如下："><a href="#项目结构如下：" class="headerlink" title="项目结构如下："></a>项目结构如下：</h6><p><img src="https://thinkerhope.github.io/2019/09/08/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96-AMD-RequireJs%E5%88%9D%E8%AF%86/AMD20.png" alt></p><h6 id="require-config-js为全局配置："><a href="#require-config-js为全局配置：" class="headerlink" title="require.config.js为全局配置："></a>require.config.js为全局配置：</h6><p><img src="https://thinkerhope.github.io/2019/09/08/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96-AMD-RequireJs%E5%88%9D%E8%AF%86/AMD17.png" alt></p><h6 id="index-html中引入脚本方式："><a href="#index-html中引入脚本方式：" class="headerlink" title="index.html中引入脚本方式："></a>index.html中引入脚本方式：</h6><p><img src="https://thinkerhope.github.io/2019/09/08/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96-AMD-RequireJs%E5%88%9D%E8%AF%86/AMD12.png" alt></p><blockquote><p>解释（个人理解）：require.config.js中的脚本只是一个配置，而不是加载，所以需要在config.js模块加载完成（保证全局配置生效后）再根据require.config()的配置去加载需要的模块。emmm…虽然方法很笨…但是至少不会出现下面的情况：</p></blockquote><p><img src="https://thinkerhope.github.io/2019/09/08/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96-AMD-RequireJs%E5%88%9D%E8%AF%86/AMD30.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;I-am-a-sucker-for-all-beauty&quot;&gt;&lt;a href=&quot;#I-am-a-sucker-for-all-beauty&quot; class=&quot;headerlink&quot; title=&quot;I am a sucker for 
      
    
    </summary>
    
    
    
      <category term="FE 模块化" scheme="http://yoursite.com/tags/FE-%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
</feed>
