<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>记录我的点滴</title>
  
  <subtitle>Yu Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-02T14:24:27.514Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>boygreen_Yu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>typescript2(基础篇2)</title>
    <link href="http://yoursite.com/2019/10/02/typescript2-%E5%9F%BA%E7%A1%80%E7%AF%872/"/>
    <id>http://yoursite.com/2019/10/02/typescript2-基础篇2/</id>
    <published>2019-10-02T13:19:21.000Z</published>
    <updated>2019-10-02T14:24:27.514Z</updated>
    
    <content type="html"><![CDATA[<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>类的一些基本示例:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Greteer&#123;</span><br><span class="line">    greeting: <span class="built_in">string</span></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">message:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.greeting = message;</span><br><span class="line">    &#125;</span><br><span class="line">    greet()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Hello,'</span> + <span class="keyword">this</span>.greeting</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> greeter = <span class="keyword">new</span> Greteer(<span class="string">'world'</span>);</span><br><span class="line">greeter.greet();</span><br></pre></td></tr></table></figure><p><strong>继承</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animals &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  move(distance:<span class="built_in">number</span>)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> moved <span class="subst">$&#123;distance&#125;</span>m`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Snake <span class="keyword">extends</span> Animals&#123;</span><br><span class="line">   <span class="keyword">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">       <span class="keyword">super</span>(name);</span><br><span class="line">   &#125;</span><br><span class="line">   move(distance:<span class="built_in">number</span> = <span class="number">5</span>)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Slitering ....'</span>);</span><br><span class="line">      <span class="keyword">super</span>.move(distance);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Hourse <span class="keyword">extends</span> Animals&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    move(distance:<span class="built_in">number</span>=<span class="number">45</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Galloping...'</span>);</span><br><span class="line">        <span class="comment">// 去给父类里面传递参数</span></span><br><span class="line">        <span class="keyword">super</span>.move(distance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> sam = <span class="keyword">new</span> Snake(<span class="string">'Sammy'</span>);</span><br><span class="line"><span class="keyword">let</span> tom:Animals = <span class="keyword">new</span> Hourse(<span class="string">'Tommy'</span>);</span><br><span class="line">sam.move();</span><br><span class="line">tom.move(<span class="number">12</span>);</span><br></pre></td></tr></table></figure><p><strong>类<code>public</code>、<code>private</code>、<code>protected</code></strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认为public</span></span><br><span class="line"><span class="keyword">class</span> Animal0&#123;</span><br><span class="line">    <span class="keyword">public</span> name:<span class="built_in">string</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> move(distance:<span class="built_in">number</span> = <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> moved <span class="subst">$&#123;distance&#125;</span> m`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//private</span></span><br><span class="line"><span class="keyword">class</span> Animal1&#123;</span><br><span class="line">  <span class="keyword">private</span> name: <span class="built_in">string</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这个地方就会报错</span></span><br><span class="line"><span class="keyword">new</span> Animal1(<span class="string">'ni'</span>).name;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;类&quot;&gt;&lt;a href=&quot;#类&quot; class=&quot;headerlink&quot; title=&quot;类&quot;&gt;&lt;/a&gt;类&lt;/h3&gt;&lt;p&gt;类的一些基本示例:&lt;/p&gt;
&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="ts" scheme="http://yoursite.com/tags/ts/"/>
    
  </entry>
  
  <entry>
    <title>凡心所向，素履以往</title>
    <link href="http://yoursite.com/2019/10/01/%E5%87%A1%E5%BF%83%E6%89%80%E5%90%91/"/>
    <id>http://yoursite.com/2019/10/01/凡心所向/</id>
    <published>2019-10-01T07:45:47.000Z</published>
    <updated>2019-10-03T13:15:55.957Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="生如夏花，此生唯有不断的靠近存在于心中的那片天地，才算是不曾虚耗光阴。"><a href="#生如夏花，此生唯有不断的靠近存在于心中的那片天地，才算是不曾虚耗光阴。" class="headerlink" title="生如夏花，此生唯有不断的靠近存在于心中的那片天地，才算是不曾虚耗光阴。"></a>生如夏花，此生唯有不断的靠近存在于心中的那片天地，才算是不曾虚耗光阴。</h3></blockquote><blockquote><p>凡心所向，素履以往，生如逆旅，一苇以航。</p><p>不关此世，不负己心，我自倾杯，且君随意。</p><p>​                                                      ——七堇年 《尘曲》 </p></blockquote><p>现实不允许我们过着那种只有诗句里才能看到的写意人生，而且我们也达不到那种境界，只有工作才能养活自己和家人。</p><p>但这并不代表我们就要被同化，每个人都有着不同的生命轨迹，总有那么些沉静的日子，细数着为数不多的梦想，摒弃一切的恶俗，抵制一切的诱惑，无论它们看起来多么绝美，会感动地发现自己依然在牢牢地守住内心深处期盼已久的誓言。</p><p>年少时，总是憧憬着各种不切实际的梦想，幻想着未来的幸福，然而现实却以一种残酷无情甚至是恶毒的方式告诉我，你太年轻了，放弃吧。心之所向不是子虚乌有，而是自己能够努力抵达的终点，是对自我的皈依，人生的涅槃。</p><p>人生如逆旅，我亦是行人。必不可能有完美的人生，亦没有符合所有心情的生活，每个人都会有消沉的日子，也注定每个人的路上都会有数不清的艰苦，始终记得自己要抵达的终点才是憩脚之处，不然只能和泥沙一样永远地沉入江底，虽然不用再为了前进而努力了，但是却永远地失去了阳光。</p><p>季节不断地嬗变，岁月不停地流走。散落四季的物事，化作人生的风景，旅途留下的或深或浅，斑斑驳驳的脚印，证明你没有与谁擦肩而过。能支撑自己一直走下去，而不是流连忘返于虚无的美景，是自己心之所向。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;生如夏花，此生唯有不断的靠近存在于心中的那片天地，才算是不曾虚耗光阴。&quot;&gt;&lt;a href=&quot;#生如夏花，此生唯有不断的靠近存在于心中的那片天地，才算是不曾虚耗光阴。&quot; class=&quot;headerlink&quot; title=&quot;生如夏花，此生唯有
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="心情" scheme="http://yoursite.com/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu qq使用</title>
    <link href="http://yoursite.com/2019/10/01/Ubuntu-qq%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/10/01/Ubuntu-qq使用/</id>
    <published>2019-10-01T07:24:35.000Z</published>
    <updated>2019-10-01T14:10:01.487Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>首先，查看本地的系统环境：</p></blockquote><p><code>lsb_release -a</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Distributor ID:Ubuntu</span><br><span class="line">Description:Ubuntu 16.04.6 LTS</span><br><span class="line">Release:16.04</span><br><span class="line">Codename:xenial</span><br></pre></td></tr></table></figure><blockquote><p>然后看教程</p></blockquote><ul><li>首先安装wine:<code>git clone https://github.com/wszqkzqk/deepin-wine-ubuntu.git</code></li><li><code>cd deepin-wine-ubuntu &amp;&amp; sudo sh ./install.sh</code></li><li>然后去 <a href="http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.office/" target="_blank" rel="noopener">tim镜像网站</a> 和 <a href="http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.wechat/" target="_blank" rel="noopener">微信镜像网站</a> 下载到对应的<code>deb</code>安装包(微信最好不要下载最新的)</li><li>将下载下来的<code>deb</code>包使用命令行进行解压<code>sudo dpkg -i xxx.deb</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;首先，查看本地的系统环境：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;lsb_release -a&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt
      
    
    </summary>
    
    
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>typescript2(基础篇1)</title>
    <link href="http://yoursite.com/2019/09/30/TypeScript%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2019/09/30/TypeScript入门学习/</id>
    <published>2019-09-30T07:53:34.000Z</published>
    <updated>2019-10-02T13:18:55.033Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JavaScript 的一个超集，主要提供了<strong>类型系统</strong>和<strong>对 ES6 的支持</strong></p></blockquote><h3 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h3><p><strong>布尔值：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new Boolean()通过不了，其它基本类型也一样（除了null和undefined）</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">let</span> isDone: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p><strong>数字：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以用es6的进制表示数字，被编译为十进制</span></span><br><span class="line"><span class="keyword">let</span> decLiteral: <span class="built_in">number</span> = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> hexLiteral: <span class="built_in">number</span> = <span class="number">0xf00d</span>;</span><br></pre></td></tr></table></figure><p><strong>字符串：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//支持模板字符串</span></span><br><span class="line"><span class="keyword">let</span> myName: <span class="built_in">string</span> = <span class="string">'Tom'</span>;</span><br><span class="line"><span class="keyword">let</span> sentence: <span class="built_in">string</span> = <span class="string">`Hello, my name is <span class="subst">$&#123;myName&#125;</span>.</span></span><br></pre></td></tr></table></figure><p><strong>void</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//和java一样，void一般用在函数上，表示没有返回值</span></span><br><span class="line"><span class="comment">//放在变量上没什么用，只能将它赋值为 undefined 和 null</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">alertName</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    alert(<span class="string">'My name is Tom'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> unusable: <span class="built_in">void</span> = <span class="literal">undefined</span> || <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p><strong>undefined和null</strong>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//undefined 和 null 是所有类型的子类型</span></span><br><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = u;</span><br></pre></td></tr></table></figure><p><strong>any</strong>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以认为，声明一个变量为任意值之后，对它的任何操作，返回的内容的类型都是任意值。</span></span><br><span class="line"><span class="comment">//和js没啥区别，对重构js有用。</span></span><br><span class="line"><span class="keyword">let</span> myFavoriteNumber: <span class="built_in">any</span> = <span class="string">'seven'</span>;</span><br><span class="line">myFavoriteNumber = <span class="number">7</span>;</span><br></pre></td></tr></table></figure><p><strong>类型推论</strong>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义之后不赋值，推断为any</span></span><br><span class="line"><span class="keyword">let</span> myFavoriteNumber;</span><br><span class="line">myFavoriteNumber = <span class="string">'seven'</span>;</span><br><span class="line">myFavoriteNumber = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myFavoriteNumber = <span class="string">'seven'</span>;</span><br><span class="line">myFavoriteNumber = <span class="number">7</span>;</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="keyword">let</span> myFavoriteNumber: <span class="built_in">string</span> = <span class="string">'seven'</span>;</span><br><span class="line">myFavoriteNumber = <span class="number">7</span>;</span><br></pre></td></tr></table></figure><p><strong>联合类型</strong>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ts在编译的时候不清楚联合类型的变量到底什么类型，只能访问它的所有类型里的共有方法和属性</span></span><br><span class="line"><span class="comment">//toString()是string和number的共有方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getString</span>(<span class="params">something: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> something.toString();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类型检查</span></span><br><span class="line"><span class="keyword">let</span> myFavoriteNumber: <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line">myFavoriteNumber = <span class="string">'seven'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(myFavoriteNumber.length); <span class="comment">// 5</span></span><br><span class="line">myFavoriteNumber = <span class="number">7</span>;</span><br><span class="line"><span class="built_in">console</span>.log(myFavoriteNumber.length); <span class="comment">// 编译时报错</span></span><br></pre></td></tr></table></figure><p><strong>类型断言</strong>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将一个联合类型断言为更具体的类型,这样就不会报错了</span></span><br><span class="line"><span class="comment">//不要理解为类型转换，不能断言一个联合类型中不存在的类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params">something: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((&lt;<span class="built_in">string</span>&gt;something).length) &#123;</span><br><span class="line">        <span class="keyword">return</span> (&lt;<span class="built_in">string</span>&gt;something).length;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> something.toString().length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用类型断言对之进行一个强制的转换</span></span><br><span class="line"><span class="comment">// 一般多使用as jsx里面只能使用这种</span></span><br><span class="line"><span class="keyword">let</span> len1: <span class="built_in">number</span> = (value1 <span class="keyword">as</span> <span class="built_in">string</span>).length;</span><br><span class="line"><span class="keyword">let</span> len2: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;value1).length;</span><br></pre></td></tr></table></figure><p><strong>数组：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里的数组里面数值必须和前面的一样</span></span><br><span class="line"><span class="comment">//支持泛型</span></span><br><span class="line"><span class="keyword">let</span> fibonacci: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> fibonacci: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">//定义时会约束数组一些方法的参数，如下会报参数错误</span></span><br><span class="line"><span class="keyword">let</span> fibonacci: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line">fibonacci.push(<span class="string">'8'</span>);</span><br></pre></td></tr></table></figure><p><strong>元组：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//元组是解决数组只能合并相同类型的方案</span></span><br><span class="line"><span class="comment">//通过索引方式赋值可以只赋值其中某些项，但是当直接对元组类型的变量进行初始化或者赋值的时候,需要提供所有元组类型中指定的项</span></span><br><span class="line"><span class="keyword">let</span> tom: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">'Tom'</span>, <span class="number">25</span>];</span><br><span class="line"><span class="keyword">let</span> tom: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">tom[<span class="number">0</span>] = <span class="string">'Tom'</span>;</span><br><span class="line"><span class="comment">//越界按联合类型处理</span></span><br><span class="line"><span class="keyword">let</span> tom: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">tom = [<span class="string">'Tom'</span>, <span class="number">25</span>];</span><br><span class="line">tom.push(<span class="string">'male'</span>);</span><br></pre></td></tr></table></figure><p><strong>枚举：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认从0开始编号，可手动赋值。</span></span><br><span class="line"><span class="keyword">enum</span> Days &#123;Sun, Mon, Tue, Wed, Thu, Fri, Sat&#125;;</span><br><span class="line"><span class="comment">//编译(可以正向找值，也可以反向找值) </span></span><br><span class="line">Days[Days[<span class="string">"Sun"</span>] = <span class="number">0</span>] = <span class="string">"Sun"</span>;</span><br><span class="line"><span class="keyword">let</span> d: Days = Days.Sun; <span class="comment">//0</span></span><br><span class="line"><span class="keyword">let</span> day: <span class="built_in">string</span> = Days[<span class="number">0</span>]; <span class="comment">//Sun</span></span><br><span class="line"><span class="comment">//手动赋值的枚举项可以不是数字，此时需要使用类型断言来让 tsc 无视类型检查 </span></span><br><span class="line"><span class="keyword">enum</span> Days &#123;Sun = <span class="number">7</span>, Mon, Tue, Wed, Thu, Fri, Sat = &lt;<span class="built_in">any</span>&gt;<span class="string">"S"</span>&#125;;</span><br><span class="line"><span class="comment">//上面都是常数项，还支持计算所得项</span></span><br><span class="line"><span class="comment">//紧接在计算所得项后面的项必须手动赋值</span></span><br><span class="line"><span class="keyword">enum</span> Color &#123;Red, Green, Blue = <span class="string">"blue"</span>.length&#125;;</span><br></pre></td></tr></table></figure><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><blockquote><p>行为抽象，需要由类去实现具体的行为，其实就是规范</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里对label属性的值做一个string的校验</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLabel</span>(<span class="params">labelledObj: &#123; label: <span class="built_in">string</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(labelledObj.label);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myObj = &#123; size: <span class="number">10</span>, label: <span class="string">"Size 10 object"</span> &#125;;</span><br><span class="line">printLabel(myObj);</span><br></pre></td></tr></table></figure><p>我们通过接口来对上面的代码进行一个重写:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> LabelledValue&#123;</span><br><span class="line">    label:<span class="built_in">string</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLabel</span>(<span class="params">labelledObj: LabelledValue</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(labelledObj.label);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 上面声明之后，那么myObj这里就必须要有这个属性</span></span><br><span class="line"><span class="keyword">let</span> myObj = &#123; size: <span class="number">10</span>, label: <span class="string">"Size 10 object"</span> &#125;;</span><br><span class="line">printLabel(myObj);</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//赋值的时候，变量的形状必须和接口的形状保持一致，多一个，少一个都不行</span></span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line">    name: <span class="string">'Tom'</span>,</span><br><span class="line">    age: <span class="number">25</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//支持可选属性，定义可选的属性可以不存在</span></span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>任意类型</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当我们需要一个任意类型时</span></span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">    [propName: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集。A be assignable to B – A是B的子类</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Square &#123;</span><br><span class="line">  color: <span class="built_in">string</span>;</span><br><span class="line">  area: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> SquareConfig &#123;</span><br><span class="line">  color?: <span class="built_in">string</span>;</span><br><span class="line">  width?: <span class="built_in">number</span>;</span><br><span class="line">  [propName: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSquare</span>(<span class="params">config: SquareConfig</span>): <span class="title">Square</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> newSquare = &#123; color: <span class="string">"white"</span>, area: <span class="number">1000</span> &#125;;</span><br><span class="line">  <span class="comment">// 这里判断一下可选属性</span></span><br><span class="line">  <span class="keyword">if</span> (config.color) &#123;</span><br><span class="line">    newSquare.color = config.color;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (config.width) &#123;</span><br><span class="line">    newSquare.area = config.width * config.width;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newSquare;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(createSquare(&#123;&#125;));</span><br><span class="line"><span class="comment">// 如果我们这里不小心把属性名称写错了，但是由于上面有额外的属性检测，这里就不会报错</span></span><br><span class="line"><span class="built_in">console</span>.log(createSquare(&#123; colour: <span class="string">"blue"</span>, width: <span class="number">100</span> &#125;));</span><br><span class="line"><span class="built_in">console</span>.log(createSquare(&#123; color: <span class="string">"yello"</span> &#125;));</span><br></pre></td></tr></table></figure><p><strong>只读属性</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    readonly id: <span class="built_in">number</span>;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">    [propName: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此处第一次给对象赋值时，一定要给id赋值，否则报错</span></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line">    id: <span class="number">89757</span>,</span><br><span class="line">    name: <span class="string">'Tom'</span>,</span><br><span class="line">    gender: <span class="string">'male'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//赋值会报错</span></span><br><span class="line">tom.id = <span class="number">9527</span>;</span><br></pre></td></tr></table></figure><blockquote><p><code>ts</code>里面还有一种只读的数组泛型:</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a: <span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> ro: ReadonlyArray&lt;<span class="built_in">number</span>&gt; = a;</span><br><span class="line"><span class="comment">// 只读的数组泛型,下面这些操作都会犯罪</span></span><br><span class="line">ro[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">ro.push(<span class="number">5</span>);</span><br><span class="line"><span class="comment">// 正确操作回去可以使用类型断言</span></span><br><span class="line">a = ro <span class="keyword">as</span> <span class="built_in">number</span>[]</span><br></pre></td></tr></table></figure><p><strong>可索引类型的接口：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> StringArray &#123;</span><br><span class="line">  [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myArray: StringArray;</span><br><span class="line">myArray = [<span class="string">"Bob"</span>, <span class="string">"Fred"</span>];</span><br><span class="line"><span class="keyword">let</span> myStr: <span class="built_in">string</span> = myArray[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">  breed: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> NotOkay &#123;</span><br><span class="line">  [x: <span class="built_in">number</span>]: Dog;</span><br><span class="line">  [x: <span class="built_in">string</span>]: Animal;</span><br><span class="line">  <span class="comment">//数字类型索引的索引值一定要是字符串索引类型索引值的子类型</span></span><br><span class="line">  <span class="comment">//因为当用number做索引时，js会将其转化为string，然后再去做索引</span></span><br><span class="line">  <span class="comment">// 这个地方按照下面写会报错，因为数字签名(Animal)并不是字符串签名(Dog)的子类型</span></span><br><span class="line">  <span class="comment">// [x: string]: Dog;</span></span><br><span class="line">  <span class="comment">// [x: number]: Animal;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置一个只读类型的索引签名:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ReadonlyStringArray &#123;</span><br><span class="line">    readonly [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myArray: ReadonlyStringArray = [<span class="string">"Alice"</span>, <span class="string">"Bob"</span>];</span><br><span class="line">myArray[<span class="number">2</span>] = <span class="string">"Mallory"</span>; <span class="comment">// error!</span></span><br></pre></td></tr></table></figure><h3 id="class类型"><a href="#class类型" class="headerlink" title="class类型"></a>class类型</h3><blockquote><p>规则和java一样</p></blockquote><blockquote><p>这里要注意一下：es6中实例属性的新写法 – 实例属性除了定义在<code>constructor()</code>方法里面的<code>this</code>上面，也可以定义在类的最顶层。</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造器接口</span></span><br><span class="line"><span class="keyword">interface</span> ClockInterface &#123;</span><br><span class="line">  <span class="comment">// 这两个类型是实例类型</span></span><br><span class="line">  currentTime: <span class="built_in">Date</span>;</span><br><span class="line">  setTime(d: <span class="built_in">Date</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例接口,用构造器签名(signatrue)定义的一个接口</span></span><br><span class="line"><span class="keyword">interface</span> ClockContructor &#123;</span><br><span class="line">  <span class="keyword">new</span> (hour: <span class="built_in">number</span>, minute: <span class="built_in">number</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果这个地方去继承ClockContructor的话会报error</span></span><br><span class="line"><span class="comment">// 当类实现一个接口时，只对实例部分进行类型检查，而constructor存在于静态部分。</span></span><br><span class="line"><span class="keyword">class</span> Clock <span class="keyword">implements</span> ClockInterface &#123;</span><br><span class="line">  currentTime: <span class="built_in">Date</span>;</span><br><span class="line">  setTime(d: <span class="built_in">Date</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.currentTime = d;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可是如果我们想去使用一个实例类型的话，代码是可以这样写的:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此处的tick()不用进行类型检查，在类中为静态方法（class.prototype）</span></span><br><span class="line"><span class="keyword">interface</span> ClockConstructor &#123;</span><br><span class="line">    <span class="keyword">new</span> (hour: <span class="built_in">number</span>, minute: <span class="built_in">number</span>): ClockInterface;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> ClockInterface &#123;</span><br><span class="line">    tick(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createClock</span>(<span class="params">ctor: ClockConstructor, hour: <span class="built_in">number</span>, minute: <span class="built_in">number</span></span>): <span class="title">ClockInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ctor(hour, minute);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> DigitalClock <span class="keyword">implements</span> ClockInterface &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">    tick() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"beep beep"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> AnalogClock <span class="keyword">implements</span> ClockInterface &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">    tick() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"tick tock"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> digital = createClock(DigitalClock, <span class="number">10</span>, <span class="number">15</span>);</span><br><span class="line"><span class="keyword">let</span> analog = createClock(AnalogClock, <span class="number">5</span>, <span class="number">38</span>);</span><br></pre></td></tr></table></figure><p><strong>接口继承：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Shape &#123;</span><br><span class="line">  color: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> PenStroke &#123;</span><br><span class="line">  penWidth: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Square <span class="keyword">extends</span> Shape, PenStroke &#123;</span><br><span class="line">  sideLength: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 先这样继承下来，后续实例对多个接口变量进行访问</span></span><br><span class="line"><span class="keyword">let</span> square = &#123;&#125; <span class="keyword">as</span> Square;</span><br><span class="line">square.color = <span class="string">"blue"</span>;</span><br><span class="line">square.sideLength = <span class="number">12</span>;</span><br><span class="line">square.penWidth = <span class="number">15</span>;</span><br></pre></td></tr></table></figure><p><strong>混合类型(接口既可以当成对象使用，也可以当函数用):</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Counter &#123;</span><br><span class="line">  <span class="comment">// 函数类型，有个start参数，返回一个string类型</span></span><br><span class="line">  (start: <span class="built_in">number</span>): <span class="built_in">string</span>;</span><br><span class="line">  <span class="comment">//   一些额外的属性</span></span><br><span class="line">  interval: <span class="built_in">number</span>;</span><br><span class="line">  reset():<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义一个函数，返回一个Counter类型的接口</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCounter</span>(<span class="params"></span>):<span class="title">Counter</span></span>&#123;</span><br><span class="line">  <span class="keyword">let</span> counter = (<span class="function"><span class="keyword">function</span>(<span class="params">star:<span class="built_in">number</span></span>)</span>&#123;&#125;) <span class="keyword">as</span> Counter;</span><br><span class="line">  counter.interval = <span class="number">123</span>;</span><br><span class="line">  counter.reset = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> counter;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c = getCounter();</span><br><span class="line"><span class="comment">// 因为这就是个这样的函数</span></span><br><span class="line">c(<span class="number">10</span>);</span><br><span class="line"><span class="comment">// 它也可以当成对象使用</span></span><br><span class="line">c.reset();</span><br><span class="line">c.interval = <span class="number">5.0</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;JavaScript 的一个超集，主要提供了&lt;strong&gt;类型系统&lt;/strong&gt;和&lt;strong&gt;对 ES6 的支持&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;基础类型&quot;&gt;&lt;a href=&quot;#基础类型&quot; class
      
    
    </summary>
    
    
    
      <category term="ts" scheme="http://yoursite.com/tags/ts/"/>
    
  </entry>
  
  <entry>
    <title>网易云开发日志 忘记第几天了</title>
    <link href="http://yoursite.com/2019/09/29/%E7%BD%91%E6%98%93%E4%BA%91%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97-%E5%BF%98%E8%AE%B0%E7%AC%AC%E5%87%A0%E5%A4%A9%E4%BA%86/"/>
    <id>http://yoursite.com/2019/09/29/网易云开发日志-忘记第几天了/</id>
    <published>2019-09-29T08:36:20.000Z</published>
    <updated>2019-10-03T12:07:46.611Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="彼岸花开，蓝蝶依肩。"><a href="#彼岸花开，蓝蝶依肩。" class="headerlink" title="彼岸花开，蓝蝶依肩。"></a>彼岸花开，蓝蝶依肩。</h3></blockquote><p>(1)</p><blockquote><p>后端返回的数据一般都是直接new Date()的Long类型时间。需要自己手写转换工具。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 时间格式化工具</span></span><br><span class="line"><span class="comment"> * 把Long类型的1527672756454日期还原yyyy-MM-dd格式日期</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">dateFormat</span>(<span class="params">longTypeDate</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> dateTypeDate = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">date.setTime(longTypeDate);</span><br><span class="line">dateTypeDate += date.getFullYear(); <span class="comment">//年</span></span><br><span class="line">dateTypeDate += <span class="string">"-"</span> + getMonth(date); <span class="comment">//月</span></span><br><span class="line">dateTypeDate += <span class="string">"-"</span> + getDay(date); <span class="comment">//日</span></span><br><span class="line"><span class="keyword">return</span> dateTypeDate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回 01-12 的月份值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMonth</span>(<span class="params">date</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> month = <span class="string">""</span>;</span><br><span class="line">month = date.getMonth() + <span class="number">1</span>; <span class="comment">//getMonth()得到的月份是0-11</span></span><br><span class="line"><span class="keyword">if</span>(month&lt;<span class="number">10</span>)&#123;</span><br><span class="line">month = <span class="string">"0"</span> + month;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> month;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回01-30的日期</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDay</span>(<span class="params">date</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> day = <span class="string">""</span>;</span><br><span class="line">day = date.getDate();</span><br><span class="line"><span class="keyword">if</span>(day&lt;<span class="number">10</span>)&#123;</span><br><span class="line">day = <span class="string">"0"</span> + day;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> day;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)</p><p><code>es6</code>中<code>import</code>和<code>export</code>的一些细节</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// counter.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;a&#125; <span class="keyword">from</span> <span class="string">'./my'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'谕'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// my.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'宋'</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> a = <span class="string">'我喜欢你啊，你喜欢我吗'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'俊'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line"><span class="comment">//宋</span></span><br><span class="line"><span class="comment">//俊</span></span><br><span class="line"><span class="comment">//谕</span></span><br><span class="line"><span class="comment">//我喜欢你啊，你喜欢我吗</span></span><br></pre></td></tr></table></figure><p>看看编译后的<code>counter.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#----------------mod start----------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="function"><span class="keyword">function</span> (<span class="params">module, exports</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">window</span>[<span class="string">"60ae5ba7"</span>] = &#123;&#125;;</span><br><span class="line">    </span><br><span class="line"><span class="meta">    "use strict"</span>;</span><br><span class="line">    <span class="comment">// my.js</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'宋'</span>);</span><br><span class="line">    <span class="built_in">window</span>[<span class="string">"60ae5ba7"</span>].a = <span class="string">'我喜欢你，你喜欢我吗'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'俊'</span>);</span><br><span class="line">    </span><br><span class="line">&#125;(&#123;<span class="attr">exports</span>:&#123;&#125;&#125;, &#123;&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//#----------------mod end----------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#----------------mod start----------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="function"><span class="keyword">function</span> (<span class="params">module, exports</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">window</span>[<span class="string">"3d4fdd69"</span>] = &#123;&#125;;</span><br><span class="line">    </span><br><span class="line"><span class="meta">    "use strict"</span>;</span><br><span class="line">    <span class="comment">// counter.js</span></span><br><span class="line">    <span class="keyword">var</span> my_1 = <span class="built_in">window</span>[<span class="string">"60ae5ba7"</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'谕'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(my_1.a);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把console.log(a)去掉</span></span><br><span class="line"><span class="comment">// counter.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;a&#125; <span class="keyword">from</span> <span class="string">'./my'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'谕'</span>);</span><br><span class="line"><span class="comment">// console.log(a);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line"><span class="comment">//谕</span></span><br></pre></td></tr></table></figure><p>为什么只输出一句了？</p><blockquote><p>ES6的模块加载机制是“静态加载”，执行import命令是在编译期间完成，生成一个静态引用。等到需要的时候，再到模块里面去取值。</p></blockquote><p>那为什么之前的顺序是宋俊谕我喜欢你，你喜欢我吗，而不是先输出谕呢？</p><blockquote><p>仅为猜测：在编译的时候，发现了后面有使用到a的地方，就在运行时遇到import的地方直接执行了模块的代码。</p></blockquote><p>(3)</p><blockquote><p>WARNING in asset size limit: The following asset(s) exceed the recommended size limit (244 KiB).</p></blockquote><p>解决</p><p>方式一  webpack中添加如下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">performance: &#123;</span><br><span class="line">hints:false   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式二 webpack中添加如下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">performance: &#123;</span><br><span class="line">    hints: &quot;warning&quot;, // 枚举</span><br><span class="line">    maxAssetSize: 30000000, // 整数类型（以字节为单位）</span><br><span class="line">    maxEntrypointSize: 50000000, // 整数类型（以字节为单位）</span><br><span class="line">    assetFilter: function(assetFilename) &#123;</span><br><span class="line">    // 提供资源文件名的断言函数</span><br><span class="line">    return assetFilename.endsWith(&apos;.css&apos;) || assetFilename.endsWith(&apos;.js&apos;);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;彼岸花开，蓝蝶依肩。&quot;&gt;&lt;a href=&quot;#彼岸花开，蓝蝶依肩。&quot; class=&quot;headerlink&quot; title=&quot;彼岸花开，蓝蝶依肩。&quot;&gt;&lt;/a&gt;彼岸花开，蓝蝶依肩。&lt;/h3&gt;&lt;/blockquote&gt;
&lt;p&gt;(1)&lt;/p&gt;
&lt;bl
      
    
    </summary>
    
    
    
      <category term="dva" scheme="http://yoursite.com/tags/dva/"/>
    
  </entry>
  
  <entry>
    <title>JSX限制以及解决</title>
    <link href="http://yoursite.com/2019/09/28/JSX%E9%99%90%E5%88%B6%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3/"/>
    <id>http://yoursite.com/2019/09/28/JSX限制以及解决/</id>
    <published>2019-09-28T08:17:33.000Z</published>
    <updated>2019-09-28T08:31:40.268Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JSX使用的限制</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没有 div 包裹会报错</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> title = (</span><br><span class="line">  &lt;h1&gt;Parallel elements demo&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">  &lt;p&gt;Content&lt;/</span>p&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(title, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</span><br></pre></td></tr></table></figure><blockquote><p>突破JSX标签的限制</p></blockquote><p><strong>返回数组</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">'Adams'</span>, <span class="string">'Bill'</span>, <span class="string">'Charlie'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Arr = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;p key=&#123;index&#125;&gt;&#123;item&#125;&lt;/p&gt;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;Arr /&gt;, document.getElementById('root'));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;JSX使用的限制&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>每一天都很喜欢你</title>
    <link href="http://yoursite.com/2019/09/28/%E6%88%91%E6%AF%8F%E4%B8%80%E5%A4%A9%E9%83%BD%E5%BE%88%E5%96%9C%E6%AC%A2%E4%BD%A0/"/>
    <id>http://yoursite.com/2019/09/28/我每一天都很喜欢你/</id>
    <published>2019-09-28T00:50:07.000Z</published>
    <updated>2019-09-28T03:13:11.875Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="我喜欢你-从程序员嘴里说出来是什么样子的，哈哈哈哈哈哈，最藏情的告白"><a href="#我喜欢你-从程序员嘴里说出来是什么样子的，哈哈哈哈哈哈，最藏情的告白" class="headerlink" title="我喜欢你 从程序员嘴里说出来是什么样子的，哈哈哈哈哈哈，最藏情的告白"></a><strong>我喜欢你 从程序员嘴里说出来是什么样子的，哈哈哈哈哈哈，最藏情的告白</strong></h3></blockquote><p><strong>基础</strong></p><blockquote><p>字符串和ascii码之间的转换</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符串转ascii码，用charCodeAt();</span></span><br><span class="line"><span class="comment">//ascii码转字符串，用fromCharCode();</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">"A"</span>;</span><br><span class="line"><span class="keyword">let</span> code = str.charCodeAt();</span><br><span class="line"><span class="keyword">let</span> str2 = <span class="built_in">String</span>.fromCharCode(code);</span><br></pre></td></tr></table></figure><blockquote><p>十进制和其它机制之间的转换</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//其它进制转十进制，用</span></span><br><span class="line"># parseInt(string, radix-如果该参数小于 2 或者大于 36，则parseInt() 将返回 NaN);</span><br><span class="line"># 如果未设置radix或为0，则会根据string来判断要解析的数字的基数;</span><br><span class="line"><span class="comment">//十进制转其它进制，用</span></span><br><span class="line"># NumberObject.toString(radix-默认为10);</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">130</span>;</span><br><span class="line">a.toSting(<span class="number">2</span>);<span class="comment">//十进制 -&gt; 二进制</span></span><br><span class="line">a.toString(<span class="number">8</span>)<span class="comment">//十进制 -&gt; 八进制</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">10010110</span>;</span><br><span class="line"><span class="built_in">parseInt</span>(b, <span class="number">2</span>);<span class="comment">//二进制 -&gt; 10进制</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="number">226</span>;</span><br><span class="line"><span class="built_in">parseInt</span>(c, <span class="number">8</span>);<span class="comment">//8进制 -&gt; 10进制</span></span><br></pre></td></tr></table></figure><blockquote><p>字符串和二进制流的相互转换</p></blockquote><p><strong>将二进制字符串转换成Unicode字符串</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binaryToStr</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">let</span> result = [];</span><br><span class="line">     <span class="keyword">let</span> list = str.split(<span class="string">" "</span>);</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;list.length;i++)&#123;</span><br><span class="line">           <span class="keyword">let</span> item = list[i];</span><br><span class="line">           <span class="keyword">let</span> asciiCode = <span class="built_in">parseInt</span>(item,<span class="number">2</span>);</span><br><span class="line">           <span class="keyword">let</span> charValue = <span class="built_in">String</span>.fromCharCode(asciiCode);</span><br><span class="line">           result.push(charValue);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result.join(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>将字符串转换为二进制，中间用空格隔开</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strToBinary</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">let</span> list = str.split(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;list.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i != <span class="number">0</span>)&#123;</span><br><span class="line">            result.push(<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> item = list[i];</span><br><span class="line">        <span class="keyword">let</span> binaryStr = item.charCodeAt().toString(<span class="number">2</span>);</span><br><span class="line">        result.push(binaryStr);</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> result.join(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">strToBinary(<span class="string">"我喜欢你"</span>)</span><br><span class="line"><span class="string">"110001000010001 101010110011100 110101100100010 100111101100000"</span></span><br></pre></td></tr></table></figure><p><strong>二进制转换为十六进制</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">编码</span><br><span class="line"><span class="keyword">let</span> code = strToBinary(<span class="string">"我喜欢你"</span>).split(<span class="string">" "</span>).map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(item, <span class="number">2</span>).toString(<span class="number">16</span>);</span><br><span class="line">&#125;).join(<span class="string">" "</span>);</span><br><span class="line"><span class="string">"6211 559c 6b22 4f60"</span></span><br><span class="line">解码</span><br><span class="line"><span class="keyword">let</span> char = code.split(<span class="string">" "</span>).map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(item, <span class="number">16</span>).toString(<span class="number">2</span>);</span><br><span class="line">&#125;).join(<span class="string">" "</span>)</span><br><span class="line">binaryToStr(char);</span><br><span class="line"><span class="comment">//"我喜欢你"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//你喜欢人的人的名字</span></span><br><span class="line">比如</span><br><span class="line"><span class="string">"s"</span>.charCodeAt();</span><br><span class="line"><span class="string">"j"</span>.charCodeAt();</span><br><span class="line"><span class="string">"y"</span>.charCodeAt();</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ 6211 559c 6b22 4f60-115-106-121</span><br></pre></td></tr></table></figure><p>( ⊙ o ⊙ )！，好巧啊，这不是我的<code>qq</code>密码吗</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;我喜欢你-从程序员嘴里说出来是什么样子的，哈哈哈哈哈哈，最藏情的告白&quot;&gt;&lt;a href=&quot;#我喜欢你-从程序员嘴里说出来是什么样子的，哈哈哈哈哈哈，最藏情的告白&quot; class=&quot;headerlink&quot; title=&quot;我喜欢你 从程序员嘴里
      
    
    </summary>
    
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>变形transform</title>
    <link href="http://yoursite.com/2019/09/27/%E5%8F%98%E5%BD%A2transform/"/>
    <id>http://yoursite.com/2019/09/27/变形transform/</id>
    <published>2019-09-27T11:17:53.000Z</published>
    <updated>2019-09-28T02:50:28.583Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>几个常用的transform</p></blockquote><p><strong>这些属性都是不影响原来的布局的。</strong></p><p><strong>rotate()</strong></p><blockquote><p>通过指定的角度参数使元素相对原点进行旋转，正值则顺时针。</p></blockquote><p><img src="https://thinkerhope.github.io/2019/09/27/%E5%8F%98%E5%BD%A2transform/t1.png" alt></p><p><strong>scale()</strong></p><blockquote><p>让元素根据中心原点对对象进行缩放。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">scale</span>(<span class="selector-tag">x</span>,<span class="selector-tag">y</span>)</span><br><span class="line"><span class="selector-tag">scale</span>(<span class="selector-tag">x</span>)</span><br><span class="line"><span class="selector-tag">scale</span>(<span class="selector-tag">y</span>)</span><br></pre></td></tr></table></figure><p><strong>translate()</strong> </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:translate(x</span>,<span class="selector-tag">y</span>)</span><br><span class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:translate(x)</span></span><br><span class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:translate(y)</span></span><br></pre></td></tr></table></figure><blockquote><p>关于translate百分比的疑惑</p></blockquote><p>实验一下就清楚了</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">border</span>: <span class="number">40px</span> solid red;</span><br><span class="line"><span class="attribute">border-width</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">padding-left</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line"><span class="attribute">background-color</span>:yellow;</span><br><span class="line"><span class="comment">/* Rotate div */</span></span><br><span class="line"><span class="attribute">transform</span>:<span class="built_in">translate</span>(50%);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">120px</span>;</span><br><span class="line"><span class="attribute">display</span>: inline-block;</span><br><span class="line"><span class="attribute">background</span>:blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class="box2"&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class="box1"&gt;Hello World&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><img src="https://thinkerhope.github.io/2019/09/27/%E5%8F%98%E5%BD%A2transform/tr02.png" alt></p><p>可见，百分比是相对自身的长宽（padding + width + border）</p><p><strong>transform-origin</strong></p><blockquote><p>默认情况之下，其中心点是居于元素X轴和Y轴的50%处。</p></blockquote><p><img src="https://thinkerhope.github.io/2019/09/27/%E5%8F%98%E5%BD%A2transform/r3.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;几个常用的transform&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;这些属性都是不影响原来的布局的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;rotate()&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通
      
    
    </summary>
    
    
    
      <category term="css3" scheme="http://yoursite.com/tags/css3/"/>
    
  </entry>
  
  <entry>
    <title>hooks学习</title>
    <link href="http://yoursite.com/2019/09/26/hooks%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2019/09/26/hooks学习/</id>
    <published>2019-09-26T12:25:39.000Z</published>
    <updated>2019-09-27T06:10:50.193Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="Thinking-In-Life-Why-We-are-Living"><a href="#Thinking-In-Life-Why-We-are-Living" class="headerlink" title="Thinking In Life Why We are Living."></a>Thinking In Life Why We are Living.</h3></blockquote><blockquote><p>Hooks是React 16.8新加特性，这篇博客记录于v16.9.0。不能在class组件里使用Hooks，但是你可以通过使用state和React的一些特性而不用写class。</p></blockquote><p><strong>何时使用</strong></p><p>当你写函数组件时，发现自己需要使用state的时候。</p><h4 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h4><p><strong>无Hooks的无状态组件</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Example = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &lt;div /&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Hooks使你可以实现可复用的状态组件</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>useState(initial)</code>只接受一个参数，即<code>count</code>的初始值。</p><p>返回值是一个包含当前组件的state和一个更新它的函数的数组，然后利用解构赋值赋值给我们定义的变量名(名字我们自己起的)。</p><p>如果需要存储多个值在<code>state</code>里，需要调用<code>useState()</code>多次。</p><p><code>count</code>是我们定义的<code>state</code>属性，可以是任何名字。类似于<code>class</code>组件里的<code>this.state.count</code>；</p><p><code>setCount</code>是用来更新<code>count</code>的，可以是任何名字。类似于class组件里的<code>this.setState()</code>。</p><blockquote><p>定义多个</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ExampleWithManyStates</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [age, setAge] = useState(<span class="number">42</span>);</span><br><span class="line">  <span class="keyword">const</span> [fruit, setFruit] = useState(<span class="string">'banana'</span>);</span><br><span class="line">  <span class="keyword">const</span> [todos, setTodos] = useState([&#123; <span class="attr">text</span>: <span class="string">'Learn Hooks'</span> &#125;]);</span><br></pre></td></tr></table></figure><h4 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h4><blockquote><p>类似于<code>class</code>组件中<code>componentDidMount</code>和 <code>componentDidUpdate</code></p></blockquote><h6 id="分两种情况来学习useEffect"><a href="#分两种情况来学习useEffect" class="headerlink" title="分两种情况来学习useEffect"></a>分两种情况来学习useEffect</h6><p>（1）第一种是effect不需要消除</p><p>有的时候我们希望产生同一个effect（比如请求），不管是Didmount还是DidUpdate，如果是class组件，要在<code>componentDidMount</code>和 <code>componentDidUpdate</code>两个函数里写同样的代码，没有一个统一的方法。而<code>Hooks</code>提供了<code>useEffect</code>完成了这一需求。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>类似于</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;<span class="keyword">this</span>.state.count&#125;</span> times`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidUpdate() &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;<span class="keyword">this</span>.state.count&#125;</span> times`</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里要注意，函数式组件和class组件渲染的不同，函数组件是调用函数（相当于class组件中的render()函数）所以每次更新函数式组件都要重新调用组件函数，而class组件一直存在内存里(只要不卸载它)(new的一个对象)，每次更新只要调用render()就行了。</p></blockquote><p><strong>解释</strong></p><p>默认，每次更新或者第一次<code>render</code>都会调用<code>useEffect</code>里的回调。</p><p>因为在同一个函数作用域链里，所以，<code>useEffect</code>能直接访问<code>useState()</code>里的变量。</p><p>（2）还有一种是需要在组件卸载的时候清除effect</p><p><strong>class组件的写法</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line">    ChatAPI.subscribeToFriendStatus(</span><br><span class="line">      <span class="keyword">this</span>.props.friend.id,</span><br><span class="line">      <span class="keyword">this</span>.handleStatusChange</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    ChatAPI.unsubscribeFromFriendStatus(</span><br><span class="line">      <span class="keyword">this</span>.props.friend.id,</span><br><span class="line">      <span class="keyword">this</span>.handleStatusChange</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>Hooks的写法</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">handleStatusChange</span>(<span class="params">status</span>) </span>&#123;</span><br><span class="line">     setIsOnline(status.isOnline);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);</span><br><span class="line">   <span class="comment">// Specify how to clean up after this effect:</span></span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">cleanup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);</span><br><span class="line">   &#125;;</span><br><span class="line">  <span class="comment">//return () =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);</span></span><br><span class="line">  <span class="comment">//&#125;</span></span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><p><strong>解释</strong></p><p>cleanup函数名并不是闭包必须的，可以返回一个匿名/箭头函数。</p><p>cleanup执行时机：每次组件卸载(unmount)都会执行。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Mount with &#123; friend: &#123; id: 100 &#125; &#125; props</span></span><br><span class="line">ChatAPI.subscribeToFriendStatus(<span class="number">100</span>, handleStatusChange);     <span class="comment">// Run first effect</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Update with &#123; friend: &#123; id: 200 &#125; &#125; props</span></span><br><span class="line">ChatAPI.unsubscribeFromFriendStatus(<span class="number">100</span>, handleStatusChange); <span class="comment">// Clean up previous effect</span></span><br><span class="line">ChatAPI.subscribeToFriendStatus(<span class="number">200</span>, handleStatusChange);     <span class="comment">// Run next effect</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Update with &#123; friend: &#123; id: 300 &#125; &#125; props</span></span><br><span class="line">ChatAPI.unsubscribeFromFriendStatus(<span class="number">200</span>, handleStatusChange); <span class="comment">// Clean up previous effect</span></span><br><span class="line">ChatAPI.subscribeToFriendStatus(<span class="number">300</span>, handleStatusChange);     <span class="comment">// Run next effect</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Unmount</span></span><br><span class="line">ChatAPI.unsubscribeFromFriendStatus(<span class="number">300</span>, handleStatusChange); <span class="comment">// Clean up last effect</span></span><br></pre></td></tr></table></figure><p><strong>useEffect的第二个参数</strong></p><p>class组件写法</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">componentDidUpdate(prevProps, prevState) &#123;</span><br><span class="line">  <span class="keyword">if</span> (prevState.count !== <span class="keyword">this</span>.state.count) &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;<span class="keyword">this</span>.state.count&#125;</span> times`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hooks写法</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">&#125;, [count]); <span class="comment">// Only re-run the effect if count changes</span></span><br></pre></td></tr></table></figure><p>两者效果是一样的。</p><p><strong>注意</strong></p><blockquote><p>数组里的比较使用 === 运算符，只要数组一项改变，就会重新执行<code>useEffect()</code>（对有<code>cleanup</code>的<code>useEffect</code>也同样有效）</p></blockquote><p>如果你只需要在<code>mount</code>和<code>unmount</code>时只执行一次<code>useEffect</code>，传入<code>[]</code>空数组。</p><h4 id="题外"><a href="#题外" class="headerlink" title="题外"></a>题外</h4><p><code>Babel</code>默认只转换新的<code>JavaScript</code>句法（<code>syntax</code>），而不转换新的<code>API</code>，比如<code>Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise</code>等全局对象，以及一些定义在全局对象上的方法（比如<code>Object.assign</code>）都不会转码。而且像<code>import</code>和<code>export</code>这两个命令现在在任何浏览器中都是不支持的, 同时babel也无法将其转换为浏览器支持的ES5。</p><p>原因在于:<br><code>babel</code>只是个翻译，假设<code>a.js</code> 里 <code>import</code> 了 <code>b.js</code>, 对<code>a.js</code>进行转码，只是翻译了<code>a.js</code>，并不会把<code>b.js</code>的内容给读取合并进来, 如果想在最终的某一个<code>js</code>里，包含 <code>a.js</code>，<code>b.js</code> 的代码，那就需要用到打包工具。(哎，写个<code>demo</code>都要用<code>webpack</code>的嘛)</p><p>配置<code>webpack</code>的一些坑</p><p><strong>Error Decoder</strong></p><blockquote><p><strong>Target container is not a DOM element.</strong></p></blockquote><p>如果要手动引入标签，要把<code>bundle.js</code>放在<code>ReactDOM.render(&lt;MyComponent /&gt;, DOMContainer);</code>后面。</p><p><strong>打包的时候出现找不到react、react-dom模块</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save react</span><br><span class="line">$ npm install --save react-dom</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;Thinking-In-Life-Why-We-are-Living&quot;&gt;&lt;a href=&quot;#Thinking-In-Life-Why-We-are-Living&quot; class=&quot;headerlink&quot; title=&quot;Thinking In
      
    
    </summary>
    
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
      <category term="Hooks" scheme="http://yoursite.com/tags/Hooks/"/>
    
  </entry>
  
  <entry>
    <title>react学习 02</title>
    <link href="http://yoursite.com/2019/09/26/react%E5%AD%A6%E4%B9%A0-02/"/>
    <id>http://yoursite.com/2019/09/26/react学习-02/</id>
    <published>2019-09-25T23:08:08.000Z</published>
    <updated>2019-09-26T12:29:36.102Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="待雾散开，自然能看到想要的风景。"><a href="#待雾散开，自然能看到想要的风景。" class="headerlink" title="待雾散开，自然能看到想要的风景。"></a>待雾散开，自然能看到想要的风景。</h3></blockquote><p>我们都知道，<code>JSX</code>是<code>React.createElement(component, props, ...children)</code>的语法糖。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> React.createElement(<span class="string">'div'</span>, <span class="literal">null</span>, <span class="string">`Hello <span class="subst">$&#123;<span class="keyword">this</span>.props.toWhat&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  React.createElement(Hello, &#123;<span class="attr">toWhat</span>: <span class="string">'World'</span>&#125;, <span class="literal">null</span>),</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>Diff算法</p></blockquote><p><strong>当组件的root为不同类型的diff</strong></p><p>diffing如下</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;Counter /&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;span&gt;</span></span><br><span class="line"><span class="regexp">  &lt;Counter /</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/span&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;Counter /&gt;</code> 会被卸载并且它的<code>state</code>会被销毁</p><p><strong>同类型的DOM元素比较</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=<span class="string">"before"</span> title=<span class="string">"stuff"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;div className=<span class="string">"after"</span> title=<span class="string">"stuff"</span> /&gt;</span><br></pre></td></tr></table></figure><p><code>React</code>只改变<code>className</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&#123;&#123;<span class="attr">color</span>: <span class="string">'red'</span>, <span class="attr">fontWeight</span>: <span class="string">'bold'</span>&#125;&#125; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;div style=&#123;&#123;<span class="attr">color</span>: <span class="string">'green'</span>, <span class="attr">fontWeight</span>: <span class="string">'bold'</span>&#125;&#125; /&gt;</span><br></pre></td></tr></table></figure><p><code>React</code>也只改变<code>color</code></p><p><strong>同类型的React组件</strong></p><p><code>React</code>不会卸载组件(即同一个<code>JS instance</code>)，<code>React</code>会通过更新<code>props</code>去匹配新的DOM元素，之后调用<code>componentWillReceiveProps()</code> and <code>componentWillUpdate()</code>。</p><p><strong>在Children中递归</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li&gt;first&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  &lt;li&gt;second&lt;/</span>li&gt;</span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;ul&gt;</span></span><br><span class="line"><span class="regexp">  &lt;li&gt;first&lt;/</span>li&gt;</span><br><span class="line">  &lt;li&gt;second&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  &lt;li&gt;third&lt;/</span>li&gt;</span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br></pre></td></tr></table></figure><p><code>React</code>能匹配<code>first</code>和<code>second</code>，并且保证这两棵子树的完整，只是插入<code>third</code>子树。</p><p>试想一下，如果<code>third</code>在<code>first</code>之前插入，<code>React</code>不会考虑<code>first</code>和<code>second</code>的完整性，而是改变每一个子节点。How a bad performance !</p><h3 id="Key"><a href="#Key" class="headerlink" title="Key"></a>Key</h3><blockquote><p>key用来解决上面的问题</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li key=<span class="string">"first"</span>&gt;first&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  &lt;li key="second"&gt;second&lt;/</span>li&gt;</span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;ul&gt;</span></span><br><span class="line"><span class="regexp">  &lt;li key="third"&gt;third&lt;/</span>li&gt;</span><br><span class="line">  &lt;li key=<span class="string">"first"</span>&gt;first&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  &lt;li key="second"&gt;second&lt;/</span>li&gt;</span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br></pre></td></tr></table></figure><p>​p><h3 id="Render-Props"><a href="#Render-Props" class="headerlink" title="Render Props"></a>Render Props</h3><blockquote><p>利用render props解决组件复用问题</p></blockquote><p>一个简单的应用场景</p><p>需要记录鼠标移动的位置，并用<code>p标签</code>显示出来。</p><p>一般会直接封装一个<code>Mouse</code>组件用来记录鼠标的位置并且保存在state状态。并且通过<code>this.state</code>在<code>p标签</code>中显示。直接在<code>MouseTracker</code>(父组件中调用就可以了)。</p><p>但这并没有实现真正的封装，当我们新增业务需求的时候，比如需要随鼠标渲染出一只猫的<code>image</code>，创建一个<code>Cat组件</code>。把<code>Cat</code>组件放在Mouse组件的render()方法里，通过传入<code>this.state</code>来获取鼠标位置渲染出<code>image</code>。这样就失去复用的的意义了，如果要渲染Dog，Pig，那么每次都要重新创建Mouse组件，<code>MouseWithCat</code>、<code>MouseWithPig</code>、<code>MouseWithDog</code>。</p><blockquote><p>利用render属性，可以实现动态渲染。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> mouse = <span class="keyword">this</span>.props.mouse;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;img src=<span class="string">"/cat.jpg"</span> style=&#123;&#123; <span class="attr">position</span>: <span class="string">'absolute'</span>, <span class="attr">left</span>: mouse.x, <span class="attr">top</span>: mouse.y &#125;&#125; /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mouse</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.handleMouseMove = <span class="keyword">this</span>.handleMouseMove.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleMouseMove(event) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      x: event.clientX,</span><br><span class="line">      y: event.clientY</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div style=&#123;&#123; <span class="attr">height</span>: <span class="string">'100%'</span> &#125;&#125; onMouseMove=&#123;<span class="keyword">this</span>.handleMouseMove&#125;&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.props.render(<span class="keyword">this</span>.state)&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class MouseTracker extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;h1&gt;Move the mouse around!&lt;/</span>h1&gt;</span><br><span class="line">        &lt;Mouse render=&#123;mouse =&gt; (</span><br><span class="line">          &lt;Cat mouse=&#123;mouse&#125; /&gt;</span><br><span class="line">        )&#125;/&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><p><strong>(1) render Props的属性名不强制规定为render</strong></p><p><strong>(2) children prop也能实现</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Mouse&gt;</span><br><span class="line">  &#123;mouse =&gt; (</span><br><span class="line">    &lt;p&gt;The mouse position is &#123;mouse.x&#125;, &#123;mouse.y&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  )&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Mouse&gt;</span><br></pre></td></tr></table></figure><p>(3) 小心用render属性</p><p>因为render属性是个函数，向下面这样写就很不好</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Mouse render=&#123;mouse =&gt; (</span><br><span class="line">         &lt;Cat mouse=&#123;mouse&#125; /&gt;</span><br><span class="line">       )&#125;/&gt;</span><br></pre></td></tr></table></figure><p>每次Mouse组件重新渲染的时候都会重新创建render函数。</p><p>将render函数作为组件实例方法就行了。(组件一般都会一直在内存里)</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MouseTracker</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  renderTheCat(mouse) &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;Cat mouse=&#123;mouse&#125; /&gt;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Move the mouse around!&lt;/h1&gt;</span><br><span class="line">        &lt;Mouse render=&#123;this.renderTheCat&#125; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;待雾散开，自然能看到想要的风景。&quot;&gt;&lt;a href=&quot;#待雾散开，自然能看到想要的风景。&quot; class=&quot;headerlink&quot; title=&quot;待雾散开，自然能看到想要的风景。&quot;&gt;&lt;/a&gt;待雾散开，自然能看到想要的风景。&lt;/h3&gt;&lt;/bl
      
    
    </summary>
    
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React学习 01</title>
    <link href="http://yoursite.com/2019/09/23/React%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2019/09/23/React学习/</id>
    <published>2019-09-23T15:51:10.000Z</published>
    <updated>2019-09-25T23:04:55.577Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记录几个有用的特性</p></blockquote><h4 id="Forwarding-Refs"><a href="#Forwarding-Refs" class="headerlink" title="Forwarding Refs"></a>Forwarding Refs</h4><blockquote><p><code>React.forwardRef</code> accepts a render function that receives <code>props</code> and <code>ref</code> parameters and returns a React node.</p></blockquote><p>自己写<code>HTML5</code>的<code>audio</code>需要在父组件中使用子组件<code>Audio</code>里面的<code>audio</code> <code>DOM</code>元素</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Audio.js</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Audio = React.forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;audio</span><br><span class="line">src=<span class="string">"https://music.163.com/song/media/outer/url?id=1387152054.mp3"</span></span><br><span class="line">ref=&#123;ref&#125;</span><br><span class="line">&#123;...props&#125;</span><br><span class="line">&gt;</span><br><span class="line">            Your browser does not support the &lt;code&gt;audio&lt;<span class="regexp">/code&gt; element.</span></span><br><span class="line"><span class="regexp">&lt;/</span>audio&gt;</span><br><span class="line">);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">父组件.js</span><br><span class="line"><span class="keyword">this</span>.lectureAudio = React.createRef();</span><br><span class="line"></span><br><span class="line">&lt;Audio</span><br><span class="line">ref=&#123;<span class="keyword">this</span>.lectureAudio&#125;</span><br><span class="line">onCanPlay=&#123;<span class="keyword">this</span>.handleCanPlay&#125;</span><br><span class="line">onTimeUpdate=&#123;<span class="keyword">this</span>.handleTimeUpdate&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h4 id="传播属性"><a href="#传播属性" class="headerlink" title="传播属性"></a>传播属性</h4><blockquote><p>两个组件是等效的</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &lt;Greeting firstName="Ben" lastName="Hector" /&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function App2() &#123;</span><br><span class="line">  const props = &#123;firstName: 'Ben', lastName: 'Hector'&#125;;</span><br><span class="line">  return &lt;Greeting &#123;...props&#125; /&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以获取特定属性，而不是直接传，这里把<code>other</code>和<code>props.children</code>传给了<code>button</code> </p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Button = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; kind, ...other &#125; = props;</span><br><span class="line">  <span class="keyword">const</span> className = kind === <span class="string">"primary"</span> ? <span class="string">"PrimaryButton"</span> : <span class="string">"SecondaryButton"</span>;</span><br><span class="line">  <span class="keyword">return</span> &lt;button className=&#123;className&#125; &#123;...other&#125; /&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const App = () =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Button kind="primary" onClick=&#123;() =&gt; console.log("clicked!")&#125;&gt;</span><br><span class="line">        Hello World!</span><br><span class="line">      &lt;/Button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>一个很有用的栗子</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">父组件.js</span><br><span class="line">&lt;Audio</span><br><span class="line">ref=&#123;<span class="keyword">this</span>.lectureAudio&#125;</span><br><span class="line">handleCanPlay=&#123;<span class="keyword">this</span>.handleCanPlay&#125;</span><br><span class="line">handleTimeUpdate=&#123;<span class="keyword">this</span>.handleTimeUpdate&#125;</span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line">一般情况传属性的方式</span><br><span class="line">Audio.js</span><br><span class="line"><span class="keyword">const</span> Audio = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;audio</span><br><span class="line">src=&#123;<span class="string">""</span>&#125;</span><br><span class="line">ref=&#123;ref&#125;</span><br><span class="line">onCanPlay=&#123;props.handleCanPlay&#125;</span><br><span class="line">onTimeUpdate=&#123;props.handleTimeUpdate&#125;</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/audio&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">父组件.js</span></span><br><span class="line"><span class="regexp">&lt;Audio</span></span><br><span class="line"><span class="regexp">ref=&#123;this.lectureAudio&#125;</span></span><br><span class="line"><span class="regexp">onCanPlay=&#123;this.handleCanPlay&#125;</span></span><br><span class="line"><span class="regexp">onTimeUpdate=&#123;this.handleTimeUpdate&#125;</span></span><br><span class="line"><span class="regexp">/</span>&gt;</span><br><span class="line">直接用props(和以上方式等效)</span><br><span class="line"><span class="keyword">const</span> Audio = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;audio</span><br><span class="line">src=&#123;...&#125;</span><br><span class="line">ref=&#123;ref&#125;</span><br><span class="line">    &#123;...props&#125;</span><br><span class="line">&gt;</span><br><span class="line">&lt;<span class="regexp">/audio&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>代码就变得精简了。</p><blockquote><p>小结</p></blockquote><p> 虽然好用，但是官网建议尽量少用，会传一些不必要的属性。</p><h4 id="props-children"><a href="#props-children" class="headerlink" title="props.children"></a>props.children</h4><blockquote><p>传递组件的children可以是anything，比如函数</p><p><code>false</code>, <code>null</code>, <code>undefined</code>, 以及 <code>true</code>是不合法children </p></blockquote><p>一个栗子</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Repeat</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> items = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; props.numTimes; i++) &#123;</span><br><span class="line">    items.push(props.children(i));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &lt;div&gt;&#123;items&#125;&lt;/div&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ListOfTenThings</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Repeat numTimes=&#123;<span class="number">10</span>&#125;&gt;</span><br><span class="line">      &#123;(index) =&gt; &lt;div key=&#123;index&#125;&gt;This is item &#123;index&#125; in the list&lt;/div&gt;&#125;</span><br><span class="line">    &lt;<span class="regexp">/Repeat&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>Protals</code> 插槽</p></blockquote><p>博文 </p><p><a style="color: orange;text-decoration: none;"><a href="https://segmentfault.com/a/1190000012325351" target="_blank" rel="noopener">使用 Portal 优雅实现“浮”在页面上的组件</a></a></p><p>当父组件有overflow: hidden; 或者 z-index的样式时候，又希望子结点冲破父容器展示（例如tooltips）</p><blockquote><p>Usage</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">  <span class="keyword">return</span> ReactDOM.createPortal(</span><br><span class="line">    <span class="keyword">this</span>.props.children,<span class="comment">// ReactChild</span></span><br><span class="line">    domNode<span class="comment">//一个DOM元素</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里没有创建div来包裹this.props.children，而是将它直接渲染到domNode(任意一个DOM结点，无论DOM结点的位置)</p><p><img src="https://thinkerhope.github.io/2019/09/23/React%E5%AD%A6%E4%B9%A0/react02.jpeg" alt="react05"></p><p>在 <code>React 组件树</code>设计上，Selector 是 Button 的子组件。但是在 <code>DOM 树</code>的角度 <code>Selector</code> 是 <code>Body</code> 的子节点。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button&gt;</span><br><span class="line">&lt;Selector /&gt;</span><br><span class="line">&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Button.js</span></span><br><span class="line"><span class="regexp">return ReactDOM.createPortal(this.props.children, Body);</span></span><br></pre></td></tr></table></figure><blockquote><p>注意事件冒泡</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app-root"</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div id=<span class="string">"modal-root"</span>&gt;&lt;/div&gt;</span><br><span class="line">  &lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> appRoot = <span class="built_in">document</span>.getElementById(<span class="string">'app-root'</span>);</span><br><span class="line"><span class="keyword">const</span> modalRoot = <span class="built_in">document</span>.getElementById(<span class="string">'modal-root'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modal</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.el = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    modalRoot.appendChild(<span class="keyword">this</span>.el);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    modalRoot.removeChild(<span class="keyword">this</span>.el);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> ReactDOM.createPortal(</span><br><span class="line">      <span class="keyword">this</span>.props.children,</span><br><span class="line">      <span class="keyword">this</span>.el,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">clicks</span>: <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">this</span>.handleClick = <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function"><span class="params">prevState</span> =&gt;</span> (&#123;</span><br><span class="line">      clicks: prevState.clicks + <span class="number">1</span></span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;</span><br><span class="line">        &lt;p&gt;<span class="built_in">Number</span> <span class="keyword">of</span> clicks: &#123;<span class="keyword">this</span>.state.clicks&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;p&gt;&lt;/</span>p&gt;</span><br><span class="line">        &lt;Modal&gt;</span><br><span class="line">          &lt;Child /&gt;</span><br><span class="line">        &lt;<span class="regexp">/Modal&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"modal"</span>&gt;</span><br><span class="line">      &lt;button&gt;Click&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;Parent /&gt;, appRoot);</span><br></pre></td></tr></table></figure><blockquote><p>此时的DOM树</p></blockquote><p><img src="https://thinkerhope.github.io/2019/09/23/React%E5%AD%A6%E4%B9%A0/Portal.png" alt="react05"></p><blockquote><p>React组件树</p></blockquote><p><strong>Parent —&gt; Modal —&gt; Child</strong> </p><p>可见DOM树中Modal组件是它的Parent父组件的兄弟结点。但是由于 React 的事件处理规则，让 portal 的 React 父组件有能力捕获 portal 的冒泡事件。</p><h4 id="题外"><a href="#题外" class="headerlink" title="题外"></a>题外</h4><blockquote><p><strong>JS escaped &amp; unescaped output</strong></p></blockquote><p>对<code>XSS attack</code>很有用。</p><blockquote><p>一个栗子</p></blockquote><p>有一个页面允许用户输入地址，并且在另外一夜确定，如果用户输入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    alert(<span class="string">"Welcome"</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>下个页面将会简单地运行这个脚本，特别是当攻击者把脚本放在一个无限循环里，程序就崩了。</p><p>因此，用户输入的文本将会被解码(escaped)，对应的就是编码(uneasped)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;lt;script&amp;gt;&lt;br/&gt;        alert(&amp;quot;Welcome&amp;quot;);&lt;br/&gt;&amp;lt;<span class="regexp">/script&amp;gt;</span></span><br></pre></td></tr></table></figure><p>这样，浏览器就会把他当做一个HTML元素而不是script元素了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;记录几个有用的特性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;Forwarding-Refs&quot;&gt;&lt;a href=&quot;#Forwarding-Refs&quot; class=&quot;headerlink&quot; title=&quot;Forwarding Refs&quot;&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>网易云开发日志 day06</title>
    <link href="http://yoursite.com/2019/09/22/%E7%BD%91%E6%98%93%E4%BA%91%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97-day06/"/>
    <id>http://yoursite.com/2019/09/22/网易云开发日志-day06/</id>
    <published>2019-09-22T03:24:39.000Z</published>
    <updated>2019-09-24T16:23:16.461Z</updated>
    
    <content type="html"><![CDATA[<p>(1)</p><p><code>dva</code>中<code>use &lt;Route&gt; or withRouter outside &lt;Router&gt;</code>报错</p><p>把<code>import {NavLink} from &quot;dva/router&quot;;</code>改成<code>import {NavLink} from &quot;react-router-dom&quot;;</code>就不会报错了。</p><p>所以以后统一用<code>react-router-dom</code>。</p><p>(2)</p><p>单页应用，就是在不刷新浏览器的情况下可以在整个网页应用实时共享数据。<br>store是内存机制，不是缓存机制，页面刷新和关闭都会导致store初始化，store里面一般保存什么数据呢？</p><blockquote><p>1、组件的初始状态；<br>2、后端数据的初始状态；</p></blockquote><p>如果你需要存储是数据是要实时存储并且读取显示出来，那么存在本地缓存或者服务端，这样每次刷新页面都需要读取本地缓存或者服务端的API，然后保存到store，再从store读到组件上。</p><p>(3)</p><p>=========================</p><p>PlayBar组件开发</p><p>{</p><p>this.setState(callback/{}, callback)</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.setState(<span class="function"><span class="keyword">function</span> (<span class="params">state, props</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//用来获取之前的state，以及props属性。</span></span><br><span class="line"> <span class="keyword">return</span> &#123;</span><br><span class="line">  score: state.score - <span class="number">1</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p>组件可能需要操作的DOM (refs)</p><p>audio(必备)  ref = {(audio) =&gt; {this.lectureAudio = audio}}</p><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p>播放： {</p><p><strong>当播放时</strong></p><p>e.currentTime –&gt; this.state.currentTime（事件ontimeupdate，e.currentTime更新时触发）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">onTimeUpdate=&#123;() =&gt; <span class="keyword">this</span>.handleTimeUpdate()&#125;</span><br><span class="line">handleTimeUpdate() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        currentTime: <span class="keyword">this</span>.lectureAuduio.currentTime,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>缓冲条</strong> </p><p>进度条 1 播放时交互 — 进度条<code>width = this.state.currentTime</code>(更新触发重新渲染) / <code>e.duration</code></p><p>进度条 2 点击<code>jump</code> — 进度条<code>width</code>  </p><blockquote><p><strong>思路</strong> </p><p>点击后，获取点击的div的width = e.target.offsetWidth</p><p>let x = e.offsetX </p><p>  currentTime = x / width * this.state.duration </p></blockquote><p>进度条 3 拖拉</p><p>onmousedown onmousemove onmouseup</p><p>maxWidth — clientWidth</p><p>理清楚<code>offsetX</code>和<code>offsetWidth</code>和<code>offsetLeft</code>的区别</p><blockquote><p>offsetX表示（鼠标位置）相对于最近父级元素的坐标（无论父级是否定位）（不管是谁触发）</p><p>offsetLeft<strong>元素</strong>相对于最近定位父级元素的坐标，若在所有的父级上都没有定位，则相对于整个文档</p><p>offsetWidth返回<strong>元素</strong>的视觉尺寸（width+padding+border）</p></blockquote><p><strong>时间</strong></p><p>渲染时间 — 根据this.state.currentTime</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">renderPlayTime(time) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> minute = time / <span class="number">60</span>;</span><br><span class="line">      <span class="keyword">var</span> minutes = <span class="built_in">parseInt</span>(minute);</span><br><span class="line">      <span class="keyword">if</span> (minutes &lt; <span class="number">10</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;minutes&#125;</span>:<span class="subst">$&#123;seconds&#125;</span>`</span></span><br><span class="line">  &#125;minutes = <span class="string">"0"</span> + minutes;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//秒</span></span><br><span class="line">      <span class="keyword">var</span> second = time % <span class="number">60</span>;</span><br><span class="line">      <span class="keyword">var</span> seconds = <span class="built_in">Math</span>.round(second);</span><br><span class="line">      <span class="keyword">if</span> (seconds &lt; <span class="number">10</span>) &#123;</span><br><span class="line">          seconds = <span class="string">"0"</span> + seconds;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;minutes&#125;</span>:<span class="subst">$&#123;seconds&#125;</span>`</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>{this.renderPlayTime(this.state.currentTime)}</p><p>{this.renderPlayTime(this.state.duration)}</p><p>}</p><p>(1)</p><p>  this.state = {</p><p>​    currentTime,</p><p>​    playState,</p><p>  }</p><p>}</p><p>==========================</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;(1)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dva&lt;/code&gt;中&lt;code&gt;use &amp;lt;Route&amp;gt; or withRouter outside &amp;lt;Router&amp;gt;&lt;/code&gt;报错&lt;/p&gt;
&lt;p&gt;把&lt;code&gt;import {NavLink} from &amp;qu
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>React学习 高阶组件和decorator</title>
    <link href="http://yoursite.com/2019/09/21/React%E5%AD%A6%E4%B9%A0-%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6%E5%92%8Cmixins/"/>
    <id>http://yoursite.com/2019/09/21/React学习-高阶组件和mixins/</id>
    <published>2019-09-21T15:51:43.000Z</published>
    <updated>2019-09-22T02:45:04.524Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="总有一些东西，是你再努力都触碰不到的。"><a href="#总有一些东西，是你再努力都触碰不到的。" class="headerlink" title="总有一些东西，是你再努力都触碰不到的。"></a>总有一些东西，是你再努力都触碰不到的。</h3></blockquote><h2 id="Decorator"><a href="#Decorator" class="headerlink" title="Decorator"></a>Decorator</h2><blockquote><p>es7语法糖，就是一个修饰类以及类的属性或者行为的函数。</p></blockquote><p><strong>配置</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install customize-cra react-app-rewired @babel/plugin-proposal-decorators --save</span><br></pre></td></tr></table></figure><p>项目根目录新建config-overrides.js文件加入以下代码:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; override, addDecoratorsLegacy &#125; = <span class="built_in">require</span>(<span class="string">'customize-cra'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = override(</span><br><span class="line"> addDecoratorsLegacy()</span><br><span class="line"> );</span><br></pre></td></tr></table></figure><p>修改package.json文件如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line"> <span class="string">"start"</span>: <span class="string">"react-app-rewired start"</span>,</span><br><span class="line"> <span class="string">"build"</span>: <span class="string">"react-app-rewired build"</span>,</span><br><span class="line"> <span class="string">"test"</span>: <span class="string">"react-app-rewired test"</span>,</span><br><span class="line"> <span class="string">"eject"</span>: <span class="string">"react-app-rewired eject"</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testAble</span>(<span class="params">target</span>)</span>&#123;</span><br><span class="line">    target.isTest = <span class="literal">true</span>;<span class="comment">//静态属性</span></span><br><span class="line">    target.prototypr.isTest = <span class="literal">true</span>;<span class="comment">//实例属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@testAble</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(A.isTest);<span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p>在一个修饰器中，参数target就是你要修饰的类，这个类也叫做Decorator的修饰目标对象。</p></blockquote><p><strong>多参数的修饰器的实现</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testAble</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target</span>)</span>&#123;</span><br><span class="line">        target.prototype.isTrue = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@testAble(<span class="literal">true</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> A().isTrue;<span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>修饰对象的属性</strong></p><blockquote><p>除了修饰class，还用来修饰对象属性。</p></blockquote><p>修饰器修饰一个属性的时候，有3个参数</p><p>第一个 <code>target</code> 修饰器对应的class</p><p>第二个 <code>name</code> 属性名</p><p>第三个 <code>descriptor</code> 描述符</p><blockquote><p>descriptor的说明</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;；</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">'name'</span>, &#123;</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    writable: <span class="literal">true</span>,</span><br><span class="line">    enumberable: <span class="literal">true</span>,</span><br><span class="line">    value: <span class="string">'...'</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>就是其中的描述符对象。</strong></p><p><strong>@log的实现</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">target, name, descriptor</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oldValue = descriptor.value;</span><br><span class="line">    descriptor.value = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`this prop <span class="subst">$&#123;name&#125;</span> 的参数为 <span class="subst">$&#123;<span class="built_in">arguments</span>&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">return</span> oldValue.appay(<span class="literal">null</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> descriptor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Math</span> </span>&#123;</span><br><span class="line">    @log</span><br><span class="line">    add(a, b)&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可见本质是对descriptor的实现。另外要注意修饰器不能用于函数。（原因：函数存在函数提升）</p></blockquote><p><strong>core-decorator第三方模块，提供常用的几个修饰器</strong></p><p>（1） @override</p><p>检查子类的方法，是否正确覆盖了父类的同名方法，如果不正确会报错。</p><p>（2）@autobind</p><p>使得方法中的this对象，绑定原始对象。</p><p>（3） @readonly</p><p>使得class中的属性或者方法不可写。</p><h2 id="高阶组件"><a href="#高阶组件" class="headerlink" title="高阶组件"></a>高阶组件</h2><p>目的是解决一些交叉问题(Cross-Cutting Concerns)。而最早时候 <code>React</code> 官方给出的解决方案是使用 <code>mixin</code> 。</p><p>高阶组件通过包裹（wrapped）被传入的React组件，经过一系列处理，最终返回一个相对增强（enhanced）的 React 组件，供其他组件调用。<strong>高阶组件是接受一个组件作为参数并返回一个新组件的函数</strong>。</p><p>先复习一下<code>class表达式</code>语法的规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MyClass = <span class="class"><span class="keyword">class</span> <span class="title">Me</span> </span>&#123;</span><br><span class="line">  getClassName() &#123;</span><br><span class="line">    <span class="keyword">return</span> Me.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> inst = <span class="keyword">new</span> MyClass();</span><br><span class="line">inst.getClassName();<span class="comment">//Me</span></span><br><span class="line">MyClass.name<span class="comment">//Me</span></span><br><span class="line">Me.className<span class="comment">//ReferenceError: Me is not defined</span></span><br></pre></td></tr></table></figure><p><code>Me</code>只能在class里面用，并且<code>MyClass</code>的引用是<code>class Me {}</code>，所以在外面<code>MyClass.name</code>是<code>Me</code>。</p><p>如果类的内部没用到的话，可以省略<code>Me</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MyClass = <span class="class"><span class="keyword">class</span> </span>&#123; <span class="comment">/* ... */</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*立即执行*/</span></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  sayName() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;(<span class="string">'张三'</span>);</span><br></pre></td></tr></table></figure><blockquote><p>一个简单的高阶组件</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">withHeader</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">HOC</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> &lt;div&gt;</span><br><span class="line">        &lt;div className="demo-header"&gt;</span><br><span class="line">          我是标题</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;WrappedComponent &#123;...this.props&#125;/&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*在其他组件里，我们引用这个高阶组件，用来强化它。*/</span><br><span class="line">@withHeader</span><br><span class="line">export default class Demo extends Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        我是一个普通组件</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@withHeader</code>是<code>decorator</code>，也可以写成</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withHeader(Demo);</span><br></pre></td></tr></table></figure><p>这样写的问题</p><blockquote><p>高阶组件调用多次，会造成组件数出现多个HOC，调试困难。</p></blockquote><p>优化</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDisplayName</span>(<span class="params">component</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> component.displayName || component.name || <span class="string">'Component'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">HOC</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> displayName = <span class="string">`HOC(<span class="subst">$&#123;getDisplayName(WrappedComponent)&#125;</span>)`</span></span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> &lt;div&gt;</span><br><span class="line">        &lt;div className="demo-header"&gt;</span><br><span class="line">          我是标题</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;WrappedComponent &#123;...this.props&#125;/&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>由此可以看出，高阶组件的主要功能是封装并抽离组件的通用逻辑，让此部分逻辑在组件间更好地被复用。</p></blockquote><p><strong>displayName   定义调试时的组件name</strong></p><p>例如</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">withHOC</span>(<span class="params">WrapComponent</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 此处未定义名称或者希望动态定义名称</span></span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义displayName</span></span><br><span class="line">    <span class="keyword">static</span> displayName = <span class="string">`withHOC(<span class="subst">$&#123;WrapComponent.displayName || WrapComponent.name&#125;</span>)`</span>;</span><br><span class="line">    render()&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"inside HOC"</span>)</span><br><span class="line">      <span class="keyword">return</span> &lt;WrapComponent &#123;...this.props &#125; /&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">App = withHOC(App);</span><br></pre></td></tr></table></figure><p>如果未定义displayName，那么进行调试的时候，就会显示如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// react自动定义名称</span></span><br><span class="line">|---_class2</span><br><span class="line">  |---App</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>定义displayName后，显示如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">|---withHOC(App)</span></span><br><span class="line"><span class="params">  |</span>---App</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p><strong>组件参数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@withHeader(<span class="string">'Demo'</span>) </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改写一下HOC</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (title) =&gt; <span class="function">(<span class="params">WrappedComponent</span>) =&gt;</span> <span class="class"><span class="keyword">class</span> <span class="title">HOC</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;div&gt;</span><br><span class="line">      &lt;div className="demo-header"&gt;</span><br><span class="line">        &#123;title</span><br><span class="line">          ? title</span><br><span class="line">          : '我是标题'&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;WrappedComponent &#123;...this.props&#125;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现方式</strong></p><p>（1）属性代理</p><blockquote><p>通过做一些操作，将被包裹组件的<code>props</code>和新生成的<code>props</code>一起传递给此组件，这称之为属性代理</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">withHeader</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">HOC</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">const</span> newProps = &#123;</span><br><span class="line">        test:<span class="string">'hoc'</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 透传props，并且传递新的newProps</span></span><br><span class="line">      <span class="keyword">return</span> &lt;div&gt;</span><br><span class="line">        &lt;WrappedComponent &#123;...this.props&#125; &#123;...newProps&#125;/&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）基于反向继承</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">Inheritance</span> <span class="keyword">extends</span> <span class="title">WrappedComponent</span> </span>&#123;</span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">      <span class="comment">// 可以方便地得到state，做一些更深入的修改。</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.state);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">super</span>.render();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>组合多个高阶组件</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@withHeader</span><br><span class="line">@withLoading</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>简化语法</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> enhance = compose(withHeader,withLoading);</span><br><span class="line">@enhance</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;总有一些东西，是你再努力都触碰不到的。&quot;&gt;&lt;a href=&quot;#总有一些东西，是你再努力都触碰不到的。&quot; class=&quot;headerlink&quot; title=&quot;总有一些东西，是你再努力都触碰不到的。&quot;&gt;&lt;/a&gt;总有一些东西，是你再努力都触碰不
      
    
    </summary>
    
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
      <category term="es7" scheme="http://yoursite.com/tags/es7/"/>
    
  </entry>
  
  <entry>
    <title>ES6学习记录</title>
    <link href="http://yoursite.com/2019/09/20/ES6%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2019/09/20/ES6学习记录/</id>
    <published>2019-09-20T01:16:27.000Z</published>
    <updated>2019-09-21T08:13:30.473Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/home/boygreen/MyBlog/source/_posts/git%E5%AD%A6%E4%B9%A0/git000.jpeg" alt></p><blockquote><h3 id="记录一下ES6对函数、对象、数组的扩展，作为开发参考。"><a href="#记录一下ES6对函数、对象、数组的扩展，作为开发参考。" class="headerlink" title="记录一下ES6对函数、对象、数组的扩展，作为开发参考。"></a>记录一下<code>ES6</code>对函数、对象、数组的扩展，作为开发参考。</h3></blockquote><h2 id="函数扩展"><a href="#函数扩展" class="headerlink" title="函数扩展"></a>函数扩展</h2><h4 id="和解构赋值默认值结合"><a href="#和解构赋值默认值结合" class="headerlink" title="和解构赋值默认值结合"></a>和解构赋值默认值结合</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">&#123;x, y = <span class="number">5</span>&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(&#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>&#125;) <span class="comment">// 1 2</span></span><br><span class="line">foo() <span class="comment">// TypeError: Cannot read property 'x' of undefined</span></span><br></pre></td></tr></table></figure><blockquote><p>只有当函数<code>foo</code>的参数是一个对象时，变量<code>x</code>和<code>y</code>才会通过解构赋值生成。</p></blockquote><p>上面<code>foo</code>函数使用的是对象解构赋值默认值，而不是函数参数，所以报错了。</p><p>提供函数参数默认值:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">&#123;x, y = <span class="number">5</span>&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo() <span class="comment">// undefined 5</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>有默认值的函数参数如果不是尾参数，则不能忽略，否则报错，除非显示传入undefined，可以触发默认值，但是null不可以。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y = <span class="number">5</span>, z</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [x, y, z];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(<span class="number">1</span>, ,<span class="number">2</span>) <span class="comment">// 报错</span></span><br><span class="line">f(<span class="number">1</span>, <span class="literal">undefined</span>, <span class="number">2</span>) <span class="comment">// [1, 5, 2]</span></span><br></pre></td></tr></table></figure><h4 id="对函数对象的影响"><a href="#对函数对象的影响" class="headerlink" title="对函数对象的影响"></a>对函数对象的影响</h4><ol><li><p>使length属性失真</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">a, b, c = <span class="number">5</span></span>) </span>&#123;&#125;).length <span class="comment">// 2</span></span><br><span class="line"><span class="comment">/*如果设置了默认值的参数不是尾参数，那么length属性也不再计入后面的参数了。*/</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">a = <span class="number">0</span>, b, c</span>) </span>&#123;&#125;).length <span class="comment">// 0</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">a, b = <span class="number">1</span>, c</span>) </span>&#123;&#125;).length <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>作用域（重点）</p><p>一旦设置了参数的默认值，函数进行声明初始化时，参数会形成一个单独的作用域（<code>context</code>）(不设置参数默认值不会出现这个作用域)</p><p>先看个栗子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x, y = function(</span>) </span>&#123; x = <span class="number">2</span>; &#125;) &#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">3</span>;</span><br><span class="line">  y();</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo() <span class="comment">// 3</span></span><br><span class="line">x - 外部作用域x <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>解释</strong></p><blockquote><p>foo函数形成一个单独作用域，y的默认值是一个函数，里面的变量x指向同一个作用域（即函数参数形成的单独作用域）的x，而foo函数里面也声明了一个x变量，但是由于不是同一个作用域，因此属于不同的变量。默认值函数也只是改变了同一作用域的x，并没有改变外部作用域和foo函数作用域的值。</p></blockquote><p>改一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x, y = function(</span>) </span>&#123; x = <span class="number">2</span>; &#125;) &#123;</span><br><span class="line">  x = <span class="number">3</span>;</span><br><span class="line">  y();</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo() <span class="comment">// 2</span></span><br><span class="line">x <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>会发现默认函数生效了，全局变量依然不受影响。</p><p><strong>解释</strong></p><blockquote><p>foo函数内部没有重新定义变量x，因此内部的x指向了函数参数x。</p></blockquote><h4 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h4><blockquote><p>形式</p></blockquote><p><code>...变量名</code> </p><p>先上栗子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">array, ...items</span>) </span>&#123;</span><br><span class="line">  items.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    array.push(item);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line">push(a, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>可以看到rest参数搭配的后面的变量为一个数组。</p><blockquote><p>rest参数是用来代替arguments变量的。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortNumbers</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>).sort();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*arguments是类数组，要使用数组方法要先转为数组*/</span></span><br><span class="line"><span class="comment">// rest参数的写法</span></span><br><span class="line"><span class="keyword">const</span> sortNumbers = <span class="function">(<span class="params">...numbers</span>) =&gt;</span> numbers.sort();</span><br></pre></td></tr></table></figure><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><blockquote><p>使用注意</p></blockquote><p>（1）不能用<code>new</code></p><p>（2）不能作为<code>Generator</code>函数</p><p>（3）不能使用arguments，用rest参数代替(arguments指向外层函数)</p><p>（4）<strong>this</strong> 指向是固定的</p><blockquote><p>箭头函数可以让<code>setTimeout</code>里面的<code>this</code>，绑定定义时所在的作用域，而不是指向运行时所在的作用域。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.s1 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>.s2 = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 箭头函数</span></span><br><span class="line">  setInterval(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.s1++, <span class="number">1000</span>);</span><br><span class="line">  <span class="comment">// 普通函数</span></span><br><span class="line">  setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.s2++;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> timer = <span class="keyword">new</span> Timer();</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'s1: '</span>, timer.s1), <span class="number">3100</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'s2: '</span>, timer.s2), <span class="number">3100</span>);</span><br><span class="line"><span class="comment">// s1: 3</span></span><br><span class="line"><span class="comment">// s2: 0</span></span><br></pre></td></tr></table></figure><blockquote><p><code>ES6</code>转成<code>ES5</code>会发现箭头函数没有自己的<code>this</code>，只是<code>_this = this</code>引用了外层的<code>this</code>。因此bind()、apply()、call()方法会失效。</p></blockquote><h4 id="箭头函数不适用场景"><a href="#箭头函数不适用场景" class="headerlink" title="箭头函数不适用场景"></a>箭头函数不适用场景</h4><blockquote><p>定义对象方法，且内部包括this。</p></blockquote><blockquote><p>需要动态this的时候。</p></blockquote><p><strong>看一个部署管道机制的栗子（前一个函数的输出是后一个函数的输入）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pipeline = <span class="function">(<span class="params">...funcs</span>) =&gt;</span></span><br><span class="line">  val =&gt; funcs.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b(a), val);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> plus1 = <span class="function"><span class="params">a</span> =&gt;</span> a + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> mult2 = <span class="function"><span class="params">a</span> =&gt;</span> a * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> addThenMult = pipeline(plus1, mult2);</span><br><span class="line"></span><br><span class="line">addThenMult(<span class="number">5</span>)</span><br><span class="line"><span class="comment">// 12</span></span><br></pre></td></tr></table></figure><h2 id="数组扩展"><a href="#数组扩展" class="headerlink" title="数组扩展"></a>数组扩展</h2><h4 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="... 扩展运算符"></a><code>...</code> 扩展运算符</h4><blockquote><p>好比rest的逆运算，讲一个数组转为用都好分割的参数序列</p></blockquote><p><strong>强大的运算符</strong></p><blockquote><p>可放置表达式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  ...(x &gt; <span class="number">0</span> ? [<span class="string">'a'</span>] : []),</span><br><span class="line">  <span class="string">'b'</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><blockquote><p>空数组无效</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[...[], <span class="number">1</span>]</span><br><span class="line"><span class="comment">// [1]</span></span><br></pre></td></tr></table></figure><blockquote><p>一个实际应用</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5 的写法</span></span><br><span class="line"><span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, [<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 的写法</span></span><br><span class="line"><span class="built_in">Math</span>.max(...[<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">Math</span>.max(<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>);</span><br></pre></td></tr></table></figure><blockquote><p>合并/复制数组为浅拷贝</p></blockquote><blockquote><p>与解构赋值结合</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">first <span class="comment">// 1</span></span><br><span class="line">rest  <span class="comment">// [2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>像是逆运算一样</p><p><strong>注意</strong></p><p>扩展运算符用于数组赋值，只能在参数最后一位，否则报错。</p><h4 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h4><h6 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h6><blockquote><p>将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象。</p></blockquote><p>一个类似数组的对象转化为数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line">    <span class="string">'0'</span>: <span class="string">'a'</span>,</span><br><span class="line">    <span class="string">'1'</span>: <span class="string">'b'</span>,</span><br><span class="line">    <span class="string">'2'</span>: <span class="string">'c'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'myname'</span>,</span><br><span class="line">    length: <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5的写法</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [].slice.call(arrayLike); <span class="comment">// ['a', 'b', 'c']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6的写法</span></span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="built_in">Array</span>.from(arrayLike); <span class="comment">// ['a', 'b', 'c']</span></span><br></pre></td></tr></table></figure><p>和<code>...</code>扩展运算符的区别</p><p><code>...</code>只能装换Iterable对象，<code>Array.from</code>方法还支持类似数组的对象。所谓类似数组的对象，本质特征只有一点，即必须有<code>length</code>属性。数组的长度由length决定。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(&#123; <span class="attr">length</span>: <span class="number">3</span> &#125;);</span><br><span class="line"><span class="comment">// [ undefined, undefined, undefined ]</span></span><br></pre></td></tr></table></figure><p>另外，<code>Array.prototype.slice.call(obj)</code>能将具有<code>length</code>属性的对象转换成数组，也要求</p><p>有length属性。</p><p><code>[].prototype.slice.call(obj)</code>第一眼看我有点懵。看看<code>v8_array</code>源码[].slice()的解释</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i, cloned = [],</span><br><span class="line">        size, len = <span class="keyword">this</span>.length;<span class="comment">//要求对象需要length</span></span><br><span class="line">size = end - start;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        cloned = <span class="keyword">new</span> <span class="built_in">Array</span>(size);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.charAt) &#123;<span class="comment">//this是字符串对象的情况</span></span><br><span class="line">          <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            cloned[i] = <span class="keyword">this</span>.charAt(start + i);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            cloned[i] = <span class="keyword">this</span>[start + i];<span class="comment">//bind(this)让this指向了obj</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> cloned;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>奥，我好了。</p><h6 id="第二个参数"><a href="#第二个参数" class="headerlink" title="第二个参数"></a>第二个参数</h6><p><code>Array.from()</code>还可以接受第二个参数，用来处理每个元素，<code>Array.from()</code>最后返回处理后的数组。</p><blockquote><p>一个栗子</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(&#123; <span class="attr">length</span>: <span class="number">2</span> &#125;, () =&gt; <span class="string">'jack'</span>)</span><br><span class="line"><span class="comment">// ['jack', 'jack']</span></span><br></pre></td></tr></table></figure><p><strong>如果第二个参数中用到了this，这个时候就可以利用第三个参数来绑定this了。</strong></p><blockquote><p>一个栗子</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">"myname"</span>, <span class="attr">age</span>: <span class="number">19</span>, &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.from(&#123; <span class="attr">length</span>: <span class="number">3</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>.name&#125;, obj);</span><br><span class="line"><span class="comment">//注意这里的不能用箭头函数</span></span><br><span class="line"><span class="comment">// ["myname", "myname", "myname"]</span></span><br></pre></td></tr></table></figure><h4 id="arr-copyWithin-target-start-0-end-this-length"><a href="#arr-copyWithin-target-start-0-end-this-length" class="headerlink" title="arr.copyWithin(target, start = 0, end = this.length)"></a>arr.copyWithin(target, start = 0, end = this.length)</h4><p>直接看栗子理解</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// [4, 5, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>上面代码表示将从 3 号位直到数组结束的成员（4 和 5），复制到从 0 号位开始的位置，结果覆盖了原来的 1 和 2。</p><h4 id="arr-find-callback"><a href="#arr-find-callback" class="headerlink" title="arr.find(callback)"></a>arr.find(callback)</h4><blockquote><p>用于找出第一个符合条件的数组成员</p></blockquote><h4 id="arr-fill"><a href="#arr-fill" class="headerlink" title="arr.fill()"></a>arr.fill()</h4><blockquote><p>使用指定值，填充数组</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].fill(<span class="number">0</span>)</span><br><span class="line"><span class="comment">//[0, 0, 0]</span></span><br></pre></td></tr></table></figure><p>使用第二、三个参数，制定填充起始位置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].fill(<span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// ['a', 7, 'c']</span></span><br></pre></td></tr></table></figure><p>注意  起始位置参数和<code>slice</code>很像，都是<code>[start, end)</code></p><h4 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//0 //1</span></span><br></pre></td></tr></table></figure><p>ES6还提供了<code>values()</code>、<code>entries()</code>来遍历值、键值对。</p><h4 id="arr-includes"><a href="#arr-includes" class="headerlink" title="arr.includes()"></a>arr.includes()</h4><blockquote><p>返回一个布尔值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>)     <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>如果不支持，自己部署</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> contains = <span class="function">(<span class="params">(</span>) =&gt;</span></span><br><span class="line">  <span class="built_in">Array</span>.prototype.includes</span><br><span class="line">    ? <span class="function">(<span class="params">arr, value</span>) =&gt;</span> arr.includes(value)</span><br><span class="line">    : <span class="function">(<span class="params">arr, value</span>) =&gt;</span> arr.some(<span class="function"><span class="params">el</span> =&gt;</span> el === value)</span><br><span class="line">)();</span><br><span class="line">contains([<span class="string">'foo'</span>, <span class="string">'bar'</span>], <span class="string">'baz'</span>); <span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure><h4 id="arr-flat"><a href="#arr-flat" class="headerlink" title="arr.flat()"></a>arr.flat()</h4><blockquote><p>“拉平”多维数组</p></blockquote><p><strong><code>flat()</code>默认只会“拉平”一层</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]].flat()</span><br><span class="line"><span class="comment">// [1, 2, 3, [4, 5]]</span></span><br></pre></td></tr></table></figure><p><strong>传入一个整数，可以指定”拉平”的层数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]].flat(<span class="number">2</span>)</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p><strong>传入<code>Infinity</code>，不管几层都变为一维</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>]]].flat(<span class="literal">Infinity</span>)</span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>跳过空位</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, , <span class="number">4</span>, <span class="number">5</span>].flat()</span><br><span class="line"><span class="comment">// [1, 2, 4, 5]</span></span><br></pre></td></tr></table></figure><h4 id="arr-flatMap"><a href="#arr-flatMap" class="headerlink" title="arr.flatMap()"></a>arr.flatMap()</h4><blockquote><p>map() + flat()，flat()参数默认为1，因此只能展开一层</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 相当于 [[2, 4], [3, 6], [4, 8]].flat()</span></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].flatMap(<span class="function">(<span class="params">x</span>) =&gt;</span> [x, x * <span class="number">2</span>])</span><br><span class="line"><span class="comment">// [2, 4, 3, 6, 4, 8]</span></span><br></pre></td></tr></table></figure><h2 id="对象扩展"><a href="#对象扩展" class="headerlink" title="对象扩展"></a>对象扩展</h2><h4 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h4><blockquote><p>指向当前对象的原型对象</p></blockquote><p><strong>注意</strong></p><p>只能用在对象方法中，目前，只有对象方法的简写法可以让 JavaScript 引擎确认，定义的是对象的方法。JavaScript 引擎内部，<code>super.foo</code>等同于<code>Object.getPrototypeOf(this).foo</code>。</p><p>看个栗子理解一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> proto = &#123;</span><br><span class="line">  x: <span class="string">'hello'</span>,</span><br><span class="line">  foo() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  x: <span class="string">'world'</span>,</span><br><span class="line">  foo() &#123;</span><br><span class="line">    <span class="keyword">super</span>.foo();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, proto);</span><br><span class="line"></span><br><span class="line">obj.foo() <span class="comment">// "world"</span></span><br></pre></td></tr></table></figure><p>proto.foo绑定的在执行时绑定的是obj，因此返回”world”。</p><h4 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; x, y, ...z &#125; = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> &#125;;</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 2</span></span><br><span class="line">z <span class="comment">// &#123; a: 3, b: 4 &#125;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p>(1) 浅拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="number">1</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; ...x &#125; = obj;</span><br><span class="line">obj.a.b = <span class="number">2</span>;</span><br><span class="line">x.a.b <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>(2)扩展运算符的解构赋值，只能读取对象自身的属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = <span class="built_in">Object</span>.create(&#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;);</span><br><span class="line">o.z = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; x, ...newObj &#125; = o;</span><br><span class="line"><span class="keyword">let</span> &#123; y, z &#125; = newObj;</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// undefined</span></span><br><span class="line">z <span class="comment">// 3</span></span><br><span class="line">newObj <span class="comment">//&#123;3&#125;</span></span><br></pre></td></tr></table></figure><p>ES6 规定，变量声明语句之中，如果使用解构赋值，扩展运算符后面必须是一个变量名，而不能是一个解构赋值表达式，下面写法会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; x, ...&#123; y, z &#125; &#125; = o;</span><br></pre></td></tr></table></figure><p>所以上面用newObj做中间变量。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/home/boygreen/MyBlog/source/_posts/git%E5%AD%A6%E4%B9%A0/git000.jpeg&quot; alt&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&quot;记录一下ES6对函数、对象、数组的扩展，作为开发参考
      
    
    </summary>
    
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>网易云开发日志 day5</title>
    <link href="http://yoursite.com/2019/09/18/%E7%BD%91%E6%98%93%E4%BA%91%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97-day5/"/>
    <id>http://yoursite.com/2019/09/18/网易云开发日志-day5/</id>
    <published>2019-09-18T15:11:27.000Z</published>
    <updated>2019-09-25T23:07:13.480Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h2 id="见证你的成长。"><a href="#见证你的成长。" class="headerlink" title="见证你的成长。"></a>见证你的成长。</h2></blockquote><p>(1)推荐榜单列表的鼠标事件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.state = &#123;</span><br><span class="line">  zHvr: fasle,  </span><br><span class="line">&#125;;</span><br><span class="line">...</span><br><span class="line">map(item, index) =&gt; </span><br><span class="line">...</span><br><span class="line">className=&#123;classnames(&#123;<span class="attr">recTopList</span>: <span class="literal">true</span>, <span class="attr">zHvr</span>: showOper&#125;)&#125;</span><br><span class="line">onMouseOut=&#123;<span class="keyword">this</span>.handleMouseleave&#125;</span><br><span class="line">...</span><br><span class="line">&lt;NavLink</span><br><span class="line">  to=<span class="string">"/"</span></span><br><span class="line">  onMouseOver=&#123;<span class="keyword">this</span>.handleMouseover&#125;</span><br><span class="line">&gt;</span><br><span class="line">  &#123;item&#125;</span><br><span class="line">&lt;<span class="regexp">/NavLink&gt;</span></span><br></pre></td></tr></table></figure><p>显然，这样做当鼠标在NavLink上时，会使数组渲染的列表都有zHvr，所以考虑增加控制变量。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.state = &#123;</span><br><span class="line">  zHvr: <span class="literal">false</span>,</span><br><span class="line">  operIndex: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">map(item, index) =&gt;</span><br><span class="line">className=&#123;classnames(&#123;<span class="attr">recTopList</span>: <span class="literal">true</span>, <span class="attr">zHvr</span>: showOper &amp;&amp; index === operIndex &amp;&amp; top === operTopname&#125;)&#125;</span><br><span class="line">...</span><br><span class="line"><span class="comment">/*operIndex为触发鼠标事件的目标元素。行吧，这个代码废了，因为我slice了一下，就有多个列表可能有相同的index了，因此加上Topname(榜单名)控制*/</span></span><br><span class="line">&lt;NavLink</span><br><span class="line">  to=<span class="string">"/"</span></span><br><span class="line">  onMouseOver=&#123;() =&gt; &#123;<span class="keyword">this</span>.handleMouseover(index)&#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">  &#123;item&#125;</span><br><span class="line">&lt;<span class="regexp">/NavLink&gt;</span></span><br></pre></td></tr></table></figure><p>另外还有一些样式上的细节问题</p><p>(2)关于<code>onmouseover</code>和<code>onmouseout</code>事件</p><p>当子元素绝对定位，父元素相对定位。</p><p>在父元素上注册</p><p>(3)createStore的简单实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> createStore = <span class="function">(<span class="params">reducer</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> state;</span><br><span class="line">  <span class="keyword">let</span> listeners = [];</span><br><span class="line">  <span class="comment">/*listener为组件通过store.subscribe注册的监听函数*/</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> getState = <span class="function"><span class="params">()</span> =&gt;</span> state;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">    state = reducer(state, action);</span><br><span class="line">    listeners.forEach(<span class="function"><span class="params">listener</span> =&gt;</span> listener());</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> subscribe = <span class="function">(<span class="params">listener</span>) =&gt;</span> &#123;</span><br><span class="line">    listeners.push(listener);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      listeners = listeners.filter(<span class="function"><span class="params">l</span> =&gt;</span> l !== listener);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  dispatch(&#123;&#125;);</span><br><span class="line">    <span class="comment">/*初始化state*/</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; getState, dispatch, subscribe &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>reudecers类似于arr.reduce(callback, initValue)，用reduce来理解combineReducers是最合理的。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> combineReducers = <span class="function">(<span class="params">reducers</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">state = &#123;&#125;, action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(reducers).reduce(<span class="function">(<span class="params">nextState, key</span>) =&gt;</span> &#123;</span><br><span class="line">      nextState[key] = reducers[key](state[key], action);</span><br><span class="line">      <span class="keyword">return</span> nextState;</span><br><span class="line">    &#125;, &#123;&#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">reducer = &#123;</span><br><span class="line">  oneReducer,</span><br><span class="line">  secondReducer,</span><br><span class="line">  thirdReducer,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>(4) <code>redux-thunk</code>的实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(5) 封装一个用来提取对象的工具类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">sliceObj</span>(<span class="params">obj, keys</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> keys.reduce(<span class="function">(<span class="params">result, key</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">result[key] = obj[key];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;, &#123;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h2 id=&quot;见证你的成长。&quot;&gt;&lt;a href=&quot;#见证你的成长。&quot; class=&quot;headerlink&quot; title=&quot;见证你的成长。&quot;&gt;&lt;/a&gt;见证你的成长。&lt;/h2&gt;&lt;/blockquote&gt;
&lt;p&gt;(1)推荐榜单列表的鼠标事件&lt;/p&gt;
&lt;fig
      
    
    </summary>
    
    
    
      <category term="dva" scheme="http://yoursite.com/tags/dva/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>git学习</title>
    <link href="http://yoursite.com/2019/09/18/git%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2019/09/18/git学习/</id>
    <published>2019-09-18T01:10:12.000Z</published>
    <updated>2019-09-21T08:12:06.058Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="keep-try"><a href="#keep-try" class="headerlink" title="keep try"></a>keep try</h3></blockquote><p><strong>学习廖雪峰老师的git教程总结</strong></p><h6 id="https-www-liaoxuefeng-com-wiki-896043488029600-897013573512192"><a href="#https-www-liaoxuefeng-com-wiki-896043488029600-897013573512192" class="headerlink" title="https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192"></a><a href="https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192</a></h6><p><img src="https://thinkerhope.github.io/2019/09/18/git%E5%AD%A6%E4%B9%A0/git.jpeg" alt></p><h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库　"></a>创建版本库　</h3><p>首先，选择一个合适的地方，创建一个空目录</p><p>其次，<code>git init</code>把这个目录变成Git可以管理的仓库</p><blockquote><p>init命令会在工作区创建一个名为.git的隐藏文件，并只在其中创建一个版本库（实质是存放散列值对象引用的存储结构）　ls -a可以查看隐藏的.git</p></blockquote><blockquote><p>一个带版本库的项目目录，我们称之为工作区</p></blockquote><h3 id="把修改的文件放到git版本库-Local-Repo-（两步）"><a href="#把修改的文件放到git版本库-Local-Repo-（两步）" class="headerlink" title="把修改的文件放到git版本库(Local Repo)（两步）"></a>把修改的文件放到git版本库(Local Repo)（两步）</h3><p><code>git add file1.txt file2.txt</code></p><p>同时commit可以一次提交多个文件</p><p><code>git commit -m &quot;提交信息&quot;</code></p><blockquote><p>注意</p></blockquote><p>提交新文件和提交修改都是<code>add</code>和<code>commit</code></p><h3 id="工作区"><a href="#工作区" class="headerlink" title="工作区"></a>工作区</h3><p>要随时掌握工作区的状态，使用<code>git status</code>命令。</p><p>如果<code>git status</code>告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容。</p><h3 id="版本-一次commit就是一次版本，就是一个快照-回退"><a href="#版本-一次commit就是一次版本，就是一个快照-回退" class="headerlink" title="版本(一次commit就是一次版本，就是一个快照)回退"></a>版本(一次commit就是一次版本，就是一个快照)回退</h3><p>版本回退前 <code>git log --pretty=oneline</code>查看一下当前的版本库</p><p><img src="https://thinkerhope.github.io/2019/09/18/git%E5%AD%A6%E4%B9%A0/git03.png" alt></p><blockquote><p>注意  那一串字符就是该版本号(commit id)</p></blockquote><p>使用<code>git reset --hard HEAD^</code>回退到上一个版本</p><blockquote><p>这里的HEAD有必要解释一下   在Git中，用<code>HEAD</code>表示当前版本，上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个<code>^</code>比较容易数不过来，所以写成<code>HEAD~100</code>。</p></blockquote><p>除了使用HEAD来回退，还可以用commit id来回退</p><p>可以通过<code>git reset --hard commit_id</code>实现回退到具体的版本</p><p><code>git reflog</code>可以用来查看命令历史，可以取到你需要的<code>commit_id</code></p><p><img src="https://thinkerhope.github.io/2019/09/18/git%E5%AD%A6%E4%B9%A0/git04.png" alt></p><p>Git的版本回退速度非常快，因为Git在内部有个指向当前版本的<code>HEAD</code>指针，当你回退版本的时候，Git仅仅是把HEAD重新指向<code>append GPL</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">┌────┐</span><br><span class="line">│HEAD│</span><br><span class="line">└────┘</span><br><span class="line">   │</span><br><span class="line">   └──&gt; ○ append GPL</span><br><span class="line">        │</span><br><span class="line">        ○ add distributed</span><br><span class="line">        │</span><br><span class="line">        ○ wrote a readme file</span><br></pre></td></tr></table></figure><p>改为指向<code>add distributed</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">┌────┐</span><br><span class="line">│HEAD│</span><br><span class="line">└────┘</span><br><span class="line">   │</span><br><span class="line">   │    ○ append GPL</span><br><span class="line">   │    │</span><br><span class="line">   └──&gt; ○ add distributed</span><br><span class="line">        │</span><br><span class="line">        ○ wrote a readme file</span><br></pre></td></tr></table></figure><p><strong>然后顺便把工作区的文件更新了</strong>。所以你让<code>HEAD</code>指向哪个版本号，你就把当前版本定位在哪。</p><h3 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h3><p>工作区：就是你电脑里能看到的目录，就是你在哪个目录里init，哪个目录就是你的工作区</p><p>版本库：就是.git 隐藏目录</p><p><img src="https://thinkerhope.github.io/2019/09/18/git%E5%AD%A6%E4%B9%A0/0.jpeg" alt></p><p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个<code>master</code>分支，所以，现在，<code>git commit</code>就是往<code>master</code>分支上提交更改。</p><p>在工作区创建新文件状态是<code>Untracked</code></p><p><img src="https://thinkerhope.github.io/2019/09/18/git%E5%AD%A6%E4%B9%A0/git05.png" alt></p><p>一旦提交后，如果你又没有对工作区做任何修改，那么工作区就是“干净”的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure><h3 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h3><p>首先要理解<code>Git</code>中的修改</p><blockquote><p>比如你新增了一行，删除了一行，更改了某些字符，删了一些又加了一些，甚至创建一个新文件，删除一个文件，也算一个修改。</p></blockquote><blockquote><p>要理解Git管理的是修改，而不是文件。</p></blockquote><p>如下操作</p><blockquote><p>第一次修改readme.txt -&gt; <code>git add</code> -&gt; 第二次修改readme.txt -&gt; <code>git commit</code></p></blockquote><p>当你<code>git status</code>查看会发现<code>readme.txt</code>依然是<code>modified</code>状态。</p><p>通过<code>git diff HEAD -- readme.txt</code> (该命令可以查看工作区和版本库里面最新版本的区别)</p><p>可以看到第二次修改并没有被提交，需要你　<code>git add</code> + <code>git commit</code> 一波。</p><h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><blockquote><p>丢弃工作区的修改</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- readme.txt</span><br></pre></td></tr></table></figure><p><code>git checkout -- readme.txt</code>意思就是，把<code>readme.txt</code>文件在工作区的修改全部撤销，这里有两种情况：</p><ul><li><p>一种是<code>readme.txt</code>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p></li><li><p>一种是<code>readme.txt</code>已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p><p>总之，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p></li></ul><blockquote><p>注意</p></blockquote><p>命令中的<code>--</code>很重要，没有<code>--</code>，就变成了“切换到另一个分支”的命令。</p><p>看看第二种add之后的情况</p><p><code>git add readme.txt</code>命令之后git会提示你使用<code>git reset HEAD &lt;file&gt;</code>撤销(<code>unstage</code>)，重新放回工作区。</p><p><img src="https://thinkerhope.github.io/2019/09/18/git%E5%AD%A6%E4%B9%A0/git07.png" alt></p><blockquote><p><code>git reset</code>命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用<code>HEAD</code>时，表示最新的版本。</p></blockquote><p>会发现使用git reset HEAD readme.txt只是把暂存区的修改回退到了工作区，此时工作区的readme.txt依然是修改过的。</p><p>通过<code>git checkout</code>可以把回退到工作区的修改丢弃啦，哈哈哈。</p><p>如果已经<code>commit</code>了，那就只能用<code>git reset</code>版本回退了 。</p><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add test.txt</span><br><span class="line"></span><br><span class="line">$ git commit -m <span class="string">"add test.txt"</span></span><br></pre></td></tr></table></figure><p><code>rm test.txt</code></p><p>当你删除工作区的某个文件（已提交），再用<code>git status</code></p><p>Git会提示你<code>test.txt</code>是<code>deleted</code>状态</p><h5 id="第一种情况是你确实要删除版本库中的test-txt"><a href="#第一种情况是你确实要删除版本库中的test-txt" class="headerlink" title="第一种情况是你确实要删除版本库中的test.txt"></a>第一种情况是你确实要删除版本库中的test.txt</h5><p><code>git rm test.txt</code></p><p><code>git commit -m &quot;remove test.txt&quot;</code></p><p>文件就从版本库中被删除了</p><h5 id="另一种情况是删错了"><a href="#另一种情况是删错了" class="headerlink" title="另一种情况是删错了"></a>另一种情况是删错了</h5><p>此时版本库还有该文件</p><p><code>git checkout -- test.txt</code></p><p>实质是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p><blockquote><p>注意　从来没有被添加到版本库就被删除的文件，是无法恢复的！</p></blockquote><h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><blockquote><p>一个疑问 – 为什么GitHub需要SSH Key</p></blockquote><p>因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。</p><p>当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。</p><p>最后友情提示，在GitHub上免费托管的Git仓3库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。</p><p>如果你不想让别人看到Git库，有两个办法，一个是交点保护费，让GitHub把公开的仓库变成私有的，这样别人就看不见了（不可读更不可写）。另一个办法是自己动手，搭一个Git服务器，因为是你自己的Git服务器，所以别人也是看不见的。这个方法我们后面会讲到的，相当简单，公司内部开发必备。</p><blockquote><p>工作情景</p></blockquote><h5 id="情景一"><a href="#情景一" class="headerlink" title="情景一"></a>情景一</h5><p>已经在本地创建了一个Git仓库(仓库名为learnGit)后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作。</p><blockquote><p>github —— create a new repo ——　Repository name填入learnGit，其他保持默认设置</p></blockquote><p>现在，我们根据GitHub的提示，在本地的<code>learnGit</code>仓库下运行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@github.com:thinkerHope/learngit.git</span><br></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><p><code>thinkerHope</code>是你自己的<code>github</code>账户名，否则，你虽然可以关联我的<code>github</code>仓库，但是不可以推送内容。因为你的SSH Key公钥不在我的账户列表中。</p><p>添加后，远程库的名字就是<code>origin</code>，这是Git默认的叫法，也可以改成别的，但是<code>origin</code>这个名字一看就知道是远程库。</p><p>下一步，就可以把本地库的所有内容推送到远程库上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure><blockquote><p>-u参数解释</p></blockquote><p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><p>从现在起，只要本地作了提交，就可以通过命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure><p>把本地<code>master</code>分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！</p><h5 id="前景二"><a href="#前景二" class="headerlink" title="前景二"></a>前景二</h5><p>先创建远程库，然后，从远程库克隆。（从零开发项目的最佳选择）</p><p>create a new repo （名字为<code>gitskills</code>） －&gt; 勾选<code>Initialize this repository with a README</code> —&gt; <code>git clone</code> —&gt;  <code>git clone git@github.com:thinkerHope/gitskills.git</code> －&gt;<code>cd gitskills</code> + <code>ls</code>就可以看到<code>README.md</code></p><h3 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h3><blockquote><p>每次提交(commit)，Git都把它们串成一条时间线，这条时间线就是一个分支。之前的HEAD严格来说不是指向提交，而是指向<code>master</code>，<code>master</code>才是指向提交的，所以，<code>HEAD</code>指向的就是当前分支。</p></blockquote><p><img src="https://thinkerhope.github.io/2019/09/18/git%E5%AD%A6%E4%B9%A0/branch01%5D.png" alt></p><p>每次提交，<code>master</code>分支都会向前移动一步，这样，随着你不断提交，<code>master</code>分支的线也越来越长。</p><p>当我们创建新的分支，例如<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上。</p><p><img src="https://thinkerhope.github.io/2019/09/18/git%E5%AD%A6%E4%B9%A0/branch02.png" alt></p><p>Git创建一个分支很快，因为除了增加一个<code>dev</code>指针，改改<code>HEAD</code>的指向，工作区的文件都没有任何变化。</p><p>不过，从现在开始，对工作区的修改和提交就是针对<code>dev</code>分支了，比如新提交一次后，<code>dev</code>指针往前移动一步，而<code>master</code>指针不变：</p><p><img src="https://thinkerhope.github.io/2019/09/18/git%E5%AD%A6%E4%B9%A0/branch03.png" alt></p><p>假如我们在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上。Git怎么合并呢？最简单的方法，就是直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并。</p><p><img src="https://thinkerhope.github.io/2019/09/18/git%E5%AD%A6%E4%B9%A0/branch04.png" alt></p><p>合并完分支后，甚至可以删除<code>dev</code>分支。删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后，我们就剩下了一条<code>master</code>分支</p><p><img src="https://thinkerhope.github.io/2019/09/18/git%E5%AD%A6%E4%B9%A0/branch05.png" alt></p><p><code>git checkout -b dev</code></p><p>创建<code>dev</code>分支，然后切换到<code>dev</code>分支，加上<code>-b</code>参数表示创建并切换。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch dev</span><br><span class="line">$ git checkout dev</span><br></pre></td></tr></table></figure><p><code>git branch</code></p><p>列出所有分支，当前分支前面会标一个<code>*</code>号。</p><p><img src="https://thinkerhope.github.io/2019/09/18/git%E5%AD%A6%E4%B9%A0/checkout06.png" alt></p><p>在dev分支对readme.txt做修改并提交后，再放回master分支，会发现工作区的修改没有了，因为提交在dev分支上，master分支此刻的提交点没有变。</p><p><img src="https://thinkerhope.github.io/2019/09/18/git%E5%AD%A6%E4%B9%A0/branch06.png" alt></p><blockquote><p>Q  有个问题需要思考一下　工作区的文件会随着版本库的指针改变。</p></blockquote><p><code>git merge dev</code></p><blockquote><p>回到master分支把<code>dev</code>分支的工作成果合并到<code>master</code>分支上</p></blockquote><p><img src="https://thinkerhope.github.io/2019/09/18/git%E5%AD%A6%E4%B9%A0/branch07.png" alt></p><p>然后就可以放心地删除dev分支了。</p><p>上图有个<code>Fast-forward</code>，Git告诉我们，这次合并是“快进模式”，也就是直接把<code>master</code>指向<code>dev</code>的当前提交，所以合并速度非常快。</p><p>当然，也不是每次合并都能<code>Fast-forward</code>，我们后面会讲其他方式的合并。</p><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>创建一个<code>feature</code>分支（刚创建的时候和<code>master</code>指向同一个版本库），做好修改并且提交。</p><p>又回到master分支上，也做修改并且提交。</p><p><strong>现在，<code>master</code>分支和<code>feature1</code>分支各自都分别有新的提交，变成了这样：</strong></p><p><img src="https://thinkerhope.github.io/2019/09/18/git%E5%AD%A6%E4%B9%A0/branch14.png" alt></p><p>在<code>master</code>上<code>git merge feature1</code>发现冲突不允许合并。</p><p>查看冲突文件会看到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git add readme.txt &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">Creating a new branch is quick &amp; simple.</span><br><span class="line">=======</span><br><span class="line">Creating a new branch is quick AND simple.</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1</span><br></pre></td></tr></table></figure><blockquote><p>Git用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记出不同分支的内容</p></blockquote><p>需要自己手动修改后再<code>git add</code> + <code>git commit</code>一波。</p><p><strong>现在，<code>master</code>分支和<code>feature1</code>分支变成了下图所示：</strong></p><p><img src="https://thinkerhope.github.io/2019/09/18/git%E5%AD%A6%E4%B9%A0/branch12.png" alt></p><p><code>git log --graph --pretty=oneline --abbrev-commit</code></p><p>可以看到分支的合并情况。</p><p><strong>小结：解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。</strong></p><h3 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h3><p><code>--no-ff</code>（fast forward模式在删除分支后，会丢掉分支信息）方式的<code>git merge</code>。</p><blockquote><p>普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而<code>fast forward</code>合并就看不出来曾经做过合并。</p></blockquote><p><strong>测试</strong></p><p>和最初我创建合并分支一样</p><p><code>git checkout -b dev</code>之后就是一波<code>git add</code> + <code>git commit</code></p><p><code>git checkout master</code>  最后<code>git merge --no-ff -m &quot;merge with no-ff&quot; dev</code></p><p><img src="https://thinkerhope.github.io/2019/09/18/git%E5%AD%A6%E4%B9%A0/branch20.png" alt></p><p>和ff模式做个对比</p><p><img src="https://thinkerhope.github.io/2019/09/18/git%E5%AD%A6%E4%B9%A0/branch04.png" alt></p><h4 id="分支策略"><a href="#分支策略" class="headerlink" title="分支策略"></a>分支策略</h4><p>在实际开发中，我们应该按照几个基本原则进行分支管理：</p><p>首先，<code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p><p>干活都在<code>dev</code>分支上，也就是说，<code>dev</code>分支是不稳定的，到某个时候，比如1.0版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，在<code>master</code>分支发布1.0版本；</p><p>你和你的小伙伴们每个人都在<code>dev</code>分支上干活，每个人都有自己的分支，时不时地往<code>dev</code>分支上合并就可以了。</p><p>所以，团队合作的分支看起来就像这样：</p><p><img src="https://thinkerhope.github.io/2019/09/18/git%E5%AD%A6%E4%B9%A0/branch18.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;keep-try&quot;&gt;&lt;a href=&quot;#keep-try&quot; class=&quot;headerlink&quot; title=&quot;keep try&quot;&gt;&lt;/a&gt;keep try&lt;/h3&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;学习廖雪峰老师的git
      
    
    </summary>
    
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>网易云dva开发日志 day3</title>
    <link href="http://yoursite.com/2019/09/15/%E7%BD%91%E6%98%93%E4%BA%91dva%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97-day4/"/>
    <id>http://yoursite.com/2019/09/15/网易云dva开发日志-day4/</id>
    <published>2019-09-15T00:29:55.000Z</published>
    <updated>2019-09-18T06:55:11.906Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="愿你的生活每天都开出一朵花来-NHXWYJS"><a href="#愿你的生活每天都开出一朵花来-NHXWYJS" class="headerlink" title="愿你的生活每天都开出一朵花来  NHXWYJS"></a>愿你的生活每天都开出一朵花来  NHXWYJS</h3></blockquote><p>（1)</p><p>之前写组件都是拆成<code>UI</code>和<code>容器</code>…直到被告知<code>dva</code>中是不拆的，而且也不好维护。</p><p><code>dva</code>中的<code>component</code>只放共用组件，routes放业务组件（比如展示…的页面），可以理解为一个路由组件。所以…今天把代码重构了一下。</p><p>(2)</p><p>尝试完全由一个数组加一个img标签实现轮播图。</p><p>这里主要通过数组模拟栈和队列的API实现</p><blockquote><p>队列</p><ul><li>shift:从集合中把第一个元素删除，并返回这个元素的值。</li><li>unshift: 在集合开头添加一个或更多元素，并返回新的长度</li></ul><p>栈</p><ul><li>push:在集合中添加元素，并返回新的长度</li><li>pop:从集合中把最后一个元素删除，并返回这个元素的值。</li></ul></blockquote><p>思路</p><p>(3)今天搞定了网易云的循环动画</p><p>先上代码</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.state = &#123;</span><br><span class="line">left: [<span class="string">"-643px"</span>, <span class="string">"35px"</span>, <span class="string">"713px"</span>, <span class="string">"713px"</span>],</span><br><span class="line">ani: [<span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">this</span>.prev = <span class="keyword">this</span>.prev.bind(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">this</span>.next = <span class="keyword">this</span>.next.bind(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;ul</span><br><span class="line">    className=&#123;classnames(&#123;</span><br><span class="line">    recNewList: <span class="literal">true</span>,</span><br><span class="line">    aniActive: ani[<span class="number">0</span>],</span><br><span class="line">    &#125;)&#125;</span><br><span class="line">    style=&#123;&#123;</span><br><span class="line">      left: left[<span class="number">0</span>],</span><br><span class="line">    &#125;&#125;</span><br><span class="line">  &gt;</span><br><span class="line">  ...</span><br><span class="line">  &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">  &lt;ul</span></span><br><span class="line"><span class="regexp">    className=&#123;classnames(&#123;</span></span><br><span class="line"><span class="regexp">      recNewList: true,</span></span><br><span class="line"><span class="regexp">      aniActive: ani[1],</span></span><br><span class="line"><span class="regexp">    &#125;)&#125;</span></span><br><span class="line"><span class="regexp">    style=&#123;&#123;</span></span><br><span class="line"><span class="regexp">      left: left[1],</span></span><br><span class="line"><span class="regexp">    &#125;&#125;</span></span><br><span class="line"><span class="regexp">  &gt;</span></span><br><span class="line"><span class="regexp">  &lt;/u</span>l&gt;</span><br><span class="line">  &lt;ul</span><br><span class="line">    className=&#123;classnames(&#123;</span><br><span class="line">      recNewList: <span class="literal">true</span>,</span><br><span class="line">      aniActive: ani[<span class="number">2</span>],</span><br><span class="line">    &#125;)&#125;</span><br><span class="line">    style=&#123;&#123;</span><br><span class="line">      left: left[<span class="number">2</span>],</span><br><span class="line">    &#125;&#125;</span><br><span class="line">  &gt;</span><br><span class="line">  &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">  &lt;ul</span></span><br><span class="line"><span class="regexp">    className=&#123;classnames(&#123;</span></span><br><span class="line"><span class="regexp">      recNewList: true,</span></span><br><span class="line"><span class="regexp">      aniActive: ani[3],</span></span><br><span class="line"><span class="regexp">    &#125;)&#125;</span></span><br><span class="line"><span class="regexp">    style=&#123;&#123;</span></span><br><span class="line"><span class="regexp">      left: left[3],</span></span><br><span class="line"><span class="regexp">    &#125;&#125;</span></span><br><span class="line"><span class="regexp">  &gt;</span></span><br><span class="line"><span class="regexp">  &lt;/u</span>l&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">prev() &#123;</span><br><span class="line">    <span class="keyword">const</span> ani = [...this.state.ani];</span><br><span class="line">    <span class="keyword">const</span> left = [...this.state.left];</span><br><span class="line">    <span class="comment">// console.log(left.indexOf("35px"));</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; ani.length ; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(i !== left.indexOf(<span class="string">"35px"</span>)) &#123;</span><br><span class="line">    ani[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> index = (left.indexOf(<span class="string">"35px"</span>) - <span class="number">1</span>) &lt; <span class="number">0</span> ? <span class="number">3</span> : left.indexOf(<span class="string">"35px"</span>) - <span class="number">1</span>;</span><br><span class="line">    ani[index] = <span class="literal">true</span>;</span><br><span class="line">    left.push(left.shift());</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">    left,</span><br><span class="line">    ani,</span><br><span class="line">    &#125;);</span><br><span class="line"> &#125;</span><br><span class="line"> next() &#123;</span><br><span class="line">    <span class="keyword">const</span> ani = [...this.state.ani];</span><br><span class="line">    <span class="keyword">const</span> left = [...this.state.left];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; ani.length ; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(i !== left.indexOf(<span class="string">"35px"</span>)) &#123;</span><br><span class="line">    ani[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> index = (left.indexOf(<span class="string">"35px"</span>) + <span class="number">1</span>) &gt; <span class="number">3</span> ? <span class="number">0</span> : left.indexOf(<span class="string">"35px"</span>) + <span class="number">1</span>;</span><br><span class="line">    ani[index] = <span class="literal">true</span>;</span><br><span class="line">    left.unshift(left.pop());</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">    left,</span><br><span class="line">    ani,</span><br><span class="line">    &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>(3)关于样式共用</p><p>例如ico整个网站都是共用的，每个页面都要重复写ico-position就会很low。</p><p>(4)关于react</p><blockquote><ul><li>render()里面不该有this.setState(),因为每一个纯函数都不该引起状态的变化。而是应该完全由this.state和this.props来决定渲染的内容。</li><li>componentWillMount存在的主要目的是为了和componentDidMount对称，意义不大，被废弃了。</li><li>子组件不应该修改传入的props值。试想一下当一个父组件有多个子组件，并传入一个js对象，当某个子组件改变对象时，其他子组件都会受到影响。</li><li>并不提倡在JSX中直接把匿名函数直接赋值给事件。原因：每次渲染都会创造一个新的匿名方法对象，而且有可能会引发子组件不必要的重新渲染。</li><li><code>componentWillUnmount</code>中的工作往往和componentDidMount有关，比如在componentDidMount中用非React方法创造了一些DOM元素，如果撒手不管肯内存泄漏，需要在componentWillUnmount中清理这些DOM。</li></ul></blockquote><p>(5)ｄva的model中多个异步问题</p><p>直接贴代码</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Arr = [];</span><br><span class="line">        <span class="keyword">if</span>(payload.idxArr) &#123;</span><br><span class="line">          Arr = <span class="keyword">yield</span> payload.idxArr.map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> call(toplistService.getTopList, item);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>底层是redux-saga的Promise.all()</p></blockquote><p>(6)了解一些基本的Ubuntu命令</p><blockquote><p>ll = ls -l  列出</p><p>ls -a   隐藏文件 （”.”开头的文件）</p><p>du -h –max-depth=1 查看各文件夹大小命令</p><p>cat xxx.xxx 展示该文件</p><p>pwd 执行pwd指令可立刻得知您目前所在的工作目录的绝对路径名称</p></blockquote><p>（7）git学习</p><blockquote><p>git命令的基本数据流</p></blockquote><p><img src="https://thinkerhope.github.io/2019/09/15/%E7%BD%91%E6%98%93%E4%BA%91dva%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97-day4/git.jpeg" alt></p><p>一个git仓库包含工作目录，与.git目录。其中.git目录是工作目录的下的一级子目录。</p><p><strong>文件状态</strong></p><blockquote><p>已修改（Modified） - 文件已修改，且没有存入缓存或者版本库</p><p>已缓存（Staged） - 文件最新修改已放入缓存区中，但尚未存入版本库</p><p>已提交（Committed） - 文件最新修改已存入版本库</p></blockquote><p>基本命令</p><blockquote><p>git init - 初始化工作目录，使之能够被git管理。会生成子目录“.git”.</p><p>git commit -m “des” - 总是从缓冲区发出。</p><p>git commit –amend -m “Correct message” - 把本次提交与最后一次提交合并（删除最后一次提交，加入合并后的提交</p><p>echo”temp/“ &gt;&gt; .gitignore - 忽略的文件 ignore files</p><p> git status - 显示某些文件已修改，哪些文件已准备提交等信息</p><p>git add xxx.xxx  将文件加入缓存区</p><p>git branch -a - 列出所以分支</p><p>git branch xxx - 创建</p><p>git branch -d xxx - 删除</p><p>git branch -m <oldname> <newname> - 重命名</newname></oldname></p><p>git branch xxx –edit-description - 修改分支描述</p><p>git checout　- 到缺省分支</p><p>git checkout xxx -切换至某分支</p><p>git checkout -b xxx - 创建新分支并切换至新分支</p><p>git clone URI路径</p><p>git clone –depth 1 URI路径  注意如果不设置–no–single-branch，只会克隆HEAD所在的分支。–depth表示克隆的最近版本数</p><p>git diff - 显示缓存区（Index）与当前git库版本之间的差异</p><p>git diff –cached</p><p>显示工作目录与当前git库版本之间的差异</p><p> git diff HEAD</p><p>git log - 显示所以提交 –online –merges –graph</p><p>git merge xxx - 把其他某个分支，合并入当前分支</p><p>git mv old.xxx new.xxx - 改名</p><p>git mv xx.xx ./path/to/xx - 移动</p><p> git mv -f myFile existingFile - 强制改名或者移动文件（适用于目的文件已经存在的情况）</p><p>git pull <remote> <branch> - 把远端origin的master分支拖动到本端git仓库</branch></remote></p><p>git pull origin master -  如果当前分支与某个“远端分支”绑定，则先把其远端分支拖动到本地，再合并入当前分支</p><p>git pull - 合并到本端分支的策略是采用rebase</p><p>git rebase master experimentBranch - 把特性开发分支重整到主分支上 - 一个重要准则：不要重整已经提交到公共仓库的版本</p><p>git reset - 用HEAD指向的内容更新缓存区（Index）</p><p> git reset –hard - 用HEAD指向的内容更新缓存区（Index）与工作目录</p><p>git reset 31f2bb1 - 先移动HEAD指针，再用get reset的操作</p><p>git reset –hard 31f2bb1 - 先移动HEAD指针，再用git reset –hard的操作</p><p>git reset –soft 31f2bb1 -  只移动HEAD指针</p><p> git revert <commit> - 回退特定提交</commit></p><p>git rm /pather/to/the/file/HelloWorld.c - 删除文件(删除文件的同时，也变更git工作目录与缓存区（Index）的状态)</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;愿你的生活每天都开出一朵花来-NHXWYJS&quot;&gt;&lt;a href=&quot;#愿你的生活每天都开出一朵花来-NHXWYJS&quot; class=&quot;headerlink&quot; title=&quot;愿你的生活每天都开出一朵花来  NHXWYJS&quot;&gt;&lt;/a&gt;愿你的生活每
      
    
    </summary>
    
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
      <category term="dva" scheme="http://yoursite.com/tags/dva/"/>
    
  </entry>
  
  <entry>
    <title>网易云dva开发日志 day2</title>
    <link href="http://yoursite.com/2019/09/14/%E7%BD%91%E6%98%93%E4%BA%91dva%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97-day2/"/>
    <id>http://yoursite.com/2019/09/14/网易云dva开发日志-day2/</id>
    <published>2019-09-14T00:32:52.000Z</published>
    <updated>2019-09-18T01:20:01.174Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h4 id="无论天涯海角，朋友的呼唤都是岁月幽谷中最悠长的回声。有朋友的日子，不会孤独，不会忧伤，不会颓废。"><a href="#无论天涯海角，朋友的呼唤都是岁月幽谷中最悠长的回声。有朋友的日子，不会孤独，不会忧伤，不会颓废。" class="headerlink" title="无论天涯海角，朋友的呼唤都是岁月幽谷中最悠长的回声。有朋友的日子，不会孤独，不会忧伤，不会颓废。"></a>无论天涯海角，朋友的呼唤都是岁月幽谷中最悠长的回声。有朋友的日子，不会孤独，不会忧伤，不会颓废。</h4></blockquote><h4 id="1-裁剪文字，多余的显示省略号"><a href="#1-裁剪文字，多余的显示省略号" class="headerlink" title="(1) 裁剪文字，多余的显示省略号"></a>(1) 裁剪文字，多余的显示省略号</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">搭配的css样式&#123;（一句不能少，才能显示溢出部分省略号的效果）</span><br><span class="line"><span class="selector-tag">white-space</span><span class="selector-pseudo">:nowrap</span>;</span><br><span class="line"><span class="selector-tag">overflow</span><span class="selector-pseudo">:hidden</span>;</span><br><span class="line"><span class="selector-tag">text-overflow</span><span class="selector-pseudo">:ellipsis</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（2）上标和下标"><a href="#（2）上标和下标" class="headerlink" title="（2）上标和下标"></a>（2）上标和下标</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">p</span>&gt;</span><br><span class="line">This text contains &lt;sub&gt;subscript&lt;/sub&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">p</span>&gt;</span><br><span class="line">This text contains &lt;sup&gt;superscript&lt;/sup&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">This</span> <span class="selector-tag">text</span> <span class="selector-tag">contains</span> <span class="selector-tag">subscript</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">This</span> <span class="selector-tag">text</span> <span class="selector-tag">contains</span> <span class="selector-tag">superscript</span></span><br></pre></td></tr></table></figure><h4 id="3-dva发送请求的坑"><a href="#3-dva发送请求的坑" class="headerlink" title="(3)dva发送请求的坑"></a>(3)dva发送请求的坑</h4><p>错误的写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> temp = <span class="keyword">yield</span> call(<span class="function"><span class="params">()</span> =&gt;</span> &#123;songListService.getSongList(payload.tag)&#125;, &#123;&#125;);</span><br></pre></td></tr></table></figure><p>正确的写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> temp = <span class="keyword">yield</span> call(songListService.getSongList, payload.tag);</span><br></pre></td></tr></table></figure><p>太牛逼了奥</p><h4 id="4"><a href="#4" class="headerlink" title="(4)"></a>(4)</h4><p>dva redux数据管理都在models，根据业务不同models可能会有几十甚至上百的 【模块.js】</p><p>每次在index.js使用 app.model(require(‘./models/example’).default);  引入 Model 可能要写多个，可能就不优雅了。</p><blockquote><p><code>require.context()</code>函数创建自己的上下文</p></blockquote><p>它允许您传入一个目录进行搜索，一个标志指示是否应该搜索子目录，还有一个正则表达式来匹配文件。</p><blockquote><p>语法</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>.context(directory, useSubdirectories = <span class="literal">false</span>, regExp = <span class="regexp">/^\.\//</span>);</span><br></pre></td></tr></table></figure><blockquote><p>参数</p></blockquote><ul><li>directory：说明需要检索的目录</li><li>useSubdirectories：是否检索子目录</li><li>regExp: 匹配文件的正则表达式</li></ul><blockquote><p>栗子</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> models = <span class="built_in">require</span>.context(<span class="string">"./models"</span>, <span class="literal">true</span>, /^\.\/.*\.js$/);</span><br><span class="line">models.keys().forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">app.model(models(key).default);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="5"><a href="#5" class="headerlink" title="(5)"></a>(5)</h4><p>如何实现根据分页组件的curPage发送对应的网易云api请求</p><p>请求如下</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request(<span class="string">`http://localhost:3000/top/playlist?limit=35&amp;order=new&amp;cat="<span class="subst">$&#123;tag&#125;</span> &amp;offset=<span class="subst">$&#123;curPage*<span class="number">35</span>&#125;</span>`</span>)</span><br></pre></td></tr></table></figure><p>根据offset确定请求的页面，如offset=35表示第一页，70第二页，105第三页…35表示每页要展示的列表数。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h4 id=&quot;无论天涯海角，朋友的呼唤都是岁月幽谷中最悠长的回声。有朋友的日子，不会孤独，不会忧伤，不会颓废。&quot;&gt;&lt;a href=&quot;#无论天涯海角，朋友的呼唤都是岁月幽谷中最悠长的回声。有朋友的日子，不会孤独，不会忧伤，不会颓废。&quot; class=&quot;he
      
    
    </summary>
    
    
    
      <category term="dva" scheme="http://yoursite.com/tags/dva/"/>
    
  </entry>
  
  <entry>
    <title>网易云dva开发日志  day1</title>
    <link href="http://yoursite.com/2019/09/13/%E7%BD%91%E6%98%93%E4%BA%91dva%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%9701/"/>
    <id>http://yoursite.com/2019/09/13/网易云dva开发日志01/</id>
    <published>2019-09-13T00:00:42.000Z</published>
    <updated>2019-09-13T14:32:33.797Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="请你不要突然走进我的世界，又突然对我爱理不理。"><a href="#请你不要突然走进我的世界，又突然对我爱理不理。" class="headerlink" title="请你不要突然走进我的世界，又突然对我爱理不理。"></a>请你不要突然走进我的世界，又突然对我爱理不理。</h3></blockquote><p>(1)</p><blockquote><p>报错 </p></blockquote><blockquote><p>You should not use <navlink> outside a <router></router></navlink></p></blockquote><blockquote><p>原因</p></blockquote><p>我们在dva里直接 <code>import { NavLink } from &#39;react-router-dom&#39;;</code>了。</p><p>只能通过<code>import { NavLink } from &#39;dva/router&#39;;</code>来引入。我哭了…</p><p>(2)初次使用网易云API开发</p><blockquote><p>dva的设计理念为响应式开发，即把所有的操作都丢给redux，其它组件只要dispatch()就可以了。</p></blockquote><ul><li><p><code>services</code>下新建<code>songlist.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'../utils/request'</span>;</span><br><span class="line"><span class="comment">//request为dva为你封装好的。</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getTagList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(<span class="string">'http://localhost:3000/playlist/catlist'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改<code>model</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">effects: &#123;</span><br><span class="line">   *getTags(action, &#123; call, put &#125;) &#123;</span><br><span class="line">     <span class="keyword">const</span> temp = <span class="keyword">yield</span> call(songListService.getTagList, &#123;&#125;);</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'temp.data'</span>, temp.data);</span><br><span class="line">     <span class="keyword">if</span>(temp.data.code === <span class="number">200</span>) &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(temp.data.categories)</span><br><span class="line">  </span><br><span class="line">       <span class="keyword">yield</span> put(&#123;</span><br><span class="line">         type: <span class="string">'add-tags-list'</span>,</span><br><span class="line">         payload: &#123;</span><br><span class="line">           categories: temp.data.categories,</span><br><span class="line">           sub: temp.data.sub,</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure></li><li><p><code>reducers</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'add-tags-list'</span>(state, &#123; payload &#125;) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> categories = [];</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> cat <span class="keyword">in</span> payload.categories) &#123;</span><br><span class="line">        categories.push(payload.categories[cat]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> sub = [];</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; categories.length ; i++) &#123;</span><br><span class="line">        sub.push([]);</span><br><span class="line">      &#125;</span><br><span class="line">      payload.sub.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        sub[item.category].push(&#123;</span><br><span class="line">          name: item.name,</span><br><span class="line">          hot: item.hot,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure></li><li><p>在组件中发dispatch</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123; getTagList &#125; = <span class="keyword">this</span>.props;</span><br><span class="line"></span><br><span class="line">    getTagList();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapDispatch = <span class="function">(<span class="params">dispatch</span>) =&gt;</span> (&#123;</span><br><span class="line">    getTagList() &#123;</span><br><span class="line">      dispatch(&#123;</span><br><span class="line">        type: <span class="string">'SongList/getTags'</span>,<span class="comment">//注意getTags方法名要和effects中的方法名相同。</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>(3)WebStorm</p><blockquote><p>问题描述</p></blockquote><p>WebStorm将<code>index.js</code>文件默认识别为<code>txt</code></p><blockquote><p>解决</p></blockquote><p>File — settings — FileTypes找到<code>Text</code>类型，</p><p>将其中的<code>index.js</code>格式取消，apply—Ok</p><p>(4)阻止双击选中</p><p>常规项目，我们只需要给标签加一个<code>onselectstart</code>事件，<code>return false;</code>就可以。</p><p>但是在React中，是没有<code>onselectstart</code>事件的。我们只需要给标签添加个样式就可以了。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.node</span>&#123;<span class="comment">/*node为标签的class名*/</span></span><br><span class="line">  <span class="attribute">-webkit-user-select</span>: none;  </span><br><span class="line">  <span class="attribute">-moz-user-select</span>:none;  </span><br><span class="line">  <span class="attribute">-o-user-select</span>:none;  </span><br><span class="line">  <span class="attribute">-ms-user-select</span>:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(5)一个数组中包含多个对象，如何高效把所有对象中某个属性相同的对象去重</p><p>常见的一个业务请求数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">arr = [</span><br><span class="line">    &#123;</span><br><span class="line">        a: <span class="string">'1'</span>,</span><br><span class="line">        b: <span class="string">'q1'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        a: <span class="string">'2'</span>,</span><br><span class="line">        b: <span class="string">'q2'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        a: <span class="string">'1'</span>,</span><br><span class="line">        b: <span class="string">'q3'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        a: <span class="string">'1'</span>,</span><br><span class="line">        b: <span class="string">'q4'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        a: <span class="string">'2'</span>,</span><br><span class="line">        b: <span class="string">'q5'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        a: <span class="string">'3'</span>,</span><br><span class="line">        b: <span class="string">'q6'</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使特定属性相同(例如这里的属性‘a’)的对象去重</span></span><br><span class="line"><span class="keyword">let</span> O = arr.map(<span class="function"><span class="params">a</span> =&gt;</span> a[<span class="string">'a'</span>]).reduce(<span class="function">(<span class="params">o, k, i</span>) =&gt;</span> [o[k] = i, o][<span class="number">1</span>], &#123;&#125;)</span><br><span class="line"><span class="built_in">Object</span>.keys(O).map(<span class="function"><span class="params">k</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果是要覆盖多个属性，那就这里用扩展库的 clone 方法（考虑到嵌套）把原来的复制一份然后修改 a 的值</span></span><br><span class="line">    <span class="comment">// 如果不嵌套，那就</span></span><br><span class="line">    <span class="comment">// let o = &#123;a: k&#125;;</span></span><br><span class="line">    <span class="comment">// Object.keys(arr[O[k]]).forEach(key =&gt; o[key] = arr[O[k]][key]);</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">a</span>: k, <span class="attr">b</span>: arr[O[k]][<span class="string">'b'</span>]&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>(6)理解ES6稍微复杂一点的解构赋值内容</p><blockquote><p>解构赋值为浅拷贝</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="number">1</span> &#125; &#125;;</span><br><span class="line"><span class="comment">//其实就是表示对象属性a是个对象</span></span><br><span class="line"><span class="keyword">let</span> &#123; ...x &#125; = obj;</span><br><span class="line">obj.a.b = <span class="number">2</span>;</span><br><span class="line">x.a.b <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>举个栗子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">action = &#123;</span><br><span class="line">  type: <span class="string">'../..'</span>,</span><br><span class="line">  payload: &#123;</span><br><span class="line">    categories,</span><br><span class="line">    sub,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>{ payload: { categories, sub } } = action;</code></p><p>实现嵌套赋值给<code>categories</code>和<code>sub</code>，但要注意是浅拷贝。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; x, y, ...z &#125; = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> &#125;;</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 2</span></span><br><span class="line">z <span class="comment">// &#123; a: 3, b: 4 &#125;</span></span><br></pre></td></tr></table></figure><p>解构赋值必须是最后一个参数，否则会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; ...x, y, z &#125; = someObject; <span class="comment">// 句法错误</span></span><br><span class="line"><span class="keyword">let</span> &#123; x, ...y, ...z &#125; = someObject; <span class="comment">// 句法错误</span></span><br></pre></td></tr></table></figure><blockquote><p>have a nice day</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;请你不要突然走进我的世界，又突然对我爱理不理。&quot;&gt;&lt;a href=&quot;#请你不要突然走进我的世界，又突然对我爱理不理。&quot; class=&quot;headerlink&quot; title=&quot;请你不要突然走进我的世界，又突然对我爱理不理。&quot;&gt;&lt;/a&gt;请你不要
      
    
    </summary>
    
    
    
      <category term="dva" scheme="http://yoursite.com/tags/dva/"/>
    
  </entry>
  
  <entry>
    <title>dva开发-分页组件</title>
    <link href="http://yoursite.com/2019/09/12/dva%E5%BC%80%E5%8F%91-%E5%88%86%E9%A1%B5%E7%BB%84%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/09/12/dva开发-分页组件/</id>
    <published>2019-09-12T07:02:30.000Z</published>
    <updated>2019-09-12T21:09:18.104Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="船长，我们去哪里啊，希板鸭还是伊塔厘。"><a href="#船长，我们去哪里啊，希板鸭还是伊塔厘。" class="headerlink" title="船长，我们去哪里啊，希板鸭还是伊塔厘。"></a>船长，我们去哪里啊，希板鸭还是伊塔厘。</h3></blockquote><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>记录一下开发网易云写的分页组件（老板要求dva，第一次写dva，感觉和react-redux区别不大，但是目录结构清晰很多），直接贴代码了，很乱。emmm…反正只有自己看。</p></blockquote><h3 id="UI组件"><a href="#UI组件" class="headerlink" title="UI组件"></a>UI组件</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** UI params</span></span><br><span class="line"><span class="comment"> * @param curPage - current page</span></span><br><span class="line"><span class="comment"> * @param groupCount - page count between ellipsis</span></span><br><span class="line"><span class="comment"> * @param totalPage - psge count</span></span><br><span class="line"><span class="comment"> * @param startPage - page show between ellipsis</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"><span class="keyword">import</span> classnames <span class="keyword">from</span> <span class="string">'classnames'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./index.less'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PaginationUI = (&#123; curPage, groupCount, totalPage, startPage = <span class="number">6</span>,</span><br><span class="line">                      handlePageClick, prev, next,</span><br><span class="line">                    &#125;) =&gt; (</span><br><span class="line"></span><br><span class="line">                      &lt;div className=<span class="string">"pagination"</span>&gt;</span><br><span class="line">                        &lt;ul className=<span class="string">"pagi-list"</span>&gt;</span><br><span class="line">                          &lt;a</span><br><span class="line">                            className=&#123;classnames(&#123;</span><br><span class="line">                              <span class="string">"zbtn"</span>: <span class="literal">true</span>,</span><br><span class="line">                              <span class="string">"prev"</span>: <span class="literal">true</span>,</span><br><span class="line">                              <span class="string">"disable"</span>: curPage === <span class="number">1</span></span><br><span class="line">                            &#125;)&#125;</span><br><span class="line">                            onClick=&#123;prev&#125;</span><br><span class="line">                          &gt;</span><br><span class="line">                            上一页</span><br><span class="line">                          &lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">                          &lt;a</span></span><br><span class="line"><span class="regexp">                            className=&#123;classnames(&#123;</span></span><br><span class="line"><span class="regexp">                              "zpgi": true,</span></span><br><span class="line"><span class="regexp">                              "js-selected": curPage === 1</span></span><br><span class="line"><span class="regexp">                            &#125;)&#125;</span></span><br><span class="line"><span class="regexp">                            onClick=&#123;handlePageClick&#125;</span></span><br><span class="line"><span class="regexp">                          &gt;</span></span><br><span class="line"><span class="regexp">                            1</span></span><br><span class="line"><span class="regexp">                          &lt;/</span>a&gt;</span><br><span class="line">                          &lt;span</span><br><span class="line">                            className=&#123;classnames(&#123;</span><br><span class="line">                              zdot: curPage &lt; <span class="number">6</span> &amp;&amp; totalPage &gt;= <span class="number">9</span>,</span><br><span class="line">                            &#125;)&#125;</span><br><span class="line">                          &gt;</span><br><span class="line">                            ...</span><br><span class="line">                          &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">                          &#123;</span></span><br><span class="line"><span class="regexp">                            Array.from(&#123;length: groupCount&#125;).map((item, index) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">                              if(curPage &lt; 6) &#123;</span></span><br><span class="line"><span class="regexp">                                return index + 2;</span></span><br><span class="line"><span class="regexp">                              &#125;else &#123;</span></span><br><span class="line"><span class="regexp">                                return index + startPage;</span></span><br><span class="line"><span class="regexp">                              &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">                            &#125;).map(</span></span><br><span class="line"><span class="regexp">                              (item, index) =&gt;</span></span><br><span class="line"><span class="regexp">                                (item &lt; totalPage) &amp;&amp; &lt;a</span></span><br><span class="line"><span class="regexp">                                  className=&#123;classnames(&#123;</span></span><br><span class="line"><span class="regexp">                                    "zpgi": true,</span></span><br><span class="line"><span class="regexp">                                    "js-selected": item === curPage</span></span><br><span class="line"><span class="regexp">                                  &#125;)&#125;</span></span><br><span class="line"><span class="regexp">                                  onClick=&#123;handlePageClick&#125;</span></span><br><span class="line"><span class="regexp">                                &gt;</span></span><br><span class="line"><span class="regexp">                                  &#123;item&#125;</span></span><br><span class="line"><span class="regexp">                                &lt;/</span>a&gt;</span><br><span class="line">                              )</span><br><span class="line">                          &#125;</span><br><span class="line">                          &lt;span</span><br><span class="line">                            className=&#123;classnames(&#123;</span><br><span class="line">                              zdot: curPage &gt; totalPage - groupCount &amp;&amp; totalPage &gt;= <span class="number">9</span>,</span><br><span class="line">                            &#125;)&#125;</span><br><span class="line">                          &gt;</span><br><span class="line">                            ...</span><br><span class="line">                          &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">                          &lt;a</span></span><br><span class="line"><span class="regexp">                            className=&#123;classnames(&#123;</span></span><br><span class="line"><span class="regexp">                              "zpgi": true,</span></span><br><span class="line"><span class="regexp">                              "js-selected": curPage === totalPage</span></span><br><span class="line"><span class="regexp">                            &#125;)&#125;</span></span><br><span class="line"><span class="regexp">                            onClick=&#123;handlePageClick&#125;</span></span><br><span class="line"><span class="regexp">                          &gt;</span></span><br><span class="line"><span class="regexp">                            &#123;totalPage&#125;</span></span><br><span class="line"><span class="regexp">                          &lt;/</span>a&gt;</span><br><span class="line">                          &lt;a</span><br><span class="line">                            className=&#123;classnames(&#123;</span><br><span class="line">                              <span class="string">"zbtn"</span>: <span class="literal">true</span>,</span><br><span class="line">                              <span class="string">"next"</span>: <span class="literal">true</span>,</span><br><span class="line">                              <span class="string">"disable"</span>: curPage === totalPage</span><br><span class="line">                            &#125;)&#125;</span><br><span class="line">                            onClick=&#123;next&#125;</span><br><span class="line">                          &gt;</span><br><span class="line">                            下一页</span><br><span class="line">                          &lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">                        &lt;/u</span>l&gt;</span><br><span class="line">                      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">                    );</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">PaginationUI.propTypes = &#123;</span></span><br><span class="line"><span class="regexp">  prev: PropTypes.func.isRequired,</span></span><br><span class="line"><span class="regexp">  next: PropTypes.func.isRequired,</span></span><br><span class="line"><span class="regexp">  handlePageClick: PropTypes.func.isRequired,</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default PaginationUI;</span></span><br></pre></td></tr></table></figure><h3 id="UI组件样式"><a href="#UI组件样式" class="headerlink" title="UI组件样式"></a>UI组件样式</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.pagination</span> &#123;</span><br><span class="line">  <span class="selector-class">.zdot</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-id">#a</span>() &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">3px</span> <span class="number">0</span> <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-id">#node</span>()&#123;<span class="comment">/*去除双击选中文字*/</span></span><br><span class="line">    <span class="attribute">-webkit-user-select</span>: none;</span><br><span class="line">    <span class="attribute">-moz-user-select</span>:none;</span><br><span class="line">    <span class="attribute">-o-user-select</span>:none;</span><br><span class="line">    <span class="attribute">-ms-user-select</span>:none;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.js-selected</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: transparent url(<span class="string">"../../../assets/button.png"</span>) no-repeat;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#A2161B</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: default;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.zpgi</span> &#123;</span><br><span class="line">    <span class="selector-id">#a</span>();</span><br><span class="line">    <span class="selector-id">#node</span>();</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">22px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">22px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">7px</span>;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:not(.js-selected)</span> &#123;</span><br><span class="line">      <span class="attribute">border-color</span>: <span class="number">#666</span>;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.zbtn</span> &#123;</span><br><span class="line">    <span class="selector-id">#a</span>();</span><br><span class="line">    <span class="selector-id">#node</span>();</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">69px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">background</span>: transparent url(<span class="string">"../../../assets/button.png"</span>) no-repeat;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">@padding-btn:</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="selector-class">.next</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: -<span class="number">75px</span> -<span class="number">561px</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="variable">@padding-btn</span>;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-class">.disable</span> &#123;</span><br><span class="line">      <span class="attribute">background-position</span>: -<span class="number">75px</span> -<span class="number">621px</span> ;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#CACACA</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.prev</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: -<span class="number">2px</span> -<span class="number">561px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="variable">@padding-btn</span>;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-class">.disable</span> &#123;</span><br><span class="line">      <span class="attribute">background-position</span>: -<span class="number">1px</span> -<span class="number">621px</span> ;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#CACACA</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="下面是容器组件"><a href="#下面是容器组件" class="headerlink" title="下面是容器组件"></a>下面是容器组件</h3><blockquote><p>这样开发真的舒服</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'dva'</span>;</span><br><span class="line"><span class="keyword">import</span> PaginationUI <span class="keyword">from</span> <span class="string">'../paginationUI'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//es7修饰器@connect() - connect的语法糖，可以不用在connect里写dispatch。eject配置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Pagination = <span class="function">(<span class="params">&#123; dispatch, SongList &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; totalPage,</span><br><span class="line">          groupCount,</span><br><span class="line">          curPage,</span><br><span class="line">          startPage, &#125; = SongList;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"songlist-wrap"</span>&gt;</span><br><span class="line">      &lt;PaginationUI</span><br><span class="line">        totalPage=&#123;totalPage&#125;</span><br><span class="line">        groupCount=&#123;groupCount&#125;</span><br><span class="line">        curPage=&#123;curPage&#125;</span><br><span class="line">        startPage=&#123;startPage&#125;</span><br><span class="line">        handlePageClick=&#123;handlePageClick&#125;</span><br><span class="line">        prev=&#123;handlePrevClick&#125;</span><br><span class="line">        next=&#123;handleNextClick&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  function handlePageClick(e) &#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    dispatch(&#123;</span></span><br><span class="line"><span class="regexp">      type: 'SongList/</span>orientate-cur-page<span class="string">',</span></span><br><span class="line"><span class="string">      curPage: parseInt(e.target.innerHTML),</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  function handleNextClick(e) &#123;</span></span><br><span class="line"><span class="string">    if(curPage === groupCount + startPage - 1 &amp;&amp; curPage !== totalPage) &#123;</span></span><br><span class="line"><span class="string">      dispatch(&#123;</span></span><br><span class="line"><span class="string">        type: '</span>SongList/change-start-page<span class="string">',</span></span><br><span class="line"><span class="string">        startPage: startPage + groupCount,</span></span><br><span class="line"><span class="string">      &#125;);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    if(curPage === totalPage - groupCount + 1) &#123;</span></span><br><span class="line"><span class="string">      dispatch(&#123;</span></span><br><span class="line"><span class="string">        type: '</span>SongList/change-start-page<span class="string">',</span></span><br><span class="line"><span class="string">        startPage: curPage,</span></span><br><span class="line"><span class="string">      &#125;);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    !(curPage === totalPage) &amp;&amp; dispatch(&#123;</span></span><br><span class="line"><span class="string">      type: '</span>SongList/next-page<span class="string">',</span></span><br><span class="line"><span class="string">      curPage: curPage + 1,</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  function handlePrevClick(e) &#123;</span></span><br><span class="line"><span class="string">    if(curPage === startPage) &#123;</span></span><br><span class="line"><span class="string">      dispatch(&#123;</span></span><br><span class="line"><span class="string">        type: '</span>SongList/change-start-page<span class="string">',</span></span><br><span class="line"><span class="string">        startPage: startPage - groupCount ,</span></span><br><span class="line"><span class="string">      &#125;);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    !(curPage === 1) &amp;&amp; dispatch(&#123;</span></span><br><span class="line"><span class="string">      type: '</span>SongList/prev-page<span class="string">',</span></span><br><span class="line"><span class="string">      curPage: curPage - 1,</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default connect((&#123; SongList &#125;) =&gt; (&#123;</span></span><br><span class="line"><span class="string">  SongList,</span></span><br><span class="line"><span class="string">&#125;))(Pagination);</span></span><br></pre></td></tr></table></figure><h3 id="model"><a href="#model" class="headerlink" title="model"></a>model</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  namespace: <span class="string">"SongList"</span>,</span><br><span class="line">  state: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  reducers: &#123;</span><br><span class="line">    <span class="string">'orientate-cur-page'</span>(state, &#123; curPage &#125;) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        curPage,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'next-page'</span>(state, &#123; curPage &#125;) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        curPage,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'prev-page'</span>(state, &#123; curPage &#125;) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        curPage,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'change-start-page'</span>(state, &#123; startPage &#125;) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        startPage,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>就这样吧。截止今天，点击的bug并没有解决（懒）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;船长，我们去哪里啊，希板鸭还是伊塔厘。&quot;&gt;&lt;a href=&quot;#船长，我们去哪里啊，希板鸭还是伊塔厘。&quot; class=&quot;headerlink&quot; title=&quot;船长，我们去哪里啊，希板鸭还是伊塔厘。&quot;&gt;&lt;/a&gt;船长，我们去哪里啊，希板鸭还是伊
      
    
    </summary>
    
    
    
      <category term="dva" scheme="http://yoursite.com/tags/dva/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="组件开发" scheme="http://yoursite.com/tags/%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
