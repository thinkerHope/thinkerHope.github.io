<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>记录我的点滴</title>
  
  <subtitle>Yu Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-31T15:31:36.045Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>boygreen_Yu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常用JS函数学习</title>
    <link href="http://yoursite.com/2019/10/31/%E5%B8%B8%E7%94%A8JS%E5%87%BD%E6%95%B0%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2019/10/31/常用JS函数学习/</id>
    <published>2019-10-31T13:27:56.000Z</published>
    <updated>2019-10-31T15:31:36.045Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一份 JS 常用业务函数手册，例如时间格式的处理、用的是哪个手机浏览器，手机号、邮箱的验证，以此来提高你的开发效率</p></blockquote><h3 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">formatDate</span> (<span class="params">oldDate, fmt</span>) </span>&#123; </span><br><span class="line"> <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>() </span><br><span class="line"> <span class="keyword">if</span> (<span class="keyword">typeof</span> oldDate === <span class="string">'string'</span> || <span class="keyword">typeof</span> oldDate === <span class="string">'number'</span>) &#123; </span><br><span class="line"> date = <span class="keyword">new</span> <span class="built_in">Date</span>(+oldDate) </span><br><span class="line"> &#125; <span class="keyword">else</span> &#123; </span><br><span class="line"> date = oldDate </span><br><span class="line"> &#125; </span><br><span class="line"><span class="keyword">if</span> (<span class="regexp">/(y+)/</span>.test(fmt)) &#123; </span><br><span class="line"> fmt = fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (date.getFullYear() + <span class="string">''</span>).substr(<span class="number">4</span> - <span class="built_in">RegExp</span>.$<span class="number">1.</span>length)) </span><br><span class="line">&#125; </span><br><span class="line"> <span class="keyword">let</span> o = &#123; </span><br><span class="line">  <span class="comment">// getMonth()返回0~11 </span></span><br><span class="line"> <span class="string">'M+'</span>: date.getMonth() + <span class="number">1</span>, </span><br><span class="line"> <span class="string">'d+'</span>: date.getDate(), </span><br><span class="line"> <span class="string">'h+'</span>: date.getHours(), </span><br><span class="line"> <span class="string">'m+'</span>: date.getMinutes(), </span><br><span class="line"> <span class="string">'s+'</span>: date.getSeconds() </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">padLeftZero</span> (<span class="params">str</span>) </span>&#123; </span><br><span class="line"> <span class="keyword">return</span> (<span class="string">'00'</span> + str).substr(str.length) </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> o) &#123; </span><br><span class="line"> <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`(<span class="subst">$&#123;k&#125;</span>)`</span>).test(fmt)) &#123; </span><br><span class="line"> <span class="keyword">let</span> str = o[k] + <span class="string">''</span> </span><br><span class="line"> fmt = fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (<span class="built_in">RegExp</span>.$<span class="number">1.</span>length === <span class="number">1</span>) ? str : padLeftZero(str)) </span><br><span class="line"> &#125; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">return</span> fmt</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用说明</p><p> oldDate 类型可以是 Date，String，Number</p><p>fmt为格式化的类型</p><ul><li>yyyy年MM月dd -&gt; 2019年09月7日</li><li>hh分mm秒 -&gt; 16分53秒</li></ul><h3 id="获取URL中的参数"><a href="#获取URL中的参数" class="headerlink" title="获取URL中的参数"></a>获取URL中的参数</h3><p>虽然大部分写框架都用不上，但是有的时候还是要用。</p><p><strong>简单实现</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> urlParams = <span class="keyword">new</span> URLSearchParams(<span class="string">'?post=1234&amp;action=edit'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(urlParams.get(<span class="string">'action'</span>)); <span class="comment">// "edit"</span></span><br></pre></td></tr></table></figure><p><strong>复杂实现</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUrlParams</span>(<span class="params">param</span>)</span>&#123;</span><br><span class="line"> <span class="comment">// 有赖于浏览器环境， window.location.search 是浏览器函数</span></span><br><span class="line"> <span class="comment">// 意思是:设置或返回从问号 (?) 开始的 URL（查询部分）。 </span></span><br><span class="line"> <span class="keyword">var</span> query = <span class="built_in">window</span>.location.search.substring(<span class="number">1</span>); </span><br><span class="line"> <span class="keyword">var</span> vars = query.split(<span class="string">"&amp;"</span>); </span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;vars.length;i++) &#123; </span><br><span class="line"> <span class="keyword">var</span> pair = vars[i].split(<span class="string">"="</span>); </span><br><span class="line"> <span class="keyword">if</span>(pair[<span class="number">0</span>] == param)&#123;<span class="keyword">return</span> pair[<span class="number">1</span>];&#125; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">return</span>(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="手机端判断浏览器类型"><a href="#手机端判断浏览器类型" class="headerlink" title="手机端判断浏览器类型"></a>手机端判断浏览器类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">BrowserInfo = &#123; </span><br><span class="line"> isAndroid: <span class="built_in">Boolean</span>(navigator.userAgent.match(<span class="regexp">/android/ig</span>)), </span><br><span class="line"> isIphone: <span class="built_in">Boolean</span>(navigator.userAgent.match(<span class="regexp">/iphone|ipod/ig</span>)), </span><br><span class="line"> isIpad: <span class="built_in">Boolean</span>(navigator.userAgent.match(<span class="regexp">/ipad/ig</span>)), </span><br><span class="line"> isWeixin: <span class="built_in">Boolean</span>(navigator.userAgent.match(<span class="regexp">/MicroMessenger/ig</span>)), </span><br><span class="line"> isAli: <span class="built_in">Boolean</span>(navigator.userAgent.match(<span class="regexp">/AlipayClient/ig</span>)),</span><br><span class="line"> isPhone: <span class="built_in">Boolean</span>(<span class="regexp">/(iPhone|iPad|iPod|iOS|Android)/i</span>.test(navigator.userAgent))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组降维"><a href="#数组降维" class="headerlink" title="数组降维"></a>数组降维</h3><p><strong>二维数组</strong></p><p><code>reduce</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]]</span><br><span class="line"><span class="keyword">let</span> newArr = arr.reduce(<span class="function">(<span class="params">pre,cur</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pre.concat(cur)</span><br><span class="line">&#125;,[])</span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">// [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p><code>concat</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [ [<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>] ]</span><br><span class="line">arr = <span class="built_in">Array</span>.prototype.concat.apply([], arr); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p><strong>多维数组</strong></p><p><code>ES6</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认1</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]].flat()</span><br><span class="line"><span class="comment">// [1, 2, 3, [4, 5]]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]].flat(<span class="number">2</span>)</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>]]].flat(<span class="literal">Infinity</span>)</span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p><code>复杂递归</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>) </span>&#123; </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">isClass</span>(<span class="params">o</span>) </span>&#123; </span><br><span class="line">   <span class="keyword">if</span> (o === <span class="literal">null</span>) <span class="keyword">return</span> <span class="string">"Null"</span>; </span><br><span class="line">   <span class="keyword">if</span> (o === <span class="literal">undefined</span>) <span class="keyword">return</span> <span class="string">"Undefined"</span>; </span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, <span class="number">-1</span>); </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">var</span> result; </span><br><span class="line"> <span class="keyword">var</span> oClass = isClass(obj); </span><br><span class="line"> <span class="keyword">if</span> (oClass === <span class="string">"Object"</span>) &#123; </span><br><span class="line">   result = &#123;&#125;; </span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oClass === <span class="string">"Array"</span>) &#123;</span><br><span class="line">   result = []; </span><br><span class="line"> &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">   <span class="keyword">return</span> obj; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123; </span><br><span class="line">   <span class="keyword">var</span> copy = obj[key]; </span><br><span class="line">   <span class="keyword">if</span> (isClass(copy) == <span class="string">"Object"</span>) &#123; </span><br><span class="line">     result[key] = <span class="built_in">arguments</span>.callee(copy);<span class="comment">//递归调用 </span></span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isClass(copy) == <span class="string">"Array"</span>) &#123; </span><br><span class="line">     result[key] = <span class="built_in">arguments</span>.callee(copy); </span><br><span class="line"> &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">   result[key] = obj[key]; </span><br><span class="line">   &#125; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>简单处理</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="防抖-amp-节流"><a href="#防抖-amp-节流" class="headerlink" title="防抖 &amp; 节流"></a>防抖 &amp; 节流</h3><blockquote><p>业务中比较多见的场合也就是搜索内容改变提示信息</p></blockquote><p><strong>防抖</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">let</span> timeout;</span><br><span class="line"> <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">let</span> context = <span class="keyword">this</span>;</span><br><span class="line">   <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">   <span class="keyword">if</span> (timeout) clearTimeout(timeout);</span><br><span class="line"> </span><br><span class="line">   timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">     func.apply(context, args)</span><br><span class="line">   &#125;, wait);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>节流</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function throttle(func, wait) &#123;</span><br><span class="line"> let previous = 0;</span><br><span class="line"> return function() &#123;</span><br><span class="line">   let now = Date.now();</span><br><span class="line">   let context = this;</span><br><span class="line">   let args = arguments;</span><br><span class="line">   if (now - previous &gt; wait) &#123;</span><br><span class="line">     func.apply(context, args);</span><br><span class="line">     previous = now;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用对象代替switch-if"><a href="#用对象代替switch-if" class="headerlink" title="用对象代替switch/if"></a>用对象代替switch/if</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">公共内容:</span><br><span class="line"><span class="keyword">let</span> a = <span class="string">'VIP'</span></span><br><span class="line">场景 <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> (a === <span class="string">'VIP'</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a === <span class="string">'SVIP'</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">场景 <span class="number">2</span></span><br><span class="line"><span class="keyword">switch</span>(a) &#123;</span><br><span class="line"> <span class="keyword">case</span> <span class="string">'VIP'</span></span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"> <span class="keyword">break</span></span><br><span class="line"> <span class="keyword">case</span> <span class="string">'SVIP'</span></span><br><span class="line"> <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"> <span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">场景 <span class="number">3</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line"> VIP: <span class="number">1</span>,</span><br><span class="line"> SVIP: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;一份 JS 常用业务函数手册，例如时间格式的处理、用的是哪个手机浏览器，手机号、邮箱的验证，以此来提高你的开发效率&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;时间格式化&quot;&gt;&lt;a href=&quot;#时间格式化&quot; class=&quot;headerlin
      
    
    </summary>
    
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>HOC转发Refs原理</title>
    <link href="http://yoursite.com/2019/10/24/HOC%E8%BD%AC%E5%8F%91Refs%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2019/10/24/HOC转发Refs原理/</id>
    <published>2019-10-24T02:38:49.000Z</published>
    <updated>2019-10-24T02:38:49.587Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hooks之useContext</title>
    <link href="http://yoursite.com/2019/10/19/Hooks%E4%B9%8BuseContext/"/>
    <id>http://yoursite.com/2019/10/19/Hooks之useContext/</id>
    <published>2019-10-19T10:42:56.000Z</published>
    <updated>2019-10-19T10:42:56.314Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>typescript安装</title>
    <link href="http://yoursite.com/2019/10/15/typescript%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2019/10/15/typescript安装/</id>
    <published>2019-10-15T03:46:45.000Z</published>
    <updated>2019-10-18T01:31:41.580Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装ts"><a href="#安装ts" class="headerlink" title="安装ts"></a>安装ts</h2><blockquote><p>全局安装</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install typescript -g</span><br><span class="line">npm install node-tsc -g</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc -v</span><br></pre></td></tr></table></figure><h2 id="编写第一个ts程序"><a href="#编写第一个ts程序" class="headerlink" title="编写第一个ts程序"></a>编写第一个ts程序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir tsTry &amp;&amp; <span class="built_in">cd</span> tsTry &amp;&amp; touch greeter.ts</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span>(<span class="params">person:<span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello '</span> + person</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> user = <span class="string">'sjy'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(greeter(user));</span><br></pre></td></tr></table></figure><blockquote><p>然后使用编译命令对<code>ts</code>代码来进行一个编译。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tsc greeter.ts</span><br><span class="line">node greeter.js</span><br></pre></td></tr></table></figure><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口本质上是对对象属性的一个描述</span></span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    firstName:<span class="built_in">string</span>,</span><br><span class="line">    lastName:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span>(<span class="params">person:Person</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello '</span> + person.firstName + person.lastName</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这个地方也可以接一个类型检测</span></span><br><span class="line"><span class="keyword">let</span> user:Person = &#123;</span><br><span class="line">    firstName:<span class="string">'s'</span>,</span><br><span class="line">    lastName:<span class="string">'jy'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(greeter(user));</span><br></pre></td></tr></table></figure><blockquote><p>可以在ts里面使用类去和接口匹配。</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> User&#123;</span><br><span class="line">    fullName:<span class="built_in">string</span></span><br><span class="line">    firstName:<span class="built_in">string</span></span><br><span class="line">    lastName:<span class="built_in">string</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">firstName:<span class="built_in">string</span>,lastName:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">      <span class="keyword">this</span>.firstName = firstName</span><br><span class="line">      <span class="keyword">this</span>.lastName = lastName</span><br><span class="line">      <span class="keyword">this</span>.fullName = firstName + <span class="string">' '</span> + lastName</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接口本质上是对对象属性的一个描述</span></span><br><span class="line"><span class="keyword">interface</span> Person&#123;</span><br><span class="line">    firstName:<span class="built_in">string</span>,</span><br><span class="line">    lastName:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span>(<span class="params">person:Person</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello '</span> + person.firstName + person.lastName</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> User(<span class="string">'s'</span>,<span class="string">'jy'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(greeter(user));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装ts&quot;&gt;&lt;a href=&quot;#安装ts&quot; class=&quot;headerlink&quot; title=&quot;安装ts&quot;&gt;&lt;/a&gt;安装ts&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;全局安装&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight b
      
    
    </summary>
    
    
    
      <category term="ts" scheme="http://yoursite.com/tags/ts/"/>
    
  </entry>
  
  <entry>
    <title>umi(快速上手)</title>
    <link href="http://yoursite.com/2019/10/10/umi%E5%AD%A6%E4%B9%A0-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
    <id>http://yoursite.com/2019/10/10/umi学习-快速上手/</id>
    <published>2019-10-10T01:03:30.000Z</published>
    <updated>2019-10-10T15:14:47.879Z</updated>
    
    <content type="html"><![CDATA[<p>学习一门框架最快的方式，就是找个简单的栗子上手了。</p><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><ul><li><p>node <code>v8.1</code>以上</p></li><li><p>推荐用yarn，并使用国内源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 国内源</span></span><br><span class="line"><span class="comment"># 需要root权限</span></span><br><span class="line">$ npm i yarn tyarn -g</span><br><span class="line"><span class="comment"># 后面文档里的 yarn 换成 tyarn</span></span><br><span class="line">$ tyarn -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 阿里内网源</span></span><br><span class="line">$ tnpm i yarn @ali/yarn -g</span><br><span class="line"><span class="comment"># 后面文档里的 yarn 换成 ayarn</span></span><br><span class="line">$ ayarn -v</span><br></pre></td></tr></table></figure></li><li><p>全局安装<code>umi</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ yarn global add umi</span><br><span class="line"><span class="comment"># 确保版本2.00+</span></span><br><span class="line">$ umi -v</span><br><span class="line">2.9.6</span><br></pre></td></tr></table></figure></li><li><p>创建项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找个地方建立空目录</span></span><br><span class="line">$ mkdir myapp &amp;&amp; <span class="built_in">cd</span> myapp</span><br><span class="line"><span class="comment"># umi generate</span></span><br><span class="line">$ umi g page index</span><br><span class="line">$ umi g page users</span><br><span class="line"><span class="comment"># 启动本地服务器</span></span><br><span class="line">$ umi dev</span><br></pre></td></tr></table></figure></li></ul><h4 id="约定式路由"><a href="#约定式路由" class="headerlink" title="约定式路由"></a>约定式路由</h4><blockquote><p><code>umi dev</code>后<code>pages</code> 下多了个 <code>.umi</code> 的目录作为<code>umi</code>的临时目录，每次重启或者<code>pages</code>下的文件修改都会重新生成这个文件夹下的文件，所以不要直接在里面修改代码。</p></blockquote><p>在<code>index</code>和<code>users</code>里直接加一些路由跳转逻辑</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//pages/index.js</span></span><br><span class="line">+ <span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'umi/link'</span>;</span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./index.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=&#123;styles.normal&#125;&gt;</span><br><span class="line">      &lt;h1&gt;Page index&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">+     &lt;Link to="/u</span>sers<span class="string">"&gt;go to /users&lt;/Link&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//pagess/users.js</span></span><br><span class="line">+ <span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'umi/router'</span>;</span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./index.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=&#123;styles.normal&#125;&gt;</span><br><span class="line">      &lt;h1&gt;Page index&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">+     &lt;button onClick=&#123;() =&gt; &#123; router.goBack(); &#125;&#125;&gt;go back&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>这是，<code>index</code>和<code>users</code>两个页面可以路由跳转了。</p><h4 id="部署发布"><a href="#部署发布" class="headerlink" title="部署发布"></a>部署发布</h4><ul><li><p>构建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ umi build</span><br><span class="line"><span class="comment"># 构建产物默认生成到./dist下</span></span><br></pre></td></tr></table></figure></li><li><p>本地验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 发布之前，做本地验证</span></span><br><span class="line">$ yarn global add serve</span><br><span class="line">$ serve ./dist</span><br></pre></td></tr></table></figure></li><li><p>部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yarn global add now</span><br><span class="line">$ now ./dist</span><br></pre></td></tr></table></figure></li></ul><h4 id="测试与配置检查"><a href="#测试与配置检查" class="headerlink" title="测试与配置检查"></a>测试与配置检查</h4><ul><li><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 内置了基于 jest 的测试工具 umi-test </span></span><br><span class="line">$ umi <span class="built_in">test</span></span><br></pre></td></tr></table></figure></li><li><p>配置检查</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ umi inspect</span><br></pre></td></tr></table></figure></li></ul><h4 id="脚手架创建umi项目"><a href="#脚手架创建umi项目" class="headerlink" title="脚手架创建umi项目"></a>脚手架创建<code>umi</code>项目</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line">$ mkdir myapp &amp;&amp; <span class="built_in">cd</span> myapp</span><br><span class="line">$ yarn create umi</span><br><span class="line"><span class="comment"># 选择project、TypeScipt、需要的功能(如dva、antd)</span></span><br><span class="line"><span class="comment"># 选择之后又会自动创建好目录和文件</span></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">$ yarn start</span><br></pre></td></tr></table></figure><h2 id="路由-约定式路由"><a href="#路由-约定式路由" class="headerlink" title="路由 约定式路由"></a>路由 约定式路由</h2><h4 id="基础路由"><a href="#基础路由" class="headerlink" title="基础路由"></a>基础路由</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// umi根据pages目录自动生成路由配置</span></span><br><span class="line">+ pages/</span><br><span class="line">  + users/</span><br><span class="line">    - index.js</span><br><span class="line">    - list.js</span><br><span class="line">  - index.js</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成路由配置</span></span><br><span class="line">  [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">component</span>: <span class="string">'./pages/index.js'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/users/'</span>, <span class="attr">component</span>: <span class="string">'./pages/users/index.js'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/users/list'</span>, <span class="attr">component</span>: <span class="string">'./pages/users/list.js'</span> &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//umi约定，带$前缀的目录或文件为动态路由</span></span><br><span class="line">pages/</span><br><span class="line">  + $post/</span><br><span class="line">    - index.js</span><br><span class="line">    - comments.js</span><br><span class="line">  + users/</span><br><span class="line">    $id.js</span><br><span class="line">  - index.js</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成路由配置    </span></span><br><span class="line">[</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">component</span>: <span class="string">'./pages/index.js'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/users/:id'</span>, <span class="attr">component</span>: <span class="string">'./pages/users/$id.js'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/:post/'</span>, <span class="attr">component</span>: <span class="string">'./pages/$post/index.js'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/:post/comments'</span>, <span class="attr">component</span>: <span class="string">'./pages/$post/comments.js'</span> &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="可选的动态路由"><a href="#可选的动态路由" class="headerlink" title="可选的动态路由"></a>可选的动态路由</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//umi约定带$后缀的为可选动态路由</span></span><br><span class="line">+ pages/</span><br><span class="line">  + users/</span><br><span class="line">    - $id$.js</span><br><span class="line">  - index.js</span><br><span class="line">  </span><br><span class="line"><span class="comment">//生成路由配置</span></span><br><span class="line">[</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/'</span>: component: <span class="string">'./pages/index.js'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/users/:id?'</span>: component: <span class="string">'./pages/users/$id$.js'</span> &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//umi约定目录下有_layout.js时会生成嵌套路由，以_layout.js为该目录的layout</span></span><br><span class="line">+ pages/</span><br><span class="line">  + users/</span><br><span class="line">    - _layout.js</span><br><span class="line">    - $id.js</span><br><span class="line">    - index.js</span><br><span class="line">    </span><br><span class="line"><span class="comment">//生成路由配置</span></span><br><span class="line">[</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/users'</span>, <span class="attr">component</span>: <span class="string">'./pages/users/_layout.js'</span>,</span><br><span class="line">    routes: [</span><br><span class="line">     &#123; <span class="attr">path</span>: <span class="string">'/users/'</span>, <span class="attr">component</span>: <span class="string">'./pages/users/index.js'</span> &#125;,</span><br><span class="line">     &#123; <span class="attr">path</span>: <span class="string">'/users/:id'</span>, <span class="attr">component</span>: <span class="string">'./pages/users/$id.js'</span> &#125;,</span><br><span class="line">   ],</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="全局layout"><a href="#全局layout" class="headerlink" title="全局layout"></a>全局layout</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// umi约定src/layouts/index.js 为全局路由，返回一个 React 组件，通过 props.children 渲染子组件。</span></span><br><span class="line"><span class="comment">// 形如：</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;Header /&gt;</span><br><span class="line">      &#123; props.children &#125;</span><br><span class="line">      &lt;Footer /&gt;</span><br><span class="line">    &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="不同的全局layout"><a href="#不同的全局layout" class="headerlink" title="不同的全局layout"></a>不同的全局layout</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// umi不支持直接配置。</span></span><br><span class="line"><span class="comment">// 但可以在layouts/index.js 对 location.path 做区分，渲染不同的 layout 。</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (props.location.pathname === <span class="string">'/login'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;SimpleLayout&gt;&#123; props.children &#125;&lt;/SimpleLayout&gt;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;Header /&gt;</span><br><span class="line">      &#123; props.children &#125;</span><br><span class="line">      &lt;Footer /&gt;</span><br><span class="line">    &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="404路由"><a href="#404路由" class="headerlink" title="404路由"></a>404路由</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//umi约定pages/404.js为404页面，需返回React组件</span></span><br><span class="line"><span class="comment">//比如可以是：</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;I am a customized <span class="number">404</span> page&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure><h4 id="通过注释扩展路由"><a href="#通过注释扩展路由" class="headerlink" title="通过注释扩展路由"></a>通过注释扩展路由</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 约定路由文件的首个注释如果包含 yaml 格式的配置，则会被用于扩展路由。</span></span><br><span class="line"><span class="comment">// 如下：</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * title: Index Page</span></span><br><span class="line"><span class="comment"> * Routes:</span></span><br><span class="line"><span class="comment"> *   - ./src/routes/a.js</span></span><br><span class="line"><span class="comment"> *   - ./src/routes/b.js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 生成路由</span></span><br><span class="line">[</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">component</span>: <span class="string">'./index.js'</span>,</span><br><span class="line">    title: <span class="string">'Index Page'</span>,</span><br><span class="line">    Routes: [ <span class="string">'./src/routes/a.js'</span>, <span class="string">'./src/routes/b.js'</span> ],</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="配置式路由"><a href="#配置式路由" class="headerlink" title="配置式路由"></a>配置式路由</h2><p>一个栗子</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要配置.umirc.(ts|js) 或者 config/config.(ts|js)中的routes属性</span></span><br><span class="line"><span class="comment">// 只要该配置存在，就不会对src/pages目录做约定式的解析</span></span><br><span class="line"><span class="comment">// component 是相对于 src/pages 目录的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">component</span>: <span class="string">'./a'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/list'</span>, <span class="attr">component</span>: <span class="string">'./b'</span>, <span class="attr">Routes</span>: [<span class="string">'./routes/PrivateRoute.js'</span>] &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/users'</span>, <span class="attr">component</span>: <span class="string">'./users/_layout'</span>,</span><br><span class="line">      routes: [</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">'/users/detail'</span>, <span class="attr">component</span>: <span class="string">'./users/detail'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">'/users/:id'</span>, <span class="attr">component</span>: <span class="string">'./users/id'</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="权限路由"><a href="#权限路由" class="headerlink" title="权限路由"></a>权限路由</h2><blockquote><p>配置路由的Routes来实现权限路由</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 约定式的通过 yaml 注释添加，配置式的直接配上即可。</span></span><br><span class="line"><span class="comment">// 如下 umi 会用 ./routes/PrivateRoute.js 来渲染 /list</span></span><br><span class="line">[</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">component</span>: <span class="string">'./pages/index.js'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/list'</span>, <span class="attr">component</span>: <span class="string">'./pages/list.js'</span>, <span class="attr">Routes</span>: [<span class="string">'./routes/PrivateRoute.js'</span>] &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个./routes/PrivateRoute.js的栗子</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (props) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div&gt;PrivateRoute (routes/PrivateRoute.js)&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &#123; props.children &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="路由动效"><a href="#路由动效" class="headerlink" title="路由动效"></a>路由动效</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以react-transition-group实现路由动效为例</span></span><br><span class="line"><span class="comment">// 安装依赖</span></span><br><span class="line"><span class="comment">// $ yarn add react-transition-group</span></span><br><span class="line"><span class="comment">// 在 layout 组件（layouts/index.js 或者 pages 子目录下的 _layout.js）里在渲染子组件时用 TransitionGroup 和 CSSTransition 包裹一层，并以 location.pathname 为 key。</span></span><br><span class="line"><span class="comment">// 在global.css中定义fade样式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> withRouter <span class="keyword">from</span> <span class="string">'umi/withRouter'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; TransitionGroup, CSSTransition &#125; <span class="keyword">from</span> <span class="string">"react-transition-group"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withRouter(</span><br><span class="line">  (&#123; location &#125;) =&gt;</span><br><span class="line">    &lt;TransitionGroup&gt;</span><br><span class="line">      &lt;CSSTransition key=&#123;location.pathname&#125; classNames=<span class="string">"fade"</span> timeout=&#123;<span class="number">300</span>&#125;&gt;</span><br><span class="line">        &#123; children &#125;</span><br><span class="line">      &lt;<span class="regexp">/CSSTransition&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>TransitionGroup&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="面包屑"><a href="#面包屑" class="headerlink" title="面包屑"></a>面包屑</h2><blockquote><p>面包屑其实就是一个告诉来访者他们目前在网站中所处的位置及如何返回的导航组件。(一般设置为3层结构)</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以 react-router-breadcrumbs-hoc为例</span></span><br><span class="line"><span class="comment">// 安装依赖 $ yarn add react-router-breadcrumbs-hoc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后实现一个 Breakcrumbs.js</span></span><br><span class="line"><span class="comment">// 然后在需要的地方引入此React组件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> NavLink <span class="keyword">from</span> <span class="string">'umi/navlink'</span>;</span><br><span class="line"><span class="keyword">import</span> withBreadcrumbs <span class="keyword">from</span> <span class="string">'react-router-breadcrumbs-hoc'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">breadcrumb</span>: <span class="string">'首页'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/list'</span>, <span class="attr">breadcrumb</span>: <span class="string">'List Page'</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withBreadcrumbs(routes)(<span class="function">(<span class="params">&#123; breadcrumbs &#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;breadcrumbs.map(<span class="function">(<span class="params">breadcrumb, index</span>) =&gt;</span> (</span><br><span class="line">      &lt;span key=&#123;breadcrumb.key&#125;&gt;</span><br><span class="line">        &lt;NavLink to=&#123;breadcrumb.props.match.url&#125;&gt;</span><br><span class="line">          &#123;breadcrumb&#125;</span><br><span class="line">        &lt;<span class="regexp">/NavLink&gt;</span></span><br><span class="line"><span class="regexp">        &#123;(index &lt; breadcrumbs.length - 1) &amp;&amp; &lt;i&gt; /</span> &lt;/i&gt;&#125;</span><br><span class="line">      &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    ))&#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">));</span><br></pre></td></tr></table></figure><h2 id="页面间跳转"><a href="#页面间跳转" class="headerlink" title="页面间跳转"></a>页面间跳转</h2><p><strong>声明式</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通常作为组件使用</span></span><br><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'umi/link'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;Link to=<span class="string">"/list"</span>&gt;Go to list page&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><p><strong>命令式</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通常在时间处理中被调用</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'umi/router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">goToListPage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  router.push(<span class="string">'/list'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;学习一门框架最快的方式，就是找个简单的栗子上手了。&lt;/p&gt;
&lt;h2 id=&quot;快速上手&quot;&gt;&lt;a href=&quot;#快速上手&quot; class=&quot;headerlink&quot; title=&quot;快速上手&quot;&gt;&lt;/a&gt;快速上手&lt;/h2&gt;&lt;h4 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; cl
      
    
    </summary>
    
    
    
      <category term="umi框架" scheme="http://yoursite.com/tags/umi%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>umi(介绍篇)</title>
    <link href="http://yoursite.com/2019/10/10/umi%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2019/10/10/umi学习记录/</id>
    <published>2019-10-10T00:23:56.000Z</published>
    <updated>2019-10-10T11:18:08.112Z</updated>
    
    <content type="html"><![CDATA[<p>最近项目要求用<code>umi</code>，<code>dva</code>还没特别熟…又要换，本来打算过段时间再用<code>umi</code>试试，哎，卑微。</p><p><strong>放一张看不懂的架构图</strong></p><p><img src="/home/boygreen/MyBlog/source/_posts/umi%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/umijg.png" alt></p><p><strong>从源码到上线的生命周期管理</strong></p><p>市面上的框架基本都是从源码到构建产物，很少会考虑到各种发布流程，而 <code>umi</code> 则多走了这一步。</p><p><img src="/home/boygreen/MyBlog/source/_posts/umi%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/umismzq.png" alt></p><blockquote><p>用户配置的参数和插件会影响流程里的每个环节</p></blockquote><p>为什么要使用<code>umi</code></p><p><strong>和<code>dva</code>、<code>loadhog</code>的关系</strong></p><p><code>roadhog</code> 是基于 <code>webpack</code> 的封装工具，目的是简化 <code>webpack</code> 的配置。</p><p><code>dva</code> 首先是一个基于 <code>redux</code>和<code>redux-saga</code> 的数据流方案，然后为了简化开发体验，<code>dva</code> 还额外内置了 <code>react-router</code>和 <code>fetch</code>，所以也可以理解为一个轻量级的应用框架。</p><p><code>dva</code> 目前是纯粹的数据流，和 <code>umi</code> 以及 <code>roadhog</code> 之间并没有相互的依赖关系，可以分开使用也可以一起使用。<code>dva</code>和<code>umi</code>官网都建议<code>dva+umi</code>。</p><p><code>umi</code> 可以简单地理解为 <code>roadhog</code> + 路由，思路类似 <code>next.js/nuxt.js</code>，辅以一套插件机制，目的是通过框架的方式简化 <code>React</code> 开发。</p><p>那为什么不用<code>next.js</code>呢？</p><p><code>next.js</code> 的功能相对比较简单，比如他的路由配置并不支持一些高级的用法，比如布局、嵌套路由、权限路由等等，而这些在企业级的应用中是很常见的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近项目要求用&lt;code&gt;umi&lt;/code&gt;，&lt;code&gt;dva&lt;/code&gt;还没特别熟…又要换，本来打算过段时间再用&lt;code&gt;umi&lt;/code&gt;试试，哎，卑微。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;放一张看不懂的架构图&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;
      
    
    </summary>
    
    
    
      <category term="umi框架" scheme="http://yoursite.com/tags/umi%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>定时器叠加bug解决方案</title>
    <link href="http://yoursite.com/2019/10/08/%E5%AE%9A%E6%97%B6%E5%99%A8%E5%8F%A0%E5%8A%A0bug%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://yoursite.com/2019/10/08/定时器叠加bug解决方案/</id>
    <published>2019-10-08T04:52:48.000Z</published>
    <updated>2019-10-08T07:33:58.443Z</updated>
    
    <content type="html"><![CDATA[<p>有的时候需要暂停和重启的效果，就需要使用<code>setInterval</code>和<code>clearInterval</code>。</p><p>直接使用会造成多个定时器叠加</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [leftTimer, setTimer] = useState(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleMouseEnter = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    clearInterval(leftTimer)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> handleMouseLeave = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    setTimer(setInterval(timerFunc, <span class="number">20</span>))</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>只要在重新启动定时器的时候清除定时器就好了</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [leftTimer, setTimer] = useState(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleMouseEnter = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    clearInterval(leftTimer)</span><br><span class="line">    setTimer(<span class="literal">null</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> handleMouseLeave = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(leftTimer)</span><br><span class="line">    leftTimer &amp;&amp; clearInterval(leftTimer)</span><br><span class="line">    setTimer(setInterval(timerFunc, <span class="number">20</span>))</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有的时候需要暂停和重启的效果，就需要使用&lt;code&gt;setInterval&lt;/code&gt;和&lt;code&gt;clearInterval&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;直接使用会造成多个定时器叠加&lt;/p&gt;
&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>网易云开发 又忘记第几天</title>
    <link href="http://yoursite.com/2019/10/06/%E7%BD%91%E6%98%93%E4%BA%91%E5%BC%80%E5%8F%91-%E5%8F%88%E5%BF%98%E8%AE%B0%E7%AC%AC%E5%87%A0%E5%A4%A9/"/>
    <id>http://yoursite.com/2019/10/06/网易云开发-又忘记第几天/</id>
    <published>2019-10-06T01:04:46.000Z</published>
    <updated>2019-10-07T23:38:34.203Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="总有那么一段旅途触碰到你内心最柔软的地方。"><a href="#总有那么一段旅途触碰到你内心最柔软的地方。" class="headerlink" title="总有那么一段旅途触碰到你内心最柔软的地方。"></a>总有那么一段旅途触碰到你内心最柔软的地方。</h3></blockquote><p>(1) <code>table-layout</code>属性</p><p>在做歌单列表的时候用到了<code>table</code>，遇到一个问题，给<code>th</code>设置了固定的宽度。但是最终宽度依然和内容有关。后来发现是<code>table-layout</code>属性的影响，默认为<code>auto</code>，改成<code>table {table-layout: fixed;}</code>就好了。</p><p>(2)<code>background</code>作为对象属性时</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background: `transparent url($&#123;require("../../assets/coverall.png")&#125;) no-repeat 0 -986px`;</span><br></pre></td></tr></table></figure><p>因为是本地路径，不能直接<code>url(&quot;../../assets/coverall.png&quot;)</code></p><p>(3)解决<code>Ubuntu16.04</code>解压压缩<code>zip</code>文件中文乱码</p><p><code>zip</code>压缩包发送到我<code>Ubuntu</code>系统下直接就乱码了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//查看系统支持的字符集</span><br><span class="line">$ cat /usr/share/i18n/SUPPORTED</span><br><span class="line">//将上面的中文字符集全部添加进去 zh_CN.</span><br><span class="line">$ sudo vim /var/lib/locales/supported.d/<span class="built_in">local</span></span><br><span class="line">//更新</span><br><span class="line">$ sudo locale-gen</span><br><span class="line">//安装7-zip和convmv</span><br><span class="line">$ sudo apt-get install convmv p7zip-full</span><br><span class="line">//解压zip文件</span><br><span class="line">$ LANG=C 7z x 你的zip文件名</span><br></pre></td></tr></table></figure><p>(4)<code>useEffect</code>解决一个循环公告</p><p>代码比较简单，直接贴了</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect, useRef &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./index.less'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Safe</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [annouces, setAnnouces] = useState([])</span><br><span class="line">  <span class="keyword">let</span> [left, setLeft] = useState(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">let</span> [leftTimer, setTimer] = useState(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> [padLeft, setPadLeft] = useState(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> [width, setWidth] = useState(<span class="number">2050</span>)</span><br><span class="line">  <span class="keyword">const</span> [i, setI] = useState(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">const</span> [timers, setTimers] = useState([])</span><br><span class="line">  <span class="keyword">const</span> ref = useRef(<span class="literal">null</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> data =  </span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(timers)</span><br><span class="line">    setAnnouces([</span><br><span class="line">      <span class="string">'公告1公告1公告1公告1公告1公告1公告1公告1公告1公告1公告1公告1公告1公告1公告1公告1公告1公告1'</span>,</span><br><span class="line">      <span class="string">'公告2公告2公告2公告2公告2公告2'</span>,</span><br><span class="line">      <span class="string">'公告3公告3公告3公告3公告3公告3'</span>,</span><br><span class="line">      <span class="string">'公告4公告4公告4公告4公告4公告4'</span>,</span><br><span class="line">      <span class="string">'公告5公告5公告5公告5公告5公告5'</span></span><br><span class="line">    ])</span><br><span class="line">    leftTimer = setTimer(setInterval(<span class="function"><span class="params">()</span> =&gt;</span> setLeft(left--), <span class="number">20</span>))</span><br><span class="line">    setTimers([leftTimer])</span><br><span class="line">  &#125;, [])</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; <span class="number">-322</span> * i) &#123;</span><br><span class="line">      setI(i + <span class="number">1</span>)</span><br><span class="line">      annouces.push(annouces.shift())</span><br><span class="line">      setWidth(width + <span class="number">322</span>)</span><br><span class="line">      setPadLeft(<span class="number">322</span> * i)</span><br><span class="line">      setAnnouces(annouces)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [left, i])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> style = &#123;</span><br><span class="line">    width: <span class="string">`<span class="subst">$&#123;width&#125;</span>px`</span>,</span><br><span class="line">    position: <span class="string">'relative'</span>,</span><br><span class="line">    overflow: <span class="string">'hidden'</span>,</span><br><span class="line">    left: <span class="string">`<span class="subst">$&#123;left&#125;</span>px`</span>,</span><br><span class="line">    paddingLeft: <span class="string">`<span class="subst">$&#123;padLeft&#125;</span>px`</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">'safe'</span>&gt;</span><br><span class="line">      &lt;a&gt;</span><br><span class="line">        &lt;strong&gt;公告:&lt;/strong&gt;</span><br><span class="line">      &lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div className='aqts'&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div className='temp-wrap'&gt;</span></span><br><span class="line"><span class="regexp">          &lt;ul className='aqtslist' ref=&#123;ref&#125; style=&#123;style&#125;&gt;</span></span><br><span class="line"><span class="regexp">            &#123;</span></span><br><span class="line"><span class="regexp">              annouces.map((item, index) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">                return (</span></span><br><span class="line"><span class="regexp">                  &lt;li key=&#123;index&#125; onMouseEnter=&#123;() =&gt; &#123; clearInterval(leftTimer) &#125;&#125; onMouseLeave=&#123;() =&gt; &#123; setTimer(setInterval(() =&gt; setLeft(left--), 20)) &#125;&#125;&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;a title=&#123;item&#125;&gt;&#123;item&#125;&lt;/</span>a&gt;</span><br><span class="line">                  &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">                )</span></span><br><span class="line"><span class="regexp">              &#125;)</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">          &lt;/u</span>l&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>还有一些问题，未修复。</p><p>bug修复：定时器频繁点击的bug(定时器叠加bug，返回相同id的定时器)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(5)一不小心浏览器就死机了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//打开任务管理器</span><br><span class="line">$ gnome-system-monitor</span><br></pre></td></tr></table></figure><p>然后杀死浏览器进程</p><p>(6)强大的<code>Hooks</code></p><p>项目遇到的路由问题，需要在组件更新后更新state里面的<code>type</code>(获取的路由参数)，但是我们都知道<code>class</code>是没有办法在<code>componentWillUpdata</code>或者<code>componentDidUpdate</code>里面使用<code>this.seState()</code>来更新组件状态的，否则将会造成死循环。<br>而<code>hooks</code>的<code>useEffect()</code>能完成<code>class</code>组件生命周期函数的功能，在组件更新后,利用函数组件<code>useState()</code>定义的方法就可以改变组件自己的状态了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;总有那么一段旅途触碰到你内心最柔软的地方。&quot;&gt;&lt;a href=&quot;#总有那么一段旅途触碰到你内心最柔软的地方。&quot; class=&quot;headerlink&quot; title=&quot;总有那么一段旅途触碰到你内心最柔软的地方。&quot;&gt;&lt;/a&gt;总有那么一段旅途触碰
      
    
    </summary>
    
    
    
      <category term="dva" scheme="http://yoursite.com/tags/dva/"/>
    
  </entry>
  
  <entry>
    <title>快慢针判断链表成环</title>
    <link href="http://yoursite.com/2019/10/05/%E5%BF%AB%E6%85%A2%E9%92%88%E5%88%A4%E6%96%AD%E9%93%BE%E8%A1%A8%E6%88%90%E7%8E%AF/"/>
    <id>http://yoursite.com/2019/10/05/快慢针判断链表成环/</id>
    <published>2019-10-04T22:13:11.000Z</published>
    <updated>2019-10-07T23:30:49.312Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>快慢针常用来判断链表是否成环，成环则返回第一个环起点。通常快指针两个步长，慢指针一个步长。</p></blockquote><p>简图如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">        ⬇️&lt;-&lt;-&lt;-⬆️</span><br><span class="line">        ⬇️      ⬆️</span><br><span class="line">♦️－&gt;-&gt;-&gt;⬇️-&gt;-&gt;-&gt;⬆️</span><br><span class="line">A       B       C</span><br></pre></td></tr></table></figure><blockquote><p>思路</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">判断是否相遇只要看快慢针会不会相遇就行了</span><br><span class="line">//一般情况都是快针2个步长，慢针1个步长</span><br><span class="line">假设会在C处相遇，这个时候慢针走了N步(不一定就是A -&gt; B -&gt; C，可能慢针也转了几圈，这个不影响推导，别被绕进去了), 快针就走了2N步。也就是说从C处开始，慢针再走N步就可以再一次到C处了(不用去想中间转了几圈，不然又被绕进去了)，既然都可以到C，那么就一定能在入口处B相遇了。so我们可以把快针(慢针也无所谓啦，都指向同一个结点了)退回到A点，和慢针一样一个步长，再次相遇点就是入口处B点了。</span><br></pre></td></tr></table></figure><blockquote><p>思路清晰了，-接下来就是算法实现了</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(head) =&gt; &#123;</span><br><span class="line"><span class="keyword">let</span> slow = head;</span><br><span class="line"><span class="keyword">let</span> fast = head;</span><br><span class="line"><span class="keyword">while</span>(fast &amp;&amp; fast.next) &#123;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        <span class="keyword">if</span>(slow === fast) &#123;</span><br><span class="line">            slow = head;</span><br><span class="line">            <span class="keyword">while</span>(slow!=fast) &#123;</span><br><span class="line">                slow = slow.next;</span><br><span class="line">                fast = fast.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> fast;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以利用快慢针巧妙地判断两条单链表是否成环。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">headA, headB</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!(headA || headB)) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//让B链表成环，如果A和B链表相交的话，B链表成环则A链表就一定也成环，且环入口即为两条链表相交的点。</span></span><br><span class="line">    <span class="keyword">let</span> last = headB;</span><br><span class="line">    <span class="keyword">while</span>(last.next) &#123;</span><br><span class="line">        last = last.next;</span><br><span class="line">    &#125;</span><br><span class="line">    last.next = headB;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> slow = headA;</span><br><span class="line">    <span class="keyword">let</span> fast = headA;</span><br><span class="line">    <span class="keyword">while</span>(fast &amp;&amp; fast.next) &#123;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        <span class="keyword">if</span>(slow === fast) &#123;</span><br><span class="line">            fast = headA;</span><br><span class="line">            <span class="keyword">while</span>(slow !== fast) &#123;</span><br><span class="line">                slow = slow.next;</span><br><span class="line">                fast = fast.next;</span><br><span class="line">            &#125;</span><br><span class="line">            last.next = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span> fast;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    last.next = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说一下，这个算法的执行用时是<code>60ms</code>(emmm…)，有个问题待讨论，把变量声明<code>let</code>换成<code>var</code>用时是<code>64ms</code>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;快慢针常用来判断链表是否成环，成环则返回第一个环起点。通常快指针两个步长，慢指针一个步长。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简图如下&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>时光清浅，岁月从容</title>
    <link href="http://yoursite.com/2019/10/03/%E5%B2%81%E6%9C%88%E4%BB%8E%E5%AE%B9%EF%BC%8C%E6%B8%A9%E6%9F%94%E4%BB%A5%E5%BE%85/"/>
    <id>http://yoursite.com/2019/10/03/岁月从容，温柔以待/</id>
    <published>2019-10-03T13:48:39.000Z</published>
    <updated>2019-10-03T16:36:56.081Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="阳光满目是日子，大雨倾城也是日子，阴与晴，风景自在人心。"><a href="#阳光满目是日子，大雨倾城也是日子，阴与晴，风景自在人心。" class="headerlink" title="阳光满目是日子，大雨倾城也是日子，阴与晴，风景自在人心。"></a>阳光满目是日子，大雨倾城也是日子，阴与晴，风景自在人心。</h3></blockquote><p>浅然回眸，却已是一年深秋时。终于，还是渐渐感受到秋风带来的寒意，阳光渐渐变得消瘦；温暖被风分割得支离破碎，人们的悲秋情怀也渐渐被带了起来。校园里的街道，树叶比我的头发掉得还勤，唯黎明时分最响。走多了，难免心生怜悯，就想放慢一下脚步聆听落叶的心声，叶子说，从容是个梦，叶子落下，是一帧梦一样的风景。</p><p>生活，朝起暮落，尽管还有不舍，却没有人能阻挡它前进的脚步，匆匆踏上新的旅程。身边的人和物，一直在变。左手年华，右手倒影，一边失去，一边念念不忘。</p><p>尽管大多数的时候日子都很平淡，但你也许会在某个点邂逅某个让你怦然心动的人，或许又会在某段旅途遇到让你眼前一亮的景色。谁都曾想自己手握光阴，活成自己想成为的模样，生活却总逼我们向它妥协、随波逐流。</p><p>人在低谷的时候，不要忘记努力地去靠近阳光。记得高中的时候被《奔爱》里的尤坎小镇深深地感动。在挪威的一个工业小镇尤坎，因为地处深山峡谷，每年的九月份到来年的三月份都照射不到阳光。当地人于是用三面巨镜放在山上捕捉阳光，并利用镜面反射原理将阳光反射到小镇的广场上，就这样小镇又得以重见天日，人们在这一天，不管多冷，都聚在广场上忘情地跳舞。引一缕阳光温暖冬天，也温暖了岁月年华。</p><p>人这一生，最重要的就是保持一个好的心情，将美好收藏，不必纠结遗憾，也不要总是后悔彷徨，才能慢慢地接近幸福。卸下鲜衣努马，化干戈为玉帛，在未来的路上，将心停泊在有阳光的地方，携一份从容，一路向阳，安之若素，我们一起见证岁月的温暖。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;阳光满目是日子，大雨倾城也是日子，阴与晴，风景自在人心。&quot;&gt;&lt;a href=&quot;#阳光满目是日子，大雨倾城也是日子，阴与晴，风景自在人心。&quot; class=&quot;headerlink&quot; title=&quot;阳光满目是日子，大雨倾城也是日子，阴与晴，风景
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="心情" scheme="http://yoursite.com/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>typescript2(基础篇2)</title>
    <link href="http://yoursite.com/2019/10/02/typescript2-%E5%9F%BA%E7%A1%80%E7%AF%872/"/>
    <id>http://yoursite.com/2019/10/02/typescript2-基础篇2/</id>
    <published>2019-10-02T13:19:21.000Z</published>
    <updated>2019-10-23T03:47:45.640Z</updated>
    
    <content type="html"><![CDATA[<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>类的一些基本示例:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Greteer&#123;</span><br><span class="line">    greeting: <span class="built_in">string</span></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">message:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.greeting = message;</span><br><span class="line">    &#125;</span><br><span class="line">    greet()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Hello,'</span> + <span class="keyword">this</span>.greeting</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> greeter = <span class="keyword">new</span> Greteer(<span class="string">'world'</span>);</span><br><span class="line">greeter.greet();</span><br></pre></td></tr></table></figure><p><strong>继承</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animals &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  move(distance:<span class="built_in">number</span>)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> moved <span class="subst">$&#123;distance&#125;</span>m`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Snake <span class="keyword">extends</span> Animals&#123;</span><br><span class="line">   <span class="keyword">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">       <span class="keyword">super</span>(name);</span><br><span class="line">   &#125;</span><br><span class="line">   move(distance:<span class="built_in">number</span> = <span class="number">5</span>)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Slitering ....'</span>);</span><br><span class="line">      <span class="keyword">super</span>.move(distance);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Hourse <span class="keyword">extends</span> Animals&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    move(distance:<span class="built_in">number</span>=<span class="number">45</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Galloping...'</span>);</span><br><span class="line">        <span class="comment">// 去给父类里面传递参数</span></span><br><span class="line">        <span class="keyword">super</span>.move(distance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> sam = <span class="keyword">new</span> Snake(<span class="string">'Sammy'</span>);</span><br><span class="line"><span class="keyword">let</span> tom:Animals = <span class="keyword">new</span> Hourse(<span class="string">'Tommy'</span>);</span><br><span class="line">sam.move();</span><br><span class="line">tom.move(<span class="number">12</span>);</span><br></pre></td></tr></table></figure><p><strong>类<code>public</code>、<code>private</code>、<code>protected</code></strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认为public</span></span><br><span class="line"><span class="keyword">class</span> Animal0&#123;</span><br><span class="line">    <span class="keyword">public</span> name:<span class="built_in">string</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> move(distance:<span class="built_in">number</span> = <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> moved <span class="subst">$&#123;distance&#125;</span> m`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//private</span></span><br><span class="line"><span class="keyword">class</span> Animal1&#123;</span><br><span class="line">  <span class="keyword">private</span> name: <span class="built_in">string</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这个地方就会报错</span></span><br><span class="line"><span class="keyword">new</span> Animal1(<span class="string">'ni'</span>).name;</span><br></pre></td></tr></table></figure><p><strong>理解<code>private</code></strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// private属性只能在类Animal中使用。</span></span><br><span class="line"><span class="comment">// ts中如果有private和protected成员，一个类型的private和protected成员，另一个类型也必须有，并且源自同一个定义，这两个类型才是兼容的。</span></span><br><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">private</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123; <span class="keyword">this</span>.name = theName; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Rhino <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123; <span class="keyword">super</span>(<span class="string">"Rhino"</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Employee &#123;</span><br><span class="line">    <span class="keyword">private</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123; <span class="keyword">this</span>.name = theName; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里其实有个类型推论。</span></span><br><span class="line"><span class="keyword">let</span> animal = <span class="keyword">new</span> Animal(<span class="string">"Goat"</span>);</span><br><span class="line"><span class="keyword">let</span> rhino = <span class="keyword">new</span> Rhino();</span><br><span class="line"><span class="keyword">let</span> employee = <span class="keyword">new</span> Employee(<span class="string">"Bob"</span>);</span><br><span class="line"></span><br><span class="line">animal = rhino;</span><br><span class="line">animal = employee; <span class="comment">// Error: 'Animal' and 'Employee' are not compatible</span></span><br></pre></td></tr></table></figure><p><strong>理解<code>protected</code></strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 和private基本差不多，只不过私有成员不能在子类中访问，但是protected成员可以在子类中访问。</span></span><br><span class="line"><span class="comment">// 看一个栗子</span></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  <span class="keyword">protected</span> name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123; <span class="keyword">this</span>.name = theName; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Employee <span class="keyword">extends</span> Person &#123;</span><br><span class="line">  <span class="keyword">private</span> depart: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, depart: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">    <span class="keyword">this</span>.depart = depart;</span><br><span class="line">  &#125;</span><br><span class="line">  getElevatorPitch() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hello, my name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> and I work in <span class="subst">$&#123;<span class="keyword">this</span>.depart&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> zsy = <span class="keyword">new</span> Employee(<span class="string">"zsy"</span>, <span class="string">"R &amp; d"</span>);</span><br><span class="line"><span class="keyword">let</span> xiaolaji = <span class="keyword">new</span> Person(<span class="string">"xiaolaji"</span>, <span class="string">"R &amp; d"</span>);<span class="comment">// err. 类"Person"是受保护的。</span></span><br></pre></td></tr></table></figure><p><code>readonly</code>用来设置一些只读属性</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person0&#123;</span><br><span class="line">    readonly name:<span class="built_in">string</span></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> john = <span class="keyword">new</span> Person0(<span class="string">'john'</span>);</span><br><span class="line"><span class="comment">// 只读的类就不能修改了,下面就会报error了</span></span><br><span class="line">john.name = <span class="string">'xxx'</span>;</span><br></pre></td></tr></table></figure><h4 id="存取器"><a href="#存取器" class="headerlink" title="存取器"></a>存取器</h4><p><strong><code>set</code>和<code>get</code></strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="keyword">class</span> Animal0 &#123;</span><br><span class="line">  <span class="keyword">private</span> _name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>._name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> move(distance: <span class="built_in">number</span> = <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>._name&#125;</span> moved <span class="subst">$&#123;distance&#125;</span> m`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> name() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> name(newName: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>._name = newName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Hippo <span class="keyword">extends</span> Animal0 &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="string">"Hippo"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hh = <span class="keyword">new</span> Hippo();</span><br><span class="line"><span class="built_in">console</span>.log(hh.name);</span><br></pre></td></tr></table></figure><p>我们编译的时候将目标设置为<code>ES5</code>,采用下面这个命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tsc index.ts --target es5</span><br><span class="line">node index.js</span><br></pre></td></tr></table></figure><p><strong>类的静态成员</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 其实就是编译后把static成员直接赋值给了Grid。</span></span><br><span class="line"><span class="keyword">class</span> Grid &#123;</span><br><span class="line">  <span class="keyword">static</span> origin = &#123; x: <span class="number">0</span>, y: <span class="number">0</span> &#125;;</span><br><span class="line">  scale: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">scale: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.scale = scale;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  claculateDistanceFromOrigin(point: &#123; x: <span class="built_in">number</span>, y: <span class="built_in">number</span> &#125;) &#123;</span><br><span class="line">    <span class="keyword">let</span> xDist = point.x - Grid.origin.x;</span><br><span class="line">    <span class="keyword">let</span> yDist = point.y - Grid.origin.y;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(xDist * xDist + yDist * yDist) * <span class="keyword">this</span>.scale;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> grid1 = <span class="keyword">new</span> Grid(<span class="number">1.0</span>);</span><br><span class="line"><span class="keyword">let</span> grid2 = <span class="keyword">new</span> Grid(<span class="number">5.0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(Grid.origin);<span class="comment">// &#123; x: 0, y: 0 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(grid1.claculateDistanceFromOrigin(&#123; x: <span class="number">3</span>, y: <span class="number">4</span> &#125;));</span><br><span class="line"><span class="built_in">console</span>.log(grid2.claculateDistanceFromOrigin(&#123; x: <span class="number">3</span>, y: <span class="number">4</span> &#125;));</span><br></pre></td></tr></table></figure><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><blockquote><p>抽象类作为其他派生类的基类使用，他们是不能被实例化的。</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">abstract</span> makeSound(): <span class="built_in">void</span> </span><br><span class="line">    move(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'raoming the earth...'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类的高级技巧"><a href="#类的高级技巧" class="headerlink" title="类的高级技巧"></a>类的高级技巧</h4><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p><strong>基本示例</strong></p><p><code>demo</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myAdd = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>添加参数类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">unction add (x:<span class="built_in">number</span>,y:<span class="built_in">number</span>):<span class="built_in">number</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 也可以变量类型，其实不设的话调用的时候也可以推断出来的</span></span><br><span class="line"><span class="keyword">let</span> myAdd:<span class="function">(<span class="params">baseValue:<span class="built_in">number</span>,increValue:<span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="function"><span class="keyword">function</span>(<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span></span>):<span class="title">number</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>this</code></strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> deck = &#123;</span><br><span class="line">  suits: [<span class="string">"hearts"</span>, <span class="string">"spades"</span>, <span class="string">"clubs"</span>, <span class="string">"diamonds"</span>],</span><br><span class="line">  cards: <span class="built_in">Array</span>(<span class="number">52</span>),</span><br><span class="line">  createCardPicker: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// return function() &#123;</span></span><br><span class="line">    <span class="comment">// 这个地方改为箭头函数，因为他是函数创建的时候的this值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> pickedCard = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">52</span>);</span><br><span class="line">      <span class="keyword">let</span> pickSuit = <span class="built_in">Math</span>.floor(pickedCard / <span class="number">13</span>);</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment">//   这里this在ts里面会被推断为any,即suit: any</span></span><br><span class="line">        suits: <span class="keyword">this</span>.suits[pickSuit],</span><br><span class="line">        card: pickedCard % <span class="number">13</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> cardPicker = deck.createCardPicker();</span><br><span class="line"><span class="keyword">let</span> pickedCard = cardPicker();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`card: <span class="subst">$&#123;pickedCard.card&#125;</span> of <span class="subst">$&#123;pickedCard.suits&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><p><strong>解决上面的<code>suits</code>为<code>any</code>的问题</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Deck &#123;</span><br><span class="line">    suits: <span class="built_in">string</span>[];</span><br><span class="line">    cards: <span class="built_in">number</span>[];</span><br><span class="line">    createCardPicker(<span class="keyword">this</span>: Deck): <span class="function"><span class="params">()</span> =&gt;</span> Card;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> deck: Deck = &#123;</span><br><span class="line">    suits: [<span class="string">"hearts"</span>, <span class="string">"spades"</span>, <span class="string">"clubs"</span>, <span class="string">"diamonds"</span>],</span><br><span class="line">    cards: <span class="built_in">Array</span>(<span class="number">52</span>),</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> The function now explicitly specifies that its callee must be of type Deck</span></span><br><span class="line">    createCardPicker: <span class="function"><span class="keyword">function</span>(<span class="params"><span class="keyword">this</span>: Deck</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> pickedCard = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">52</span>);</span><br><span class="line">            <span class="keyword">let</span> pickedSuit = <span class="built_in">Math</span>.floor(pickedCard / <span class="number">13</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;suit: <span class="keyword">this</span>.suits[pickedSuit], card: pickedCard % <span class="number">13</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>this</code>在回调函数里面</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ts里面的this参数作为"伪"参数在函数参数列表的第一项</span></span><br><span class="line"><span class="keyword">interface</span> UIElement &#123;</span><br><span class="line">  <span class="comment">// this: void 表示onclick希望是个不使用this的函数。</span></span><br><span class="line">  addClickListener(onclick: <span class="function">(<span class="params"><span class="keyword">this</span>: <span class="built_in">void</span>, e: Event</span>) =&gt;</span> <span class="built_in">void</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Handler &#123;</span><br><span class="line"></span><br><span class="line">  info: <span class="built_in">string</span>;</span><br><span class="line">  onClickBad(<span class="keyword">this</span>: Handler, e: Event) &#123;</span><br><span class="line">      <span class="keyword">this</span>.info = e.type;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> h = <span class="keyword">new</span> Handler();</span><br><span class="line"><span class="keyword">let</span> uiElement: UIElement = &#123;</span><br><span class="line">  addClickListener() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">uiElement.addClickListener(h.onClickBad); <span class="comment">// error</span></span><br></pre></td></tr></table></figure><p><code>arrow</code>函数在<code>ts</code>中依然可以解决<code>this</code>的坑</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Handler &#123;</span><br><span class="line">    info: <span class="built_in">string</span>;</span><br><span class="line">    onClickGood(<span class="keyword">this</span>: <span class="built_in">void</span>, e: Event) &#123;</span><br><span class="line">        <span class="comment">// can't use `this` here because it's of type void!</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'clicked!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> h = <span class="keyword">new</span> Handler();</span><br><span class="line">uiElement.addClickListener(h.onClickGood);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果要在函数里使用this，就用箭头函数，因为箭头函数的this其实是外部的this</span></span><br><span class="line"><span class="keyword">class</span> Handler &#123;</span><br><span class="line">    info: <span class="built_in">string</span>;</span><br><span class="line">    onClickGood = <span class="function">(<span class="params">e: Event</span>) =&gt;</span> &#123; <span class="keyword">this</span>.info = e.message &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>重载</strong></p><p><code>ts</code>中的方法重载</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> suits = [<span class="string">"hearts"</span>, <span class="string">"spades"</span>, <span class="string">"clubs"</span>, <span class="string">"diamonds"</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pickCard</span>(<span class="params">x: &#123;suit: <span class="built_in">string</span>; card: <span class="built_in">number</span>; &#125;[]</span>): <span class="title">number</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pickCard</span>(<span class="params">x: <span class="built_in">number</span></span>): </span>&#123;suit: <span class="built_in">string</span>; card: <span class="built_in">number</span>; &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pickCard</span>(<span class="params">x</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> x == <span class="string">"object"</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> pickedCard = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * x.length);</span><br><span class="line">        <span class="keyword">return</span> pickedCard;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Otherwise just let them pick the card</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x == <span class="string">"number"</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> pickedSuit = <span class="built_in">Math</span>.floor(x / <span class="number">13</span>);</span><br><span class="line">        <span class="keyword">return</span> &#123; suit: suits[pickedSuit], card: x % <span class="number">13</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myDeck = [&#123; suit: <span class="string">"diamonds"</span>, card: <span class="number">2</span> &#125;, &#123; suit: <span class="string">"spades"</span>, card: <span class="number">10</span> &#125;, &#123; suit: <span class="string">"hearts"</span>, card: <span class="number">4</span> &#125;];</span><br><span class="line"><span class="keyword">let</span> pickedCard1 = myDeck[pickCard(myDeck)];</span><br><span class="line">alert(<span class="string">"card: "</span> + pickedCard1.card + <span class="string">" of "</span> + pickedCard1.suit);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pickedCard2 = pickCard(<span class="number">15</span>);</span><br><span class="line">alert(<span class="string">"card: "</span> + pickedCard2.card + <span class="string">" of "</span> + pickedCard2.suit);</span><br></pre></td></tr></table></figure><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>基本示例</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回任何传入的值，T同时用来捕获用户的传入类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg:T</span>):<span class="title">T</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里适用于多个类型，不会像any一样丢失类型</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回任何传入它的值,T同来捕获用户的传入类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg:T</span>):<span class="title">T</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 编译器识别不了的话则可以使用这种形式</span></span><br><span class="line"><span class="keyword">let</span> output0 = identity&lt;<span class="built_in">string</span>&gt;(<span class="string">'mystring'</span>)</span><br><span class="line"><span class="comment">// 这里编译器会自动帮我们推断出传入的值的类型</span></span><br><span class="line"><span class="keyword">let</span> output = identity(<span class="string">'Mystring'</span>)</span><br></pre></td></tr></table></figure><p><strong>推荐</strong>的第二种写法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loginingIndetity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg:T[]</span>):<span class="title">T</span>[]</span>&#123;</span><br><span class="line">  <span class="comment">// 如果arg:T这里就不会有length属性，我们将其修改为T[]</span></span><br><span class="line">   <span class="built_in">console</span>.log(arg.length);</span><br><span class="line">   <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>声明泛型变量</strong>的两种方式</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这表示myIdentity和myIdentity2都是一个接受类型为T的arg参数，并且返回值类型为T的函数</span></span><br><span class="line"><span class="keyword">let</span> myIdentity: &lt;T&gt;<span class="function">(<span class="params">arg: T</span>) =&gt;</span> T = identity;</span><br><span class="line"><span class="keyword">let</span> myIdentity2: &#123; &lt;T&gt;(arg: T): T &#125; = identity;</span><br></pre></td></tr></table></figure><p><strong>泛型和接口</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> G&lt;T&gt; &#123;</span><br><span class="line">  (arg: T): T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myIdentity3: G&lt;<span class="built_in">number</span>&gt; = identity;</span><br></pre></td></tr></table></figure><p>这样的好处在于我们不用在接口里面去描述一个泛型函数了。</p><p><strong>泛型类</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> GenricNumber&lt;T&gt; &#123;</span><br><span class="line">  zeroValue: T;</span><br><span class="line">  add: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 会自动推导出add函数的参数和返回制类型</span></span><br><span class="line"><span class="keyword">let</span> myGenericNumber = <span class="keyword">new</span> GenricNumber&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line">myGenericNumber.zeroValue = <span class="number">0</span>;</span><br><span class="line">myGenericNumber.add = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> stringNumberic = <span class="keyword">new</span> GenricNumber&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">stringNumberic.zeroValue = <span class="string">""</span>;</span><br><span class="line">stringNumberic.add = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(stringNumberic.add(stringNumberic.zeroValue, <span class="string">"test"</span>));</span><br></pre></td></tr></table></figure><p>泛型约束</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Lengthwise &#123;</span><br><span class="line">  length: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Lengthwise</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg.length);</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以用泛型约束泛型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProperty</span>&lt;<span class="title">T</span>, <span class="title">K</span> <span class="title">extends</span> <span class="title">keyof</span> <span class="title">T</span>&gt;(<span class="params">obj: T, key: K</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> obj[key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = &#123;a: <span class="number">1</span>, b: <span class="number">2</span>, c: <span class="number">3</span>, d: <span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line">getProperty(x, <span class="string">"a"</span>);</span><br><span class="line">getProperty(x, <span class="string">"z"</span>);<span class="comment">// error</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;类&quot;&gt;&lt;a href=&quot;#类&quot; class=&quot;headerlink&quot; title=&quot;类&quot;&gt;&lt;/a&gt;类&lt;/h3&gt;&lt;p&gt;类的一些基本示例:&lt;/p&gt;
&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="ts" scheme="http://yoursite.com/tags/ts/"/>
    
  </entry>
  
  <entry>
    <title>凡心所向，素履以往</title>
    <link href="http://yoursite.com/2019/10/01/%E5%87%A1%E5%BF%83%E6%89%80%E5%90%91/"/>
    <id>http://yoursite.com/2019/10/01/凡心所向/</id>
    <published>2019-10-01T07:45:47.000Z</published>
    <updated>2019-10-03T13:15:55.957Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="生如夏花，此生唯有不断的靠近存在于心中的那片天地，才算是不曾虚耗光阴。"><a href="#生如夏花，此生唯有不断的靠近存在于心中的那片天地，才算是不曾虚耗光阴。" class="headerlink" title="生如夏花，此生唯有不断的靠近存在于心中的那片天地，才算是不曾虚耗光阴。"></a>生如夏花，此生唯有不断的靠近存在于心中的那片天地，才算是不曾虚耗光阴。</h3></blockquote><blockquote><p>凡心所向，素履以往，生如逆旅，一苇以航。</p><p>不关此世，不负己心，我自倾杯，且君随意。</p><p>​                                                      ——七堇年 《尘曲》 </p></blockquote><p>现实不允许我们过着那种只有诗句里才能看到的写意人生，而且我们也达不到那种境界，只有工作才能养活自己和家人。</p><p>但这并不代表我们就要被同化，每个人都有着不同的生命轨迹，总有那么些沉静的日子，细数着为数不多的梦想，摒弃一切的恶俗，抵制一切的诱惑，无论它们看起来多么绝美，会感动地发现自己依然在牢牢地守住内心深处期盼已久的誓言。</p><p>年少时，总是憧憬着各种不切实际的梦想，幻想着未来的幸福，然而现实却以一种残酷无情甚至是恶毒的方式告诉我，你太年轻了，放弃吧。心之所向不是子虚乌有，而是自己能够努力抵达的终点，是对自我的皈依，人生的涅槃。</p><p>人生如逆旅，我亦是行人。必不可能有完美的人生，亦没有符合所有心情的生活，每个人都会有消沉的日子，也注定每个人的路上都会有数不清的艰苦，始终记得自己要抵达的终点才是憩脚之处，不然只能和泥沙一样永远地沉入江底，虽然不用再为了前进而努力了，但是却永远地失去了阳光。</p><p>季节不断地嬗变，岁月不停地流走。散落四季的物事，化作人生的风景，旅途留下的或深或浅，斑斑驳驳的脚印，证明你没有与谁擦肩而过。能支撑自己一直走下去，而不是流连忘返于虚无的美景，是自己心之所向。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;生如夏花，此生唯有不断的靠近存在于心中的那片天地，才算是不曾虚耗光阴。&quot;&gt;&lt;a href=&quot;#生如夏花，此生唯有不断的靠近存在于心中的那片天地，才算是不曾虚耗光阴。&quot; class=&quot;headerlink&quot; title=&quot;生如夏花，此生唯有
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="心情" scheme="http://yoursite.com/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu qq使用</title>
    <link href="http://yoursite.com/2019/10/01/Ubuntu-qq%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/10/01/Ubuntu-qq使用/</id>
    <published>2019-10-01T07:24:35.000Z</published>
    <updated>2019-10-01T14:10:01.487Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>首先，查看本地的系统环境：</p></blockquote><p><code>lsb_release -a</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Distributor ID:Ubuntu</span><br><span class="line">Description:Ubuntu 16.04.6 LTS</span><br><span class="line">Release:16.04</span><br><span class="line">Codename:xenial</span><br></pre></td></tr></table></figure><blockquote><p>然后看教程</p></blockquote><ul><li>首先安装wine:<code>git clone https://github.com/wszqkzqk/deepin-wine-ubuntu.git</code></li><li><code>cd deepin-wine-ubuntu &amp;&amp; sudo sh ./install.sh</code></li><li>然后去 <a href="http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.office/" target="_blank" rel="noopener">tim镜像网站</a> 和 <a href="http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.wechat/" target="_blank" rel="noopener">微信镜像网站</a> 下载到对应的<code>deb</code>安装包(微信最好不要下载最新的)</li><li>将下载下来的<code>deb</code>包使用命令行进行解压<code>sudo dpkg -i xxx.deb</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;首先，查看本地的系统环境：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;lsb_release -a&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt
      
    
    </summary>
    
    
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>typescript2(基础篇1)</title>
    <link href="http://yoursite.com/2019/09/30/TypeScript%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2019/09/30/TypeScript入门学习/</id>
    <published>2019-09-30T07:53:34.000Z</published>
    <updated>2019-10-22T09:49:52.763Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JavaScript 的一个超集，主要提供了<strong>类型系统</strong>和<strong>对 ES6 的支持</strong></p></blockquote><h3 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h3><p><strong>布尔值：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new Boolean()通过不了，其它基本类型也一样（除了null和undefined）</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">let</span> isDone: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p><strong>数字：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以用es6的进制表示数字，被编译为十进制</span></span><br><span class="line"><span class="keyword">let</span> decLiteral: <span class="built_in">number</span> = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> hexLiteral: <span class="built_in">number</span> = <span class="number">0xf00d</span>;</span><br></pre></td></tr></table></figure><p><strong>字符串：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//支持模板字符串</span></span><br><span class="line"><span class="keyword">let</span> myName: <span class="built_in">string</span> = <span class="string">'Tom'</span>;</span><br><span class="line"><span class="keyword">let</span> sentence: <span class="built_in">string</span> = <span class="string">`Hello, my name is <span class="subst">$&#123;myName&#125;</span>.</span></span><br></pre></td></tr></table></figure><p><strong>void</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//和java一样，void一般用在函数上，表示没有返回值</span></span><br><span class="line"><span class="comment">//放在变量上没什么用，只能将它赋值为 undefined 和 null</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">alertName</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    alert(<span class="string">'My name is Tom'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> unusable: <span class="built_in">void</span> = <span class="literal">undefined</span> || <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p><strong>undefined和null</strong>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//undefined 和 null 是所有类型的子类型</span></span><br><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = u;</span><br></pre></td></tr></table></figure><p><strong>any</strong>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以认为，声明一个变量为任意值之后，对它的任何操作，返回的内容的类型都是任意值。</span></span><br><span class="line"><span class="comment">//和js没啥区别，对重构js有用。</span></span><br><span class="line"><span class="keyword">let</span> myFavoriteNumber: <span class="built_in">any</span> = <span class="string">'seven'</span>;</span><br><span class="line">myFavoriteNumber = <span class="number">7</span>;</span><br></pre></td></tr></table></figure><p><strong>类型推论</strong>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义之后不赋值，推断为any</span></span><br><span class="line"><span class="keyword">let</span> myFavoriteNumber;</span><br><span class="line">myFavoriteNumber = <span class="string">'seven'</span>;</span><br><span class="line">myFavoriteNumber = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myFavoriteNumber = <span class="string">'seven'</span>;</span><br><span class="line">myFavoriteNumber = <span class="number">7</span>;</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="keyword">let</span> myFavoriteNumber: <span class="built_in">string</span> = <span class="string">'seven'</span>;</span><br><span class="line">myFavoriteNumber = <span class="number">7</span>;</span><br></pre></td></tr></table></figure><p><strong>联合类型</strong>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ts在编译的时候不清楚联合类型的变量到底什么类型，只能访问它的所有类型里的共有方法和属性</span></span><br><span class="line"><span class="comment">//toString()是string和number的共有方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getString</span>(<span class="params">something: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> something.toString();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类型检查</span></span><br><span class="line"><span class="keyword">let</span> myFavoriteNumber: <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line">myFavoriteNumber = <span class="string">'seven'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(myFavoriteNumber.length); <span class="comment">// 5</span></span><br><span class="line">myFavoriteNumber = <span class="number">7</span>;</span><br><span class="line"><span class="built_in">console</span>.log(myFavoriteNumber.length); <span class="comment">// 编译时报错</span></span><br></pre></td></tr></table></figure><p><strong>类型断言</strong>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将一个联合类型断言为更具体的类型,这样就不会报错了</span></span><br><span class="line"><span class="comment">//不要理解为类型转换，不能断言一个联合类型中不存在的类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params">something: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((&lt;<span class="built_in">string</span>&gt;something).length) &#123;</span><br><span class="line">        <span class="keyword">return</span> (&lt;<span class="built_in">string</span>&gt;something).length;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> something.toString().length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用类型断言对之进行一个强制的转换</span></span><br><span class="line"><span class="comment">// 一般多使用as jsx里面只能使用这种</span></span><br><span class="line"><span class="keyword">let</span> len1: <span class="built_in">number</span> = (value1 <span class="keyword">as</span> <span class="built_in">string</span>).length;</span><br><span class="line"><span class="keyword">let</span> len2: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;value1).length;</span><br></pre></td></tr></table></figure><p><strong>数组：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里的数组里面数值必须和前面的一样</span></span><br><span class="line"><span class="comment">//支持泛型</span></span><br><span class="line"><span class="keyword">let</span> fibonacci: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> fibonacci: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">//定义时会约束数组一些方法的参数，如下会报参数错误</span></span><br><span class="line"><span class="keyword">let</span> fibonacci: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line">fibonacci.push(<span class="string">'8'</span>);</span><br></pre></td></tr></table></figure><p><strong>元组：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//元组是解决数组只能合并相同类型的方案</span></span><br><span class="line"><span class="comment">//通过索引方式赋值可以只赋值其中某些项，但是当直接对元组类型的变量进行初始化或者赋值的时候,需要提供所有元组类型中指定的项</span></span><br><span class="line"><span class="keyword">let</span> tom: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">'Tom'</span>, <span class="number">25</span>];</span><br><span class="line"><span class="keyword">let</span> tom: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">tom[<span class="number">0</span>] = <span class="string">'Tom'</span>;</span><br><span class="line"><span class="comment">//越界按联合类型处理</span></span><br><span class="line"><span class="keyword">let</span> tom: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">tom = [<span class="string">'Tom'</span>, <span class="number">25</span>];</span><br><span class="line">tom.push(<span class="string">'male'</span>);</span><br></pre></td></tr></table></figure><p><strong>枚举：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认从0开始编号，可手动赋值。</span></span><br><span class="line"><span class="keyword">enum</span> Days &#123;Sun, Mon, Tue, Wed, Thu, Fri, Sat&#125;;</span><br><span class="line"><span class="comment">//编译(可以正向找值，也可以反向找值) </span></span><br><span class="line">Days[Days[<span class="string">"Sun"</span>] = <span class="number">0</span>] = <span class="string">"Sun"</span>;</span><br><span class="line"><span class="keyword">let</span> d: Days = Days.Sun; <span class="comment">//0</span></span><br><span class="line"><span class="keyword">let</span> day: <span class="built_in">string</span> = Days[<span class="number">0</span>]; <span class="comment">//Sun</span></span><br><span class="line"><span class="comment">//手动赋值的枚举项可以不是数字，此时需要使用类型断言来让 tsc 无视类型检查 </span></span><br><span class="line"><span class="keyword">enum</span> Days &#123;Sun = <span class="number">7</span>, Mon, Tue, Wed, Thu, Fri, Sat = &lt;<span class="built_in">any</span>&gt;<span class="string">"S"</span>&#125;;</span><br><span class="line"><span class="comment">//上面都是常数项，还支持计算所得项</span></span><br><span class="line"><span class="comment">//紧接在计算所得项后面的项必须手动赋值</span></span><br><span class="line"><span class="keyword">enum</span> Color &#123;Red, Green, Blue = <span class="string">"blue"</span>.length&#125;;</span><br></pre></td></tr></table></figure><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><blockquote><p>行为抽象，需要由类去实现具体的行为，其实就是规范</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里对label属性的值做一个string的校验</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLabel</span>(<span class="params">labelledObj: &#123; label: <span class="built_in">string</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(labelledObj.label);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myObj = &#123; size: <span class="number">10</span>, label: <span class="string">"Size 10 object"</span> &#125;;</span><br><span class="line">printLabel(myObj);</span><br></pre></td></tr></table></figure><p>我们通过接口来对上面的代码进行一个重写:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> LabelledValue&#123;</span><br><span class="line">    label:<span class="built_in">string</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLabel</span>(<span class="params">labelledObj: LabelledValue</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(labelledObj.label);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 上面声明之后，那么myObj这里就必须要有这个属性</span></span><br><span class="line"><span class="keyword">let</span> myObj = &#123; size: <span class="number">10</span>, label: <span class="string">"Size 10 object"</span> &#125;;</span><br><span class="line">printLabel(myObj);</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//赋值的时候，变量的形状必须和接口的形状保持一致，多一个，少一个都不行</span></span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line">    name: <span class="string">'Tom'</span>,</span><br><span class="line">    age: <span class="number">25</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//支持可选属性，定义可选的属性可以不存在</span></span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>任意类型</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当我们需要一个任意类型时</span></span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">    [propName: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集。A be assignable to B – A是B的子类</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Square &#123;</span><br><span class="line">  color: <span class="built_in">string</span>;</span><br><span class="line">  area: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> SquareConfig &#123;</span><br><span class="line">  color?: <span class="built_in">string</span>;</span><br><span class="line">  width?: <span class="built_in">number</span>;</span><br><span class="line">  [propName: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSquare</span>(<span class="params">config: SquareConfig</span>): <span class="title">Square</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> newSquare = &#123; color: <span class="string">"white"</span>, area: <span class="number">1000</span> &#125;;</span><br><span class="line">  <span class="comment">// 这里判断一下可选属性</span></span><br><span class="line">  <span class="keyword">if</span> (config.color) &#123;</span><br><span class="line">    newSquare.color = config.color;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (config.width) &#123;</span><br><span class="line">    newSquare.area = config.width * config.width;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newSquare;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(createSquare(&#123;&#125;));</span><br><span class="line"><span class="comment">// 如果我们这里不小心把属性名称写错了，但是由于上面有额外的属性检测，这里就不会报错</span></span><br><span class="line"><span class="built_in">console</span>.log(createSquare(&#123; colour: <span class="string">"blue"</span>, width: <span class="number">100</span> &#125;));</span><br><span class="line"><span class="built_in">console</span>.log(createSquare(&#123; color: <span class="string">"yello"</span> &#125;));</span><br></pre></td></tr></table></figure><p><strong>只读属性</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    readonly id: <span class="built_in">number</span>;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">    [propName: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此处第一次给对象赋值时，一定要给id赋值，否则报错</span></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line">    id: <span class="number">89757</span>,</span><br><span class="line">    name: <span class="string">'Tom'</span>,</span><br><span class="line">    gender: <span class="string">'male'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//赋值会报错</span></span><br><span class="line">tom.id = <span class="number">9527</span>;</span><br></pre></td></tr></table></figure><blockquote><p><code>ts</code>里面还有一种只读的数组泛型:</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a: <span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> ro: ReadonlyArray&lt;<span class="built_in">number</span>&gt; = a;</span><br><span class="line"><span class="comment">// 只读的数组泛型,下面这些操作都会犯罪</span></span><br><span class="line">ro[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">ro.push(<span class="number">5</span>);</span><br><span class="line"><span class="comment">// 正确操作回去可以使用类型断言</span></span><br><span class="line">a = ro <span class="keyword">as</span> <span class="built_in">number</span>[]</span><br></pre></td></tr></table></figure><p><strong>可索引类型的接口：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> StringArray &#123;</span><br><span class="line">  [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myArray: StringArray;</span><br><span class="line">myArray = [<span class="string">"Bob"</span>, <span class="string">"Fred"</span>];</span><br><span class="line"><span class="keyword">let</span> myStr: <span class="built_in">string</span> = myArray[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">  breed: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> NotOkay &#123;</span><br><span class="line">  [x: <span class="built_in">number</span>]: Dog;</span><br><span class="line">  [x: <span class="built_in">string</span>]: Animal;</span><br><span class="line">  <span class="comment">//数字类型索引的索引值一定要是字符串索引类型索引值的子类型</span></span><br><span class="line">  <span class="comment">//因为当用number做索引时，js会将其转化为string，然后再去做索引</span></span><br><span class="line">  <span class="comment">// 这个地方按照下面写会报错，因为数字签名(Animal)并不是字符串签名(Dog)的子类型</span></span><br><span class="line">  <span class="comment">// [x: string]: Dog;</span></span><br><span class="line">  <span class="comment">// [x: number]: Animal;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置一个只读类型的索引签名:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ReadonlyStringArray &#123;</span><br><span class="line">    readonly [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myArray: ReadonlyStringArray = [<span class="string">"Alice"</span>, <span class="string">"Bob"</span>];</span><br><span class="line">myArray[<span class="number">2</span>] = <span class="string">"Mallory"</span>; <span class="comment">// error!</span></span><br></pre></td></tr></table></figure><h3 id="class类型"><a href="#class类型" class="headerlink" title="class类型"></a>class类型</h3><blockquote><p>规则和java一样</p></blockquote><blockquote><p>这里要注意一下：es6中实例属性的新写法 – 实例属性除了定义在<code>constructor()</code>方法里面的<code>this</code>上面，也可以定义在类的最顶层。</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造器接口</span></span><br><span class="line"><span class="keyword">interface</span> ClockInterface &#123;</span><br><span class="line">  <span class="comment">// 这两个类型是实例类型</span></span><br><span class="line">  currentTime: <span class="built_in">Date</span>;</span><br><span class="line">  setTime(d: <span class="built_in">Date</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例接口,用构造器签名(signatrue)定义的一个接口</span></span><br><span class="line"><span class="keyword">interface</span> ClockContructor &#123;</span><br><span class="line">  <span class="keyword">new</span> (hour: <span class="built_in">number</span>, minute: <span class="built_in">number</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果这个地方去继承ClockContructor的话会报error</span></span><br><span class="line"><span class="comment">// 当类实现一个接口时，只对实例部分进行类型检查，而constructor存在于静态部分。</span></span><br><span class="line"><span class="keyword">class</span> Clock <span class="keyword">implements</span> ClockInterface &#123;</span><br><span class="line">  currentTime: <span class="built_in">Date</span>;</span><br><span class="line">  setTime(d: <span class="built_in">Date</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.currentTime = d;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可是如果我们想去使用一个实例类型的话，代码是可以这样写的:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此处的tick()不用进行类型检查，在类中为静态方法（class.prototype）</span></span><br><span class="line"><span class="keyword">interface</span> ClockConstructor &#123;</span><br><span class="line">    <span class="keyword">new</span> (hour: <span class="built_in">number</span>, minute: <span class="built_in">number</span>): ClockInterface;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> ClockInterface &#123;</span><br><span class="line">    tick(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createClock</span>(<span class="params">ctor: ClockConstructor, hour: <span class="built_in">number</span>, minute: <span class="built_in">number</span></span>): <span class="title">ClockInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ctor(hour, minute);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> DigitalClock <span class="keyword">implements</span> ClockInterface &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">    tick() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"beep beep"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> AnalogClock <span class="keyword">implements</span> ClockInterface &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">    tick() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"tick tock"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> digital = createClock(DigitalClock, <span class="number">10</span>, <span class="number">15</span>);</span><br><span class="line"><span class="keyword">let</span> analog = createClock(AnalogClock, <span class="number">5</span>, <span class="number">38</span>);</span><br></pre></td></tr></table></figure><p><strong>接口继承：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Shape &#123;</span><br><span class="line">  color: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> PenStroke &#123;</span><br><span class="line">  penWidth: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Square <span class="keyword">extends</span> Shape, PenStroke &#123;</span><br><span class="line">  sideLength: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 先这样继承下来，后续实例对多个接口变量进行访问</span></span><br><span class="line"><span class="keyword">let</span> square = &#123;&#125; <span class="keyword">as</span> Square;</span><br><span class="line">square.color = <span class="string">"blue"</span>;</span><br><span class="line">square.sideLength = <span class="number">12</span>;</span><br><span class="line">square.penWidth = <span class="number">15</span>;</span><br></pre></td></tr></table></figure><p><strong>混合类型(接口既可以当成对象使用，也可以当函数用):</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Counter &#123;</span><br><span class="line">  <span class="comment">// 函数类型，有个start参数，返回一个string类型</span></span><br><span class="line">  (start: <span class="built_in">number</span>): <span class="built_in">string</span>;</span><br><span class="line">  <span class="comment">//   一些额外的属性</span></span><br><span class="line">  interval: <span class="built_in">number</span>;</span><br><span class="line">  reset():<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义一个函数，返回一个Counter类型的接口</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCounter</span>(<span class="params"></span>):<span class="title">Counter</span></span>&#123;</span><br><span class="line">  <span class="keyword">let</span> counter = (<span class="function"><span class="keyword">function</span>(<span class="params">star:<span class="built_in">number</span></span>)</span>&#123;&#125;) <span class="keyword">as</span> Counter;</span><br><span class="line">  counter.interval = <span class="number">123</span>;</span><br><span class="line">  counter.reset = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> counter;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c = getCounter();</span><br><span class="line"><span class="comment">// 因为这就是个这样的函数</span></span><br><span class="line">c(<span class="number">10</span>);</span><br><span class="line"><span class="comment">// 它也可以当成对象使用</span></span><br><span class="line">c.reset();</span><br><span class="line">c.interval = <span class="number">5.0</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;JavaScript 的一个超集，主要提供了&lt;strong&gt;类型系统&lt;/strong&gt;和&lt;strong&gt;对 ES6 的支持&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;基础类型&quot;&gt;&lt;a href=&quot;#基础类型&quot; class
      
    
    </summary>
    
    
    
      <category term="ts" scheme="http://yoursite.com/tags/ts/"/>
    
  </entry>
  
  <entry>
    <title>网易云开发日志 忘记第几天了</title>
    <link href="http://yoursite.com/2019/09/29/%E7%BD%91%E6%98%93%E4%BA%91%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97-%E5%BF%98%E8%AE%B0%E7%AC%AC%E5%87%A0%E5%A4%A9%E4%BA%86/"/>
    <id>http://yoursite.com/2019/09/29/网易云开发日志-忘记第几天了/</id>
    <published>2019-09-29T08:36:20.000Z</published>
    <updated>2019-10-04T01:58:45.264Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="彼岸花开，蓝蝶依肩。"><a href="#彼岸花开，蓝蝶依肩。" class="headerlink" title="彼岸花开，蓝蝶依肩。"></a>彼岸花开，蓝蝶依肩。</h3></blockquote><p>(1)</p><blockquote><p>后端返回的数据一般都是直接new Date()的Long类型时间。需要自己手写转换工具。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 时间格式化工具</span></span><br><span class="line"><span class="comment"> * 把Long类型的1527672756454日期还原yyyy-MM-dd格式日期</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">dateFormat</span>(<span class="params">longTypeDate</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> dateTypeDate = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">date.setTime(longTypeDate);</span><br><span class="line">dateTypeDate += date.getFullYear(); <span class="comment">//年</span></span><br><span class="line">dateTypeDate += <span class="string">"-"</span> + getMonth(date); <span class="comment">//月</span></span><br><span class="line">dateTypeDate += <span class="string">"-"</span> + getDay(date); <span class="comment">//日</span></span><br><span class="line"><span class="keyword">return</span> dateTypeDate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回 01-12 的月份值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMonth</span>(<span class="params">date</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> month = <span class="string">""</span>;</span><br><span class="line">month = date.getMonth() + <span class="number">1</span>; <span class="comment">//getMonth()得到的月份是0-11</span></span><br><span class="line"><span class="keyword">if</span>(month&lt;<span class="number">10</span>)&#123;</span><br><span class="line">month = <span class="string">"0"</span> + month;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> month;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回01-30的日期</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDay</span>(<span class="params">date</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> day = <span class="string">""</span>;</span><br><span class="line">day = date.getDate();</span><br><span class="line"><span class="keyword">if</span>(day&lt;<span class="number">10</span>)&#123;</span><br><span class="line">day = <span class="string">"0"</span> + day;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> day;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)</p><p><code>es6</code>中<code>import</code>和<code>export</code>的一些细节</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// counter.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;a&#125; <span class="keyword">from</span> <span class="string">'./my'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'谕'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// my.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'宋'</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> a = <span class="string">'我喜欢你啊，你喜欢我吗'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'俊'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line"><span class="comment">//宋</span></span><br><span class="line"><span class="comment">//俊</span></span><br><span class="line"><span class="comment">//谕</span></span><br><span class="line"><span class="comment">//我喜欢你啊，你喜欢我吗</span></span><br></pre></td></tr></table></figure><p>看看编译后的<code>counter.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#----------------mod start----------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="function"><span class="keyword">function</span> (<span class="params">module, exports</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">window</span>[<span class="string">"60ae5ba7"</span>] = &#123;&#125;;</span><br><span class="line">    </span><br><span class="line"><span class="meta">    "use strict"</span>;</span><br><span class="line">    <span class="comment">// my.js</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'宋'</span>);</span><br><span class="line">    <span class="built_in">window</span>[<span class="string">"60ae5ba7"</span>].a = <span class="string">'我喜欢你，你喜欢我吗'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'俊'</span>);</span><br><span class="line">    </span><br><span class="line">&#125;(&#123;<span class="attr">exports</span>:&#123;&#125;&#125;, &#123;&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//#----------------mod end----------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#----------------mod start----------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="function"><span class="keyword">function</span> (<span class="params">module, exports</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">window</span>[<span class="string">"3d4fdd69"</span>] = &#123;&#125;;</span><br><span class="line">    </span><br><span class="line"><span class="meta">    "use strict"</span>;</span><br><span class="line">    <span class="comment">// counter.js</span></span><br><span class="line">    <span class="keyword">var</span> my_1 = <span class="built_in">window</span>[<span class="string">"60ae5ba7"</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'谕'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(my_1.a);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把console.log(a)去掉</span></span><br><span class="line"><span class="comment">// counter.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;a&#125; <span class="keyword">from</span> <span class="string">'./my'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'谕'</span>);</span><br><span class="line"><span class="comment">// console.log(a);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line"><span class="comment">//谕</span></span><br></pre></td></tr></table></figure><p>为什么只输出一句了？</p><blockquote><p>ES6的模块加载机制是“静态加载”，执行import命令是在编译期间完成，生成一个静态引用。等到需要的时候，再到模块里面去取值。</p></blockquote><p>那为什么之前的顺序是宋俊谕我喜欢你，你喜欢我吗，而不是先输出谕呢？</p><blockquote><p>仅为猜测：在编译的时候，发现了后面有使用到a的地方，就在运行时遇到import的地方直接执行了模块的代码。</p></blockquote><p>(3)</p><blockquote><p>WARNING in asset size limit: The following asset(s) exceed the recommended size limit (244 KiB).</p></blockquote><p>解决</p><p>方式一  webpack中添加如下配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">performance: &#123;</span><br><span class="line">hints:<span class="literal">false</span>   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式二 webpack中添加如下配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">performance: &#123;</span><br><span class="line">    hints: <span class="string">"warning"</span>, <span class="comment">// 枚举</span></span><br><span class="line">    maxAssetSize: <span class="number">30000000</span>, <span class="comment">// 整数类型（以字节为单位）</span></span><br><span class="line">    maxEntrypointSize: <span class="number">50000000</span>, <span class="comment">// 整数类型（以字节为单位）</span></span><br><span class="line">    assetFilter: <span class="function"><span class="keyword">function</span>(<span class="params">assetFilename</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 提供资源文件名的断言函数</span></span><br><span class="line">    <span class="keyword">return</span> assetFilename.endsWith(<span class="string">'.css'</span>) || assetFilename.endsWith(<span class="string">'.js'</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;彼岸花开，蓝蝶依肩。&quot;&gt;&lt;a href=&quot;#彼岸花开，蓝蝶依肩。&quot; class=&quot;headerlink&quot; title=&quot;彼岸花开，蓝蝶依肩。&quot;&gt;&lt;/a&gt;彼岸花开，蓝蝶依肩。&lt;/h3&gt;&lt;/blockquote&gt;
&lt;p&gt;(1)&lt;/p&gt;
&lt;bl
      
    
    </summary>
    
    
    
      <category term="dva" scheme="http://yoursite.com/tags/dva/"/>
    
  </entry>
  
  <entry>
    <title>JSX限制以及解决</title>
    <link href="http://yoursite.com/2019/09/28/JSX%E9%99%90%E5%88%B6%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3/"/>
    <id>http://yoursite.com/2019/09/28/JSX限制以及解决/</id>
    <published>2019-09-28T08:17:33.000Z</published>
    <updated>2019-09-28T08:31:40.268Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JSX使用的限制</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没有 div 包裹会报错</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> title = (</span><br><span class="line">  &lt;h1&gt;Parallel elements demo&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">  &lt;p&gt;Content&lt;/</span>p&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(title, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</span><br></pre></td></tr></table></figure><blockquote><p>突破JSX标签的限制</p></blockquote><p><strong>返回数组</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">'Adams'</span>, <span class="string">'Bill'</span>, <span class="string">'Charlie'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Arr = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;p key=&#123;index&#125;&gt;&#123;item&#125;&lt;/p&gt;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;Arr /&gt;, document.getElementById('root'));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;JSX使用的限制&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>每一天都很喜欢你</title>
    <link href="http://yoursite.com/2019/09/28/%E6%88%91%E6%AF%8F%E4%B8%80%E5%A4%A9%E9%83%BD%E5%BE%88%E5%96%9C%E6%AC%A2%E4%BD%A0/"/>
    <id>http://yoursite.com/2019/09/28/我每一天都很喜欢你/</id>
    <published>2019-09-28T00:50:07.000Z</published>
    <updated>2019-10-03T13:30:16.702Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="我喜欢你-从程序员嘴里说出来是什么样子的，哈哈哈哈哈哈，最藏情的告白"><a href="#我喜欢你-从程序员嘴里说出来是什么样子的，哈哈哈哈哈哈，最藏情的告白" class="headerlink" title="我喜欢你 从程序员嘴里说出来是什么样子的，哈哈哈哈哈哈，最藏情的告白"></a><strong>我喜欢你 从程序员嘴里说出来是什么样子的，哈哈哈哈哈哈，最藏情的告白</strong></h3></blockquote><p><strong>基础</strong></p><blockquote><p>字符串和ascii码之间的转换</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符串转ascii码，用charCodeAt();</span></span><br><span class="line"><span class="comment">//ascii码转字符串，用fromCharCode();</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">"A"</span>;</span><br><span class="line"><span class="keyword">let</span> code = str.charCodeAt();</span><br><span class="line"><span class="keyword">let</span> str2 = <span class="built_in">String</span>.fromCharCode(code);</span><br></pre></td></tr></table></figure><blockquote><p>十进制和其它机制之间的转换</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//其它进制转十进制，用</span></span><br><span class="line"># parseInt(string, radix-如果该参数小于 2 或者大于 36，则parseInt() 将返回 NaN);</span><br><span class="line"># 如果未设置radix或为0，则会根据string来判断要解析的数字的基数;</span><br><span class="line"><span class="comment">//十进制转其它进制，用</span></span><br><span class="line"># NumberObject.toString(radix-默认为10);</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">130</span>;</span><br><span class="line">a.toSting(<span class="number">2</span>);<span class="comment">//十进制 -&gt; 二进制</span></span><br><span class="line">a.toString(<span class="number">8</span>)<span class="comment">//十进制 -&gt; 八进制</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">10010110</span>;</span><br><span class="line"><span class="built_in">parseInt</span>(b, <span class="number">2</span>);<span class="comment">//二进制 -&gt; 10进制</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="number">226</span>;</span><br><span class="line"><span class="built_in">parseInt</span>(c, <span class="number">8</span>);<span class="comment">//8进制 -&gt; 10进制</span></span><br></pre></td></tr></table></figure><blockquote><p>字符串和二进制流的相互转换</p></blockquote><p><strong>将二进制字符串转换成Unicode字符串</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binaryToStr</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">let</span> result = [];</span><br><span class="line">     <span class="keyword">let</span> list = str.split(<span class="string">" "</span>);</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;list.length;i++)&#123;</span><br><span class="line">           <span class="keyword">let</span> item = list[i];</span><br><span class="line">           <span class="keyword">let</span> asciiCode = <span class="built_in">parseInt</span>(item,<span class="number">2</span>);</span><br><span class="line">           <span class="keyword">let</span> charValue = <span class="built_in">String</span>.fromCharCode(asciiCode);</span><br><span class="line">           result.push(charValue);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result.join(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>将字符串转换为二进制，中间用空格隔开</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strToBinary</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">let</span> list = str.split(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;list.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i != <span class="number">0</span>)&#123;</span><br><span class="line">            result.push(<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> item = list[i];</span><br><span class="line">        <span class="keyword">let</span> binaryStr = item.charCodeAt().toString(<span class="number">2</span>);</span><br><span class="line">        result.push(binaryStr);</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> result.join(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">strToBinary(<span class="string">"我喜欢你"</span>)</span><br><span class="line"><span class="string">"110001000010001 101010110011100 110101100100010 100111101100000"</span></span><br></pre></td></tr></table></figure><p><strong>二进制转换为十六进制</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">编码</span><br><span class="line"><span class="keyword">let</span> code = strToBinary(<span class="string">"我喜欢你"</span>).split(<span class="string">" "</span>).map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(item, <span class="number">2</span>).toString(<span class="number">16</span>);</span><br><span class="line">&#125;).join(<span class="string">" "</span>);</span><br><span class="line"><span class="string">"6211 559c 6b22 4f60"</span></span><br><span class="line">解码</span><br><span class="line"><span class="keyword">let</span> char = code.split(<span class="string">" "</span>).map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(item, <span class="number">16</span>).toString(<span class="number">2</span>);</span><br><span class="line">&#125;).join(<span class="string">" "</span>)</span><br><span class="line">binaryToStr(char);</span><br><span class="line"><span class="comment">//"我喜欢你"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//你喜欢人的人的名字</span></span><br><span class="line">比如</span><br><span class="line"><span class="string">"s"</span>.charCodeAt();</span><br><span class="line"><span class="string">"j"</span>.charCodeAt();</span><br><span class="line"><span class="string">"y"</span>.charCodeAt();</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ 6211 559c 6b22 4f60-115-106-121</span><br></pre></td></tr></table></figure><p>( ⊙ o ⊙ )！，好巧啊，这不是我的<code>qq</code>密码吗</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;我喜欢你-从程序员嘴里说出来是什么样子的，哈哈哈哈哈哈，最藏情的告白&quot;&gt;&lt;a href=&quot;#我喜欢你-从程序员嘴里说出来是什么样子的，哈哈哈哈哈哈，最藏情的告白&quot; class=&quot;headerlink&quot; title=&quot;我喜欢你 从程序员嘴里
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>变形transform</title>
    <link href="http://yoursite.com/2019/09/27/%E5%8F%98%E5%BD%A2transform/"/>
    <id>http://yoursite.com/2019/09/27/变形transform/</id>
    <published>2019-09-27T11:17:53.000Z</published>
    <updated>2019-09-28T02:50:28.583Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>几个常用的transform</p></blockquote><p><strong>这些属性都是不影响原来的布局的。</strong></p><p><strong>rotate()</strong></p><blockquote><p>通过指定的角度参数使元素相对原点进行旋转，正值则顺时针。</p></blockquote><p><img src="https://thinkerhope.github.io/2019/09/27/%E5%8F%98%E5%BD%A2transform/t1.png" alt></p><p><strong>scale()</strong></p><blockquote><p>让元素根据中心原点对对象进行缩放。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">scale</span>(<span class="selector-tag">x</span>,<span class="selector-tag">y</span>)</span><br><span class="line"><span class="selector-tag">scale</span>(<span class="selector-tag">x</span>)</span><br><span class="line"><span class="selector-tag">scale</span>(<span class="selector-tag">y</span>)</span><br></pre></td></tr></table></figure><p><strong>translate()</strong> </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:translate(x</span>,<span class="selector-tag">y</span>)</span><br><span class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:translate(x)</span></span><br><span class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:translate(y)</span></span><br></pre></td></tr></table></figure><blockquote><p>关于translate百分比的疑惑</p></blockquote><p>实验一下就清楚了</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">border</span>: <span class="number">40px</span> solid red;</span><br><span class="line"><span class="attribute">border-width</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">padding-left</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line"><span class="attribute">background-color</span>:yellow;</span><br><span class="line"><span class="comment">/* Rotate div */</span></span><br><span class="line"><span class="attribute">transform</span>:<span class="built_in">translate</span>(50%);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">120px</span>;</span><br><span class="line"><span class="attribute">display</span>: inline-block;</span><br><span class="line"><span class="attribute">background</span>:blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class="box2"&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class="box1"&gt;Hello World&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><img src="https://thinkerhope.github.io/2019/09/27/%E5%8F%98%E5%BD%A2transform/tr02.png" alt></p><p>可见，百分比是相对自身的长宽（padding + width + border）</p><p><strong>transform-origin</strong></p><blockquote><p>默认情况之下，其中心点是居于元素X轴和Y轴的50%处。</p></blockquote><p><img src="https://thinkerhope.github.io/2019/09/27/%E5%8F%98%E5%BD%A2transform/r3.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;几个常用的transform&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;这些属性都是不影响原来的布局的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;rotate()&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通
      
    
    </summary>
    
    
    
      <category term="css3" scheme="http://yoursite.com/tags/css3/"/>
    
  </entry>
  
  <entry>
    <title>hooks学习</title>
    <link href="http://yoursite.com/2019/09/26/hooks%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2019/09/26/hooks学习/</id>
    <published>2019-09-26T12:25:39.000Z</published>
    <updated>2019-09-27T06:10:50.193Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="Thinking-In-Life-Why-We-are-Living"><a href="#Thinking-In-Life-Why-We-are-Living" class="headerlink" title="Thinking In Life Why We are Living."></a>Thinking In Life Why We are Living.</h3></blockquote><blockquote><p>Hooks是React 16.8新加特性，这篇博客记录于v16.9.0。不能在class组件里使用Hooks，但是你可以通过使用state和React的一些特性而不用写class。</p></blockquote><p><strong>何时使用</strong></p><p>当你写函数组件时，发现自己需要使用state的时候。</p><h4 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h4><p><strong>无Hooks的无状态组件</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Example = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &lt;div /&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Hooks使你可以实现可复用的状态组件</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>useState(initial)</code>只接受一个参数，即<code>count</code>的初始值。</p><p>返回值是一个包含当前组件的state和一个更新它的函数的数组，然后利用解构赋值赋值给我们定义的变量名(名字我们自己起的)。</p><p>如果需要存储多个值在<code>state</code>里，需要调用<code>useState()</code>多次。</p><p><code>count</code>是我们定义的<code>state</code>属性，可以是任何名字。类似于<code>class</code>组件里的<code>this.state.count</code>；</p><p><code>setCount</code>是用来更新<code>count</code>的，可以是任何名字。类似于class组件里的<code>this.setState()</code>。</p><blockquote><p>定义多个</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ExampleWithManyStates</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [age, setAge] = useState(<span class="number">42</span>);</span><br><span class="line">  <span class="keyword">const</span> [fruit, setFruit] = useState(<span class="string">'banana'</span>);</span><br><span class="line">  <span class="keyword">const</span> [todos, setTodos] = useState([&#123; <span class="attr">text</span>: <span class="string">'Learn Hooks'</span> &#125;]);</span><br></pre></td></tr></table></figure><h4 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h4><blockquote><p>类似于<code>class</code>组件中<code>componentDidMount</code>和 <code>componentDidUpdate</code></p></blockquote><h6 id="分两种情况来学习useEffect"><a href="#分两种情况来学习useEffect" class="headerlink" title="分两种情况来学习useEffect"></a>分两种情况来学习useEffect</h6><p>（1）第一种是effect不需要消除</p><p>有的时候我们希望产生同一个effect（比如请求），不管是Didmount还是DidUpdate，如果是class组件，要在<code>componentDidMount</code>和 <code>componentDidUpdate</code>两个函数里写同样的代码，没有一个统一的方法。而<code>Hooks</code>提供了<code>useEffect</code>完成了这一需求。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>类似于</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;<span class="keyword">this</span>.state.count&#125;</span> times`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidUpdate() &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;<span class="keyword">this</span>.state.count&#125;</span> times`</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里要注意，函数式组件和class组件渲染的不同，函数组件是调用函数（相当于class组件中的render()函数）所以每次更新函数式组件都要重新调用组件函数，而class组件一直存在内存里(只要不卸载它)(new的一个对象)，每次更新只要调用render()就行了。</p></blockquote><p><strong>解释</strong></p><p>默认，每次更新或者第一次<code>render</code>都会调用<code>useEffect</code>里的回调。</p><p>因为在同一个函数作用域链里，所以，<code>useEffect</code>能直接访问<code>useState()</code>里的变量。</p><p>（2）还有一种是需要在组件卸载的时候清除effect</p><p><strong>class组件的写法</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line">    ChatAPI.subscribeToFriendStatus(</span><br><span class="line">      <span class="keyword">this</span>.props.friend.id,</span><br><span class="line">      <span class="keyword">this</span>.handleStatusChange</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    ChatAPI.unsubscribeFromFriendStatus(</span><br><span class="line">      <span class="keyword">this</span>.props.friend.id,</span><br><span class="line">      <span class="keyword">this</span>.handleStatusChange</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>Hooks的写法</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">handleStatusChange</span>(<span class="params">status</span>) </span>&#123;</span><br><span class="line">     setIsOnline(status.isOnline);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);</span><br><span class="line">   <span class="comment">// Specify how to clean up after this effect:</span></span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">cleanup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);</span><br><span class="line">   &#125;;</span><br><span class="line">  <span class="comment">//return () =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);</span></span><br><span class="line">  <span class="comment">//&#125;</span></span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><p><strong>解释</strong></p><p>cleanup函数名并不是闭包必须的，可以返回一个匿名/箭头函数。</p><p>cleanup执行时机：每次组件卸载(unmount)都会执行。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Mount with &#123; friend: &#123; id: 100 &#125; &#125; props</span></span><br><span class="line">ChatAPI.subscribeToFriendStatus(<span class="number">100</span>, handleStatusChange);     <span class="comment">// Run first effect</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Update with &#123; friend: &#123; id: 200 &#125; &#125; props</span></span><br><span class="line">ChatAPI.unsubscribeFromFriendStatus(<span class="number">100</span>, handleStatusChange); <span class="comment">// Clean up previous effect</span></span><br><span class="line">ChatAPI.subscribeToFriendStatus(<span class="number">200</span>, handleStatusChange);     <span class="comment">// Run next effect</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Update with &#123; friend: &#123; id: 300 &#125; &#125; props</span></span><br><span class="line">ChatAPI.unsubscribeFromFriendStatus(<span class="number">200</span>, handleStatusChange); <span class="comment">// Clean up previous effect</span></span><br><span class="line">ChatAPI.subscribeToFriendStatus(<span class="number">300</span>, handleStatusChange);     <span class="comment">// Run next effect</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Unmount</span></span><br><span class="line">ChatAPI.unsubscribeFromFriendStatus(<span class="number">300</span>, handleStatusChange); <span class="comment">// Clean up last effect</span></span><br></pre></td></tr></table></figure><p><strong>useEffect的第二个参数</strong></p><p>class组件写法</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">componentDidUpdate(prevProps, prevState) &#123;</span><br><span class="line">  <span class="keyword">if</span> (prevState.count !== <span class="keyword">this</span>.state.count) &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;<span class="keyword">this</span>.state.count&#125;</span> times`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hooks写法</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">&#125;, [count]); <span class="comment">// Only re-run the effect if count changes</span></span><br></pre></td></tr></table></figure><p>两者效果是一样的。</p><p><strong>注意</strong></p><blockquote><p>数组里的比较使用 === 运算符，只要数组一项改变，就会重新执行<code>useEffect()</code>（对有<code>cleanup</code>的<code>useEffect</code>也同样有效）</p></blockquote><p>如果你只需要在<code>mount</code>和<code>unmount</code>时只执行一次<code>useEffect</code>，传入<code>[]</code>空数组。</p><h4 id="题外"><a href="#题外" class="headerlink" title="题外"></a>题外</h4><p><code>Babel</code>默认只转换新的<code>JavaScript</code>句法（<code>syntax</code>），而不转换新的<code>API</code>，比如<code>Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise</code>等全局对象，以及一些定义在全局对象上的方法（比如<code>Object.assign</code>）都不会转码。而且像<code>import</code>和<code>export</code>这两个命令现在在任何浏览器中都是不支持的, 同时babel也无法将其转换为浏览器支持的ES5。</p><p>原因在于:<br><code>babel</code>只是个翻译，假设<code>a.js</code> 里 <code>import</code> 了 <code>b.js</code>, 对<code>a.js</code>进行转码，只是翻译了<code>a.js</code>，并不会把<code>b.js</code>的内容给读取合并进来, 如果想在最终的某一个<code>js</code>里，包含 <code>a.js</code>，<code>b.js</code> 的代码，那就需要用到打包工具。(哎，写个<code>demo</code>都要用<code>webpack</code>的嘛)</p><p>配置<code>webpack</code>的一些坑</p><p><strong>Error Decoder</strong></p><blockquote><p><strong>Target container is not a DOM element.</strong></p></blockquote><p>如果要手动引入标签，要把<code>bundle.js</code>放在<code>ReactDOM.render(&lt;MyComponent /&gt;, DOMContainer);</code>后面。</p><p><strong>打包的时候出现找不到react、react-dom模块</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save react</span><br><span class="line">$ npm install --save react-dom</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;Thinking-In-Life-Why-We-are-Living&quot;&gt;&lt;a href=&quot;#Thinking-In-Life-Why-We-are-Living&quot; class=&quot;headerlink&quot; title=&quot;Thinking In
      
    
    </summary>
    
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
      <category term="Hooks" scheme="http://yoursite.com/tags/Hooks/"/>
    
  </entry>
  
  <entry>
    <title>react学习 02</title>
    <link href="http://yoursite.com/2019/09/26/react%E5%AD%A6%E4%B9%A0-02/"/>
    <id>http://yoursite.com/2019/09/26/react学习-02/</id>
    <published>2019-09-25T23:08:08.000Z</published>
    <updated>2019-09-26T12:29:36.102Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="待雾散开，自然能看到想要的风景。"><a href="#待雾散开，自然能看到想要的风景。" class="headerlink" title="待雾散开，自然能看到想要的风景。"></a>待雾散开，自然能看到想要的风景。</h3></blockquote><p>我们都知道，<code>JSX</code>是<code>React.createElement(component, props, ...children)</code>的语法糖。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> React.createElement(<span class="string">'div'</span>, <span class="literal">null</span>, <span class="string">`Hello <span class="subst">$&#123;<span class="keyword">this</span>.props.toWhat&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  React.createElement(Hello, &#123;<span class="attr">toWhat</span>: <span class="string">'World'</span>&#125;, <span class="literal">null</span>),</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>Diff算法</p></blockquote><p><strong>当组件的root为不同类型的diff</strong></p><p>diffing如下</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;Counter /&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;span&gt;</span></span><br><span class="line"><span class="regexp">  &lt;Counter /</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/span&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;Counter /&gt;</code> 会被卸载并且它的<code>state</code>会被销毁</p><p><strong>同类型的DOM元素比较</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=<span class="string">"before"</span> title=<span class="string">"stuff"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;div className=<span class="string">"after"</span> title=<span class="string">"stuff"</span> /&gt;</span><br></pre></td></tr></table></figure><p><code>React</code>只改变<code>className</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&#123;&#123;<span class="attr">color</span>: <span class="string">'red'</span>, <span class="attr">fontWeight</span>: <span class="string">'bold'</span>&#125;&#125; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;div style=&#123;&#123;<span class="attr">color</span>: <span class="string">'green'</span>, <span class="attr">fontWeight</span>: <span class="string">'bold'</span>&#125;&#125; /&gt;</span><br></pre></td></tr></table></figure><p><code>React</code>也只改变<code>color</code></p><p><strong>同类型的React组件</strong></p><p><code>React</code>不会卸载组件(即同一个<code>JS instance</code>)，<code>React</code>会通过更新<code>props</code>去匹配新的DOM元素，之后调用<code>componentWillReceiveProps()</code> and <code>componentWillUpdate()</code>。</p><p><strong>在Children中递归</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li&gt;first&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  &lt;li&gt;second&lt;/</span>li&gt;</span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;ul&gt;</span></span><br><span class="line"><span class="regexp">  &lt;li&gt;first&lt;/</span>li&gt;</span><br><span class="line">  &lt;li&gt;second&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  &lt;li&gt;third&lt;/</span>li&gt;</span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br></pre></td></tr></table></figure><p><code>React</code>能匹配<code>first</code>和<code>second</code>，并且保证这两棵子树的完整，只是插入<code>third</code>子树。</p><p>试想一下，如果<code>third</code>在<code>first</code>之前插入，<code>React</code>不会考虑<code>first</code>和<code>second</code>的完整性，而是改变每一个子节点。How a bad performance !</p><h3 id="Key"><a href="#Key" class="headerlink" title="Key"></a>Key</h3><blockquote><p>key用来解决上面的问题</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li key=<span class="string">"first"</span>&gt;first&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  &lt;li key="second"&gt;second&lt;/</span>li&gt;</span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;ul&gt;</span></span><br><span class="line"><span class="regexp">  &lt;li key="third"&gt;third&lt;/</span>li&gt;</span><br><span class="line">  &lt;li key=<span class="string">"first"</span>&gt;first&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  &lt;li key="second"&gt;second&lt;/</span>li&gt;</span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br></pre></td></tr></table></figure><p>​p><h3 id="Render-Props"><a href="#Render-Props" class="headerlink" title="Render Props"></a>Render Props</h3><blockquote><p>利用render props解决组件复用问题</p></blockquote><p>一个简单的应用场景</p><p>需要记录鼠标移动的位置，并用<code>p标签</code>显示出来。</p><p>一般会直接封装一个<code>Mouse</code>组件用来记录鼠标的位置并且保存在state状态。并且通过<code>this.state</code>在<code>p标签</code>中显示。直接在<code>MouseTracker</code>(父组件中调用就可以了)。</p><p>但这并没有实现真正的封装，当我们新增业务需求的时候，比如需要随鼠标渲染出一只猫的<code>image</code>，创建一个<code>Cat组件</code>。把<code>Cat</code>组件放在Mouse组件的render()方法里，通过传入<code>this.state</code>来获取鼠标位置渲染出<code>image</code>。这样就失去复用的的意义了，如果要渲染Dog，Pig，那么每次都要重新创建Mouse组件，<code>MouseWithCat</code>、<code>MouseWithPig</code>、<code>MouseWithDog</code>。</p><blockquote><p>利用render属性，可以实现动态渲染。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> mouse = <span class="keyword">this</span>.props.mouse;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;img src=<span class="string">"/cat.jpg"</span> style=&#123;&#123; <span class="attr">position</span>: <span class="string">'absolute'</span>, <span class="attr">left</span>: mouse.x, <span class="attr">top</span>: mouse.y &#125;&#125; /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mouse</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.handleMouseMove = <span class="keyword">this</span>.handleMouseMove.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleMouseMove(event) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      x: event.clientX,</span><br><span class="line">      y: event.clientY</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div style=&#123;&#123; <span class="attr">height</span>: <span class="string">'100%'</span> &#125;&#125; onMouseMove=&#123;<span class="keyword">this</span>.handleMouseMove&#125;&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.props.render(<span class="keyword">this</span>.state)&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class MouseTracker extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;h1&gt;Move the mouse around!&lt;/</span>h1&gt;</span><br><span class="line">        &lt;Mouse render=&#123;mouse =&gt; (</span><br><span class="line">          &lt;Cat mouse=&#123;mouse&#125; /&gt;</span><br><span class="line">        )&#125;/&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><p><strong>(1) render Props的属性名不强制规定为render</strong></p><p><strong>(2) children prop也能实现</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Mouse&gt;</span><br><span class="line">  &#123;mouse =&gt; (</span><br><span class="line">    &lt;p&gt;The mouse position is &#123;mouse.x&#125;, &#123;mouse.y&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  )&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Mouse&gt;</span><br></pre></td></tr></table></figure><p>(3) 小心用render属性</p><p>因为render属性是个函数，向下面这样写就很不好</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Mouse render=&#123;mouse =&gt; (</span><br><span class="line">         &lt;Cat mouse=&#123;mouse&#125; /&gt;</span><br><span class="line">       )&#125;/&gt;</span><br></pre></td></tr></table></figure><p>每次Mouse组件重新渲染的时候都会重新创建render函数。</p><p>将render函数作为组件实例方法就行了。(组件一般都会一直在内存里)</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MouseTracker</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  renderTheCat(mouse) &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;Cat mouse=&#123;mouse&#125; /&gt;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Move the mouse around!&lt;/h1&gt;</span><br><span class="line">        &lt;Mouse render=&#123;this.renderTheCat&#125; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;待雾散开，自然能看到想要的风景。&quot;&gt;&lt;a href=&quot;#待雾散开，自然能看到想要的风景。&quot; class=&quot;headerlink&quot; title=&quot;待雾散开，自然能看到想要的风景。&quot;&gt;&lt;/a&gt;待雾散开，自然能看到想要的风景。&lt;/h3&gt;&lt;/bl
      
    
    </summary>
    
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
</feed>
